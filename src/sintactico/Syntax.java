
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\117\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\005\000\002\011\005\000\002\011\005" +
    "\000\002\006\005\000\002\006\005\000\002\007\005\000" +
    "\002\007\005\000\002\014\004\000\002\014\004\000\002" +
    "\012\016\000\002\013\013\000\002\016\004\000\002\016" +
    "\006\000\002\015\006\000\002\017\005\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\025\005\000\002\025\006\000\002\027\004\000\002\027" +
    "\005\000\002\034\007\000\002\035\005\000\002\036\013" +
    "\000\002\021\006\000\002\021\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\003\000\002\026\006\000\002" +
    "\026\006\000\002\033\004\000\002\033\004\000\002\033" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\031\004\000\002" +
    "\032\003\000\002\032\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\004\000\002\020\004\000\002\020\004" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\040\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\236\001\002\000\004\046\007\001\002" +
    "\000\006\056\011\057\010\001\002\000\004\046\227\001" +
    "\002\000\004\046\221\001\002\000\004\060\154\001\002" +
    "\000\004\054\014\001\002\000\036\017\032\043\021\046" +
    "\035\047\025\050\042\051\026\056\011\057\010\062\024" +
    "\065\016\066\043\070\040\073\023\074\033\001\002\000" +
    "\004\055\152\001\002\000\022\017\047\043\021\046\050" +
    "\047\025\050\042\051\026\073\023\074\033\001\002\000" +
    "\006\046\uffef\055\uffef\001\002\000\006\046\uffec\055\uffec" +
    "\001\002\000\010\046\144\073\143\074\145\001\002\000" +
    "\064\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7" +
    "\015\uffc7\016\uffc7\020\uffc7\023\uffc7\024\uffc7\026\uffc7\027" +
    "\uffc7\030\uffc7\031\uffc7\037\uffc7\041\uffc7\042\uffc7\044\uffc7" +
    "\045\uffc7\046\uffc7\055\uffc7\063\uffc7\071\uffc7\072\uffc7\001" +
    "\002\000\064\006\uffbf\007\uffbf\010\uffbf\011\uffbf\012\uffbf" +
    "\013\uffbf\015\uffbf\016\uffbf\020\uffbf\023\uffbf\024\uffbf\026" +
    "\uffbf\027\uffbf\030\uffbf\031\uffbf\037\uffbf\041\uffbf\042\uffbf" +
    "\044\uffbf\045\uffbf\046\uffbf\055\uffbf\063\uffbf\071\uffbf\072" +
    "\uffbf\001\002\000\022\017\047\043\021\046\050\047\025" +
    "\050\042\051\026\073\023\074\033\001\002\000\064\006" +
    "\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5" +
    "\016\uffc5\020\uffc5\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030" +
    "\uffc5\031\uffc5\037\uffc5\041\uffc5\042\uffc5\044\uffc5\045\uffc5" +
    "\046\uffc5\055\uffc5\063\uffc5\071\uffc5\072\uffc5\001\002\000" +
    "\064\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\015\uffc6\016\uffc6\020\uffc6\023\uffc6\024\uffc6\026\uffc6\027" +
    "\uffc6\030\uffc6\031\uffc6\037\uffc6\041\uffc6\042\uffc6\044\uffc6" +
    "\045\uffc6\046\uffc6\055\uffc6\063\uffc6\071\uffc6\072\uffc6\001" +
    "\002\000\006\046\uffea\055\uffea\001\002\000\006\046\uffe9" +
    "\055\uffe9\001\002\000\006\046\uffee\055\uffee\001\002\000" +
    "\022\017\032\043\021\046\050\047\025\050\042\051\026" +
    "\073\023\074\033\001\002\000\064\006\uffbe\007\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe\020\uffbe" +
    "\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\037" +
    "\uffbe\041\uffbe\042\uffbe\044\uffbe\045\uffbe\046\uffbe\055\uffbe" +
    "\063\uffbe\071\uffbe\072\uffbe\001\002\000\006\046\uffeb\055" +
    "\uffeb\001\002\000\010\005\052\006\053\023\127\001\002" +
    "\000\006\046\uffed\055\uffed\001\002\000\026\006\115\013" +
    "\116\015\106\016\114\026\112\027\110\030\117\031\111" +
    "\044\107\045\113\001\002\000\004\046\075\001\002\000" +
    "\064\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\015\uffc3\016\uffc3\020\uffc3\023\uffc3\024\uffc3\026\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\037\uffc3\041\uffc3\042\uffc3\044\uffc3" +
    "\045\uffc3\046\uffc3\055\uffc3\063\uffc3\071\uffc3\072\uffc3\001" +
    "\002\000\064\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4" +
    "\013\uffc4\015\uffc4\016\uffc4\020\uffc4\023\uffc4\024\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\037\uffc4\041\uffc4\042\uffc4" +
    "\044\uffc4\045\uffc4\046\uffc4\055\uffc4\063\uffc4\071\uffc4\072" +
    "\uffc4\001\002\000\004\067\044\001\002\000\022\017\047" +
    "\043\021\046\050\047\025\050\042\051\026\073\023\074" +
    "\033\001\002\000\016\007\072\010\067\011\071\012\070" +
    "\023\065\024\066\001\002\000\006\046\uffe3\055\uffe3\001" +
    "\002\000\022\017\047\043\021\046\050\047\025\050\042" +
    "\051\026\073\023\074\033\001\002\000\006\005\052\006" +
    "\053\001\002\000\064\006\uffc2\007\uffc2\010\uffc2\011\uffc2" +
    "\012\uffc2\013\uffc2\015\uffc2\016\uffc2\020\uffc2\023\uffc2\024" +
    "\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\037\uffc2\041\uffc2" +
    "\042\uffc2\044\uffc2\045\uffc2\046\uffc2\055\uffc2\063\uffc2\071" +
    "\uffc2\072\uffc2\001\002\000\064\006\uffc1\007\uffc1\010\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\020\uffc1\023" +
    "\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\037\uffc1" +
    "\041\uffc1\042\uffc1\044\uffc1\045\uffc1\046\uffc1\055\uffc1\063" +
    "\uffc1\071\uffc1\072\uffc1\001\002\000\064\006\uffc0\007\uffc0" +
    "\010\uffc0\011\uffc0\012\uffc0\013\uffc0\015\uffc0\016\uffc0\020" +
    "\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0" +
    "\037\uffc0\041\uffc0\042\uffc0\044\uffc0\045\uffc0\046\uffc0\055" +
    "\uffc0\063\uffc0\071\uffc0\072\uffc0\001\002\000\004\020\055" +
    "\001\002\000\020\020\uffb3\041\060\042\057\046\uffb3\055" +
    "\uffb3\063\uffb3\072\uffb3\001\002\000\014\020\uffdb\046\uffdb" +
    "\055\uffdb\063\uffdb\072\uffdb\001\002\000\022\017\047\043" +
    "\021\046\050\047\025\050\042\051\026\073\023\074\033" +
    "\001\002\000\022\017\047\043\021\046\050\047\025\050" +
    "\042\051\026\073\023\074\033\001\002\000\014\020\uffd8" +
    "\046\uffd8\055\uffd8\063\uffd8\072\uffd8\001\002\000\014\020" +
    "\uffd9\046\uffd9\055\uffd9\063\uffd9\072\uffd9\001\002\000\014" +
    "\020\uffda\046\uffda\055\uffda\063\uffda\072\uffda\001\002\000" +
    "\020\043\021\046\050\047\025\050\042\051\026\073\023" +
    "\074\033\001\002\000\020\043\uffc9\046\uffc9\047\uffc9\050" +
    "\uffc9\051\uffc9\073\uffc9\074\uffc9\001\002\000\020\043\uffc8" +
    "\046\uffc8\047\uffc8\050\uffc8\051\uffc8\073\uffc8\074\uffc8\001" +
    "\002\000\020\043\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd" +
    "\073\uffcd\074\uffcd\001\002\000\020\043\uffcb\046\uffcb\047" +
    "\uffcb\050\uffcb\051\uffcb\073\uffcb\074\uffcb\001\002\000\020" +
    "\043\uffca\046\uffca\047\uffca\050\uffca\051\uffca\073\uffca\074" +
    "\uffca\001\002\000\020\043\uffcc\046\uffcc\047\uffcc\050\uffcc" +
    "\051\uffcc\073\uffcc\074\uffcc\001\002\000\020\020\uffb3\041" +
    "\060\042\057\046\uffb3\055\uffb3\063\uffb3\072\uffb3\001\002" +
    "\000\014\020\uffdc\046\uffdc\055\uffdc\063\uffdc\072\uffdc\001" +
    "\002\000\004\023\076\001\002\000\020\043\021\046\050" +
    "\047\025\050\042\051\026\073\023\074\033\001\002\000" +
    "\004\071\100\001\002\000\020\043\021\046\050\047\025" +
    "\050\042\051\026\073\023\074\033\001\002\000\004\072" +
    "\102\001\002\000\004\054\103\001\002\000\004\055\104" +
    "\001\002\000\006\046\uffe2\055\uffe2\001\002\000\020\043" +
    "\021\046\050\047\025\050\042\051\026\073\023\074\033" +
    "\001\002\000\020\043\uffd5\046\uffd5\047\uffd5\050\uffd5\051" +
    "\uffd5\073\uffd5\074\uffd5\001\002\000\020\043\uffd3\046\uffd3" +
    "\047\uffd3\050\uffd3\051\uffd3\073\uffd3\074\uffd3\001\002\000" +
    "\020\043\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\073\uffd1" +
    "\074\uffd1\001\002\000\020\043\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\073\uffcf\074\uffcf\001\002\000\020\043\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\051\uffd2\073\uffd2\074\uffd2\001" +
    "\002\000\020\043\uffce\046\uffce\047\uffce\050\uffce\051\uffce" +
    "\073\uffce\074\uffce\001\002\000\020\043\uffd4\046\uffd4\047" +
    "\uffd4\050\uffd4\051\uffd4\073\uffd4\074\uffd4\001\002\000\020" +
    "\043\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6\073\uffd6\074" +
    "\uffd6\001\002\000\020\043\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\073\uffd7\074\uffd7\001\002\000\020\043\uffd0\046" +
    "\uffd0\047\uffd0\050\uffd0\051\uffd0\073\uffd0\074\uffd0\001\002" +
    "\000\026\006\115\013\116\015\106\016\114\026\112\027" +
    "\110\030\117\031\111\044\107\045\113\001\002\000\010" +
    "\020\uffe1\046\uffe1\055\uffe1\001\002\000\020\043\021\046" +
    "\050\047\025\050\042\051\026\073\023\074\033\001\002" +
    "\000\034\006\115\013\116\015\106\016\114\020\uffb3\026" +
    "\112\027\110\030\117\031\111\044\107\045\113\046\uffb3" +
    "\055\uffb3\001\002\000\010\020\uffde\046\uffde\055\uffde\001" +
    "\002\000\010\020\uffdf\046\uffdf\055\uffdf\001\002\000\010" +
    "\020\uffdd\046\uffdd\055\uffdd\001\002\000\020\043\021\046" +
    "\050\047\025\050\042\051\026\073\023\074\033\001\002" +
    "\000\004\037\131\001\002\000\006\046\ufff1\055\ufff1\001" +
    "\002\000\004\020\133\001\002\000\010\020\uffe0\046\uffe0" +
    "\055\uffe0\001\002\000\004\063\135\001\002\000\010\046" +
    "\uffe8\055\uffe8\064\137\001\002\000\006\046\uffe7\055\uffe7" +
    "\001\002\000\006\055\141\062\024\001\002\000\004\055" +
    "\142\001\002\000\006\046\uffe6\055\uffe6\001\002\000\006" +
    "\046\uffe5\055\uffe5\001\002\000\064\006\uffbc\007\uffbc\010" +
    "\uffbc\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\020\uffbc" +
    "\023\uffbc\024\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\037" +
    "\uffbc\041\uffbc\042\uffbc\044\uffbc\045\uffbc\046\uffbc\055\uffbc" +
    "\063\uffbc\071\uffbc\072\uffbc\001\002\000\064\006\uffbd\007" +
    "\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd" +
    "\020\uffbd\023\uffbd\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031" +
    "\uffbd\037\uffbd\041\uffbd\042\uffbd\044\uffbd\045\uffbd\046\uffbd" +
    "\055\uffbd\063\uffbd\071\uffbd\072\uffbd\001\002\000\064\006" +
    "\uffbb\007\uffbb\010\uffbb\011\uffbb\012\uffbb\013\uffbb\015\uffbb" +
    "\016\uffbb\020\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\037\uffbb\041\uffbb\042\uffbb\044\uffbb\045\uffbb" +
    "\046\uffbb\055\uffbb\063\uffbb\071\uffbb\072\uffbb\001\002\000" +
    "\004\072\147\001\002\000\004\054\150\001\002\000\004" +
    "\055\151\001\002\000\006\046\uffe4\055\uffe4\001\002\000" +
    "\004\002\uffff\001\002\000\004\061\207\001\002\000\004" +
    "\046\155\001\002\000\004\017\156\001\002\000\020\075" +
    "\157\076\161\077\164\100\167\101\165\102\163\103\166" +
    "\001\002\000\012\046\uffba\054\uffba\056\uffba\057\uffba\001" +
    "\002\000\004\020\173\001\002\000\012\046\uffb8\054\uffb8" +
    "\056\uffb8\057\uffb8\001\002\000\004\046\170\001\002\000" +
    "\012\046\uffb4\054\uffb4\056\uffb4\057\uffb4\001\002\000\012" +
    "\046\uffb9\054\uffb9\056\uffb9\057\uffb9\001\002\000\012\046" +
    "\uffb6\054\uffb6\056\uffb6\057\uffb6\001\002\000\012\046\uffb7" +
    "\054\uffb7\056\uffb7\057\uffb7\001\002\000\012\046\uffb5\054" +
    "\uffb5\056\uffb5\057\uffb5\001\002\000\006\020\ufff3\036\171" +
    "\001\002\000\020\075\157\076\161\077\164\100\167\101" +
    "\165\102\163\103\166\001\002\000\004\020\ufff2\001\002" +
    "\000\004\040\174\001\002\000\020\075\157\076\161\077" +
    "\164\100\167\101\165\102\163\103\166\001\002\000\004" +
    "\054\176\001\002\000\036\017\032\043\021\046\035\047" +
    "\025\050\042\051\026\056\011\057\010\062\024\065\016" +
    "\066\043\070\040\073\023\074\033\001\002\000\004\046" +
    "\201\001\002\000\004\055\204\001\002\000\004\023\202" +
    "\001\002\000\020\043\021\046\050\047\025\050\042\051" +
    "\026\073\023\074\033\001\002\000\004\055\ufff0\001\002" +
    "\000\004\060\154\001\002\000\004\061\ufff5\001\002\000" +
    "\004\054\ufffe\001\002\000\004\046\210\001\002\000\004" +
    "\017\211\001\002\000\020\075\157\076\161\077\164\100" +
    "\167\101\165\102\163\103\166\001\002\000\004\020\213" +
    "\001\002\000\004\054\214\001\002\000\036\017\032\043" +
    "\021\046\035\047\025\050\042\051\026\056\011\057\010" +
    "\062\024\065\016\066\043\070\040\073\023\074\033\001" +
    "\002\000\004\055\216\001\002\000\004\061\207\001\002" +
    "\000\004\054\ufff4\001\002\000\006\056\011\057\010\001" +
    "\002\000\006\036\222\040\223\001\002\000\004\046\221" +
    "\001\002\000\020\075\157\076\161\077\164\100\167\101" +
    "\165\102\163\103\166\001\002\000\006\056\ufff9\057\ufff9" +
    "\001\002\000\006\056\ufff8\057\ufff8\001\002\000\010\046" +
    "\ufffc\055\ufffc\060\ufffc\001\002\000\006\036\232\040\233" +
    "\001\002\000\006\056\011\057\010\001\002\000\010\046" +
    "\ufffd\055\ufffd\060\ufffd\001\002\000\004\046\227\001\002" +
    "\000\020\075\157\076\161\077\164\100\167\101\165\102" +
    "\163\103\166\001\002\000\006\056\ufffb\057\ufffb\001\002" +
    "\000\006\056\ufffa\057\ufffa\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\004\012" +
    "\011\011\001\001\000\004\006\227\001\001\000\004\007" +
    "\217\001\001\000\004\012\152\001\001\000\002\001\001" +
    "\000\030\005\014\011\016\015\030\020\040\021\035\025" +
    "\017\030\036\031\021\034\033\035\027\036\026\001\001" +
    "\000\002\001\001\000\012\020\040\026\145\030\044\031" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\040\026\133\030\044\031\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\040\021\131\030\036\031\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\050\001\001\000\002\001\001\000\004\024\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\040\026\045\030\044\031\021" +
    "\001\001\000\004\037\063\001\001\000\002\001\001\000" +
    "\012\020\040\026\053\030\044\031\021\001\001\000\004" +
    "\032\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\055\040\060" +
    "\001\001\000\002\001\001\000\012\020\040\026\062\030" +
    "\044\031\021\001\001\000\012\020\040\026\061\030\044" +
    "\031\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\020\040\030\072\031\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\073\040\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\040\030\076\031\021\001\001\000\002" +
    "\001\001\000\010\020\040\030\100\031\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\040\030\117\031\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\022\120\024\121\001\001\000\002\001\001\000" +
    "\010\020\040\030\122\031\021\001\001\000\012\022\123" +
    "\023\124\024\121\040\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\040\030\127" +
    "\031\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\135\001\001\000\002\001\001\000\004\025\137\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\013\205\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\161\016\157" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\161\016\171\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\174\001\001\000" +
    "\002\001\001\000\030\005\176\011\016\015\030\020\040" +
    "\021\035\025\017\030\036\031\021\034\033\035\027\036" +
    "\026\001\001\000\004\017\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\020\040\030\202\031\021\001" +
    "\001\000\002\001\001\000\004\012\204\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\161\016\211\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\005\214\011\016\015\030\020" +
    "\040\021\035\025\017\030\036\031\021\034\033\035\027" +
    "\036\026\001\001\000\002\001\001\000\004\013\216\001" +
    "\001\000\002\001\001\000\004\011\225\001\001\000\002" +
    "\001\001\000\004\007\224\001\001\000\004\010\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\230\001\001\000\002\001" +
    "\001\000\004\006\234\001\001\000\004\010\233\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		 System.out.println("Correcto!"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= declarar_datos declarar_funciones declarar_procedimientos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarar_datos ::= VAR variables declarar_datos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarar_datos ::= CONST constantes declarar_datos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= IDENTIFICADOR OPERADOR_DOS_PUNTOS tipos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // variables ::= IDENTIFICADOR OPERADOR_COMA variables 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constantes ::= IDENTIFICADOR OPERADOR_DOS_PUNTOS tipos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constantes ::= IDENTIFICADOR OPERADOR_COMA constantes 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declarar_datos_ ::= declarar_funciones declarar_datos_ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos_",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declarar_datos_ ::= declarar_procedimientos declarar_datos_ 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos_",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos BEGIN cuerpo retorno_funcion END declarar_funciones 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR BEGIN cuerpo END declarar_procedimientos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // parametros_entrada ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_entrada ::= tipos IDENTIFICADOR OPERADOR_COMA parametros_entrada 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // asignar_valores ::= IDENTIFICADOR OPERADOR_ASIGNACION valores OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= declarar_datos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= asignar_valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo ::= expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // cuerpo ::= sentencia_repeat 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // sentencia_if ::= IF expr_booleanas THEN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // sentencia_if ::= IF expr_booleanas THEN sentencia_else 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // sentencia_else ::= ELSE END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // sentencia_else ::= ELSE sentencia_if END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // sentencia_while ::= WHILE expr_booleanas DO BEGIN END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sentencia_repeat ::= REPEAT UNTIL expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_repeat",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION valores TO valores DO BEGIN END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr_aritmeticas ::= valores operadores_aritmeticos valores _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // _expr_aritmeticas ::= operadores_aritmeticos valores __expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // __expr_aritmeticas ::= _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__expr_aritmeticas",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // __expr_aritmeticas ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__expr_aritmeticas",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr_booleanas ::= valores operadores_booleanos valores _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _expr_booleanas ::= AND expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _expr_booleanas ::= OR expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _expr_booleanas ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // operadores_aritmeticos ::= MOD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // operadores_aritmeticos ::= DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // operadores_booleanos ::= OPERADOR_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // valores ::= _valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // valores ::= LITERAL_NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // valores ::= LITERAL_NUM_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // valores ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // valores ::= boolean 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _valores ::= IDENTIFICADOR __valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_valores",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // __valores ::= OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__valores",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // __valores ::= OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__valores",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // boolean ::= NOT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // boolean ::= NOT TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // boolean ::= NOT FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipos ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipos ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipos ::= LONGINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipos ::= REAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // tipos ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // tipos ::= CHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
