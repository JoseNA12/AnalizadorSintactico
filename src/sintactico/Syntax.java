
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import lexico.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\222\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\007\000\002\003\004\000\002\004\004" +
    "\000\002\004\003\000\002\017\004\000\002\013\004\000" +
    "\002\013\003\000\002\066\002\000\002\013\007\000\002" +
    "\014\007\000\002\015\003\000\002\015\003\000\002\007" +
    "\004\000\002\007\003\000\002\067\002\000\002\007\007" +
    "\000\002\010\010\000\002\011\005\000\002\011\003\000" +
    "\002\012\003\000\002\012\003\000\002\020\004\000\002" +
    "\020\004\000\002\020\003\000\002\070\002\000\002\020" +
    "\007\000\002\071\002\000\002\020\007\000\002\022\016" +
    "\000\002\022\015\000\002\023\013\000\002\023\012\000" +
    "\002\031\006\000\002\031\002\000\002\026\003\000\002" +
    "\026\003\000\002\027\005\000\002\030\004\000\002\030" +
    "\003\000\002\005\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\006\003\000" +
    "\002\006\003\000\002\021\003\000\002\021\004\000\002" +
    "\021\003\000\002\021\004\000\002\072\002\000\002\021" +
    "\005\000\002\024\006\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\006\000\002\025\006\000" +
    "\002\043\006\000\002\041\005\000\002\041\003\000\002" +
    "\041\003\000\002\042\005\000\002\042\003\000\002\044" +
    "\003\000\002\044\003\000\002\045\007\000\002\073\002" +
    "\000\002\045\006\000\002\046\003\000\002\046\003\000" +
    "\002\047\010\000\002\074\002\000\002\047\006\000\002" +
    "\050\005\000\002\050\003\000\002\040\003\000\002\040" +
    "\003\000\002\040\003\000\002\051\010\000\002\075\002" +
    "\000\002\051\006\000\002\052\003\000\002\052\003\000" +
    "\002\054\004\000\002\060\010\000\002\076\002\000\002" +
    "\060\006\000\002\061\014\000\002\077\002\000\002\061" +
    "\006\000\002\032\004\000\002\032\004\000\002\032\006" +
    "\000\002\033\004\000\002\033\003\000\002\053\004\000" +
    "\002\053\006\000\002\053\006\000\002\057\004\000\002" +
    "\057\004\000\002\057\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\003\000\002" +
    "\037\003\000\002\037\003\000\002\037\003\000\002\037" +
    "\003\000\002\062\003\000\002\062\003\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\063\003\000" +
    "\002\063\003\000\002\055\003\000\002\055\003\000\002" +
    "\056\003\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\064\003\000\002\064\003\000\002\064\004" +
    "\000\002\064\004\000\002\064\004\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\065" +
    "\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\u010c\001\002\000\006\003\007\046\010" +
    "\001\002\000\004\002\ufffd\001\002\000\016\003\012\054" +
    "\uff70\056\011\057\uff70\060\uff70\061\uff70\001\002\000\006" +
    "\003\u0101\046\u0102\001\002\000\004\054\ufffb\001\002\000" +
    "\012\054\uff70\057\354\060\uff70\061\uff70\001\002\000\010" +
    "\054\uff70\060\267\061\264\001\002\000\012\054\ufff8\057" +
    "\ufff8\060\ufff8\061\ufff8\001\002\000\004\054\017\001\002" +
    "\000\030\002\uff70\003\040\005\027\006\032\046\042\055" +
    "\uff70\062\021\063\030\064\026\067\023\072\045\001\002" +
    "\000\032\002\uffd5\003\uffd5\005\uffd5\006\uffd5\046\uffd5\055" +
    "\uffd5\062\uffd5\063\uffd5\064\uffd5\066\uffd5\067\uffd5\072\uffd5" +
    "\001\002\000\006\003\252\017\253\001\002\000\032\002" +
    "\uffd2\003\251\005\027\006\032\046\042\055\uffd2\062\021" +
    "\063\030\064\026\066\uffd2\067\023\072\045\001\002\000" +
    "\024\003\240\017\175\043\062\046\064\047\063\050\056" +
    "\051\055\075\054\076\057\001\002\000\032\002\uffb2\003" +
    "\uffb2\005\uffb2\006\uffb2\046\uffb2\055\uffb2\062\uffb2\063\uffb2" +
    "\064\uffb2\066\uffb2\067\uffb2\072\uffb2\001\002\000\004\037" +
    "\236\001\002\000\024\003\176\017\175\043\062\046\064" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\006\037\uff8f\046\uff8f\001\002\000\006\003\160\017\161" +
    "\001\002\000\032\002\uffd4\003\uffd4\005\uffd4\006\uffd4\046" +
    "\uffd4\055\uffd4\062\uffd4\063\uffd4\064\uffd4\066\uffd4\067\uffd4" +
    "\072\uffd4\001\002\000\006\037\uff8e\046\uff8e\001\002\000" +
    "\032\002\uffce\003\uffce\005\uffce\006\uffce\046\uffce\055\uffce" +
    "\062\uffce\063\uffce\064\uffce\066\uffce\067\uffce\072\uffce\001" +
    "\002\000\006\002\ufffe\055\157\001\002\000\032\002\uffb0" +
    "\003\uffb0\005\uffb0\006\uffb0\046\uffb0\055\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\066\uffb0\067\uffb0\072\uffb0\001\002\000\004" +
    "\046\156\001\002\000\032\002\uffbe\003\uffbe\005\uffbe\006" +
    "\uffbe\046\uffbe\055\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe" +
    "\067\uffbe\072\uffbe\001\002\000\034\002\uffd3\003\uffd3\005" +
    "\uffd3\006\uffd3\037\uffcc\046\uffd3\055\uffd3\062\uffd3\063\uffd3" +
    "\064\uffd3\066\uffd3\067\uffd3\072\uffd3\001\002\000\032\002" +
    "\uffb1\003\uffb1\005\uffb1\006\uffb1\046\uffb1\055\uffb1\062\uffb1" +
    "\063\uffb1\064\uffb1\066\uffb1\067\uffb1\072\uffb1\001\002\000" +
    "\022\005\027\006\032\017\105\023\103\026\107\027\101" +
    "\030\110\031\106\001\002\000\004\037\100\001\002\000" +
    "\032\002\uffd0\003\uffd0\005\uffd0\006\uffd0\046\uffd0\055\uffd0" +
    "\062\uffd0\063\uffd0\064\uffd0\066\uffd0\067\uffd0\072\uffd0\001" +
    "\002\000\006\003\050\046\051\001\002\000\010\002\uffd1" +
    "\055\uffd1\066\uffd1\001\002\000\032\002\uffbd\003\uffbd\005" +
    "\uffbd\006\uffbd\046\uffbd\055\uffbd\062\uffbd\063\uffbd\064\uffbd" +
    "\066\uffbd\067\uffbd\072\uffbd\001\002\000\004\055\uffa5\001" +
    "\002\000\004\023\052\001\002\000\020\043\062\046\064" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\052\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82" +
    "\015\uff82\016\uff82\020\uff82\024\uff82\025\uff82\036\uff82\037" +
    "\uff82\041\uff82\042\uff82\044\uff82\045\uff82\065\uff82\073\uff82" +
    "\074\uff82\001\002\000\052\007\uff7c\010\uff7c\011\uff7c\012" +
    "\uff7c\013\uff7c\014\uff7c\015\uff7c\016\uff7c\020\uff7c\024\uff7c" +
    "\025\uff7c\036\uff7c\037\uff7c\041\uff7c\042\uff7c\044\uff7c\045" +
    "\uff7c\065\uff7c\073\uff7c\074\uff7c\001\002\000\052\007\uff7f" +
    "\010\uff7f\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016" +
    "\uff7f\020\uff7f\024\uff7f\025\uff7f\036\uff7f\037\uff7f\041\uff7f" +
    "\042\uff7f\044\uff7f\045\uff7f\065\uff7f\073\uff7f\074\uff7f\001" +
    "\002\000\052\007\uff7d\010\uff7d\011\uff7d\012\uff7d\013\uff7d" +
    "\014\uff7d\015\uff7d\016\uff7d\020\uff7d\024\uff7d\025\uff7d\036" +
    "\uff7d\037\uff7d\041\uff7d\042\uff7d\044\uff7d\045\uff7d\065\uff7d" +
    "\073\uff7d\074\uff7d\001\002\000\052\007\uff7b\010\uff7b\011" +
    "\uff7b\012\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\020\uff7b" +
    "\024\uff7b\025\uff7b\036\uff7b\037\uff7b\041\uff7b\042\uff7b\044" +
    "\uff7b\045\uff7b\065\uff7b\073\uff7b\074\uff7b\001\002\000\004" +
    "\073\070\001\002\000\036\013\uff81\014\uff81\015\uff81\016" +
    "\uff81\020\uff81\036\uff81\037\uff81\041\uff81\042\uff81\044\uff81" +
    "\045\uff81\065\uff81\073\uff81\074\uff81\001\002\000\010\046" +
    "\065\075\066\076\067\001\002\000\052\007\uff7e\010\uff7e" +
    "\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e\020" +
    "\uff7e\024\uff7e\025\uff7e\036\uff7e\037\uff7e\041\uff7e\042\uff7e" +
    "\044\uff7e\045\uff7e\065\uff7e\073\uff7e\074\uff7e\001\002\000" +
    "\036\007\uff80\010\uff80\011\uff80\012\uff80\020\uff80\024\uff80" +
    "\025\uff80\036\uff80\037\uff80\041\uff80\042\uff80\065\uff80\073" +
    "\uff80\074\uff80\001\002\000\052\007\uff7a\010\uff7a\011\uff7a" +
    "\012\uff7a\013\uff7a\014\uff7a\015\uff7a\016\uff7a\020\uff7a\024" +
    "\uff7a\025\uff7a\036\uff7a\037\uff7a\041\uff7a\042\uff7a\044\uff7a" +
    "\045\uff7a\065\uff7a\073\uff7a\074\uff7a\001\002\000\052\007" +
    "\uff79\010\uff79\011\uff79\012\uff79\013\uff79\014\uff79\015\uff79" +
    "\016\uff79\020\uff79\024\uff79\025\uff79\036\uff79\037\uff79\041" +
    "\uff79\042\uff79\044\uff79\045\uff79\065\uff79\073\uff79\074\uff79" +
    "\001\002\000\052\007\uff78\010\uff78\011\uff78\012\uff78\013" +
    "\uff78\014\uff78\015\uff78\016\uff78\020\uff78\024\uff78\025\uff78" +
    "\036\uff78\037\uff78\041\uff78\042\uff78\044\uff78\045\uff78\065" +
    "\uff78\073\uff78\074\uff78\001\002\000\020\043\062\046\064" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\004\074\072\001\002\000\004\054\073\001\002\000\026" +
    "\003\040\005\027\006\032\046\042\055\uff70\062\021\063" +
    "\030\064\026\067\023\072\045\001\002\000\004\055\075" +
    "\001\002\000\032\002\uffa6\003\uffa6\005\uffa6\006\uffa6\046" +
    "\uffa6\055\uffa6\062\uffa6\063\uffa6\064\uffa6\066\uffa6\067\uffa6" +
    "\072\uffa6\001\002\000\004\055\077\001\002\000\032\002" +
    "\uffa4\003\uffa4\005\uffa4\006\uffa4\046\uffa4\055\uffa4\062\uffa4" +
    "\063\uffa4\064\uffa4\066\uffa4\067\uffa4\072\uffa4\001\002\000" +
    "\032\002\uffcf\003\uffcf\005\uffcf\006\uffcf\046\uffcf\055\uffcf" +
    "\062\uffcf\063\uffcf\064\uffcf\066\uffcf\067\uffcf\072\uffcf\001" +
    "\002\000\022\017\uff8c\043\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\075\uff8c\076\uff8c\001\002\000\004\037\uffc8\001" +
    "\002\000\026\005\027\006\032\017\113\043\062\046\150" +
    "\047\063\050\056\051\055\075\054\076\057\001\002\000" +
    "\022\017\113\043\062\046\117\047\063\050\056\051\055" +
    "\075\054\076\057\001\002\000\024\017\113\020\uff70\043" +
    "\062\046\117\047\063\050\056\051\055\075\054\076\057" +
    "\001\002\000\022\017\uff8a\043\uff8a\046\uff8a\047\uff8a\050" +
    "\uff8a\051\uff8a\075\uff8a\076\uff8a\001\002\000\022\017\uff8d" +
    "\043\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\075\uff8d\076" +
    "\uff8d\001\002\000\022\017\uff8b\043\uff8b\046\uff8b\047\uff8b" +
    "\050\uff8b\051\uff8b\075\uff8b\076\uff8b\001\002\000\004\020" +
    "\144\001\002\000\024\013\126\014\121\015\122\016\125" +
    "\020\uff70\036\uff70\037\uff70\044\123\045\124\001\002\000" +
    "\022\017\113\043\062\046\117\047\063\050\056\051\055" +
    "\075\054\076\057\001\002\000\006\020\uffc2\036\132\001" +
    "\002\000\024\013\126\014\121\015\122\016\125\020\uff70" +
    "\036\uff70\037\uff70\044\123\045\124\001\002\000\004\020" +
    "\uffc1\001\002\000\026\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\105\020\uff80\036\uff80\037\uff80\044\uff80\045\uff80\001" +
    "\002\000\010\020\uffa3\036\uffa3\037\uffa3\001\002\000\022" +
    "\017\uff94\043\uff94\046\uff94\047\uff94\050\uff94\051\uff94\075" +
    "\uff94\076\uff94\001\002\000\022\017\uff93\043\uff93\046\uff93" +
    "\047\uff93\050\uff93\051\uff93\075\uff93\076\uff93\001\002\000" +
    "\022\017\uff91\043\uff91\046\uff91\047\uff91\050\uff91\051\uff91" +
    "\075\uff91\076\uff91\001\002\000\022\017\uff90\043\uff90\046" +
    "\uff90\047\uff90\050\uff90\051\uff90\075\uff90\076\uff90\001\002" +
    "\000\022\017\uff92\043\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\075\uff92\076\uff92\001\002\000\022\017\uff95\043\uff95" +
    "\046\uff95\047\uff95\050\uff95\051\uff95\075\uff95\076\uff95\001" +
    "\002\000\010\020\uff9f\036\uff9f\037\uff9f\001\002\000\022" +
    "\017\113\043\062\046\117\047\063\050\056\051\055\075" +
    "\054\076\057\001\002\000\010\020\uffa0\036\uffa0\037\uffa0" +
    "\001\002\000\022\017\113\043\062\046\117\047\063\050" +
    "\056\051\055\075\054\076\057\001\002\000\004\036\136" +
    "\001\002\000\004\020\uffc3\001\002\000\022\013\126\014" +
    "\121\015\122\016\125\020\uffbf\036\uff70\044\123\045\124" +
    "\001\002\000\022\017\113\043\062\046\117\047\063\050" +
    "\056\051\055\075\054\076\057\001\002\000\004\020\uffc0" +
    "\001\002\000\004\020\141\001\002\000\024\013\126\014" +
    "\121\015\122\016\125\020\uff70\036\uff70\037\uff70\044\123" +
    "\045\124\001\002\000\010\020\uffa1\036\uffa1\037\uffa1\001" +
    "\002\000\010\020\uffa2\036\uffa2\037\uffa2\001\002\000\024" +
    "\013\uffc4\014\uffc4\015\uffc4\016\uffc4\020\uffc4\036\uffc4\037" +
    "\uffc4\044\uffc4\045\uffc4\001\002\000\004\037\uffc9\001\002" +
    "\000\004\046\153\001\002\000\004\037\152\001\002\000" +
    "\026\005\027\006\032\013\uff80\014\uff80\015\uff80\016\uff80" +
    "\017\105\037\uff80\044\uff80\045\uff80\001\002\000\004\037" +
    "\uffc6\001\002\000\032\002\uffca\003\uffca\005\uffca\006\uffca" +
    "\046\uffca\055\uffca\062\uffca\063\uffca\064\uffca\066\uffca\067" +
    "\uffca\072\uffca\001\002\000\004\037\uffc5\001\002\000\004" +
    "\037\155\001\002\000\032\002\uffcb\003\uffcb\005\uffcb\006" +
    "\uffcb\046\uffcb\055\uffcb\062\uffcb\063\uffcb\064\uffcb\066\uffcb" +
    "\067\uffcb\072\uffcb\001\002\000\004\037\uffc7\001\002\000" +
    "\004\002\uffff\001\002\000\004\037\uffb6\001\002\000\012" +
    "\046\064\047\063\050\056\051\055\001\002\000\006\020" +
    "\uff70\036\164\001\002\000\004\020\170\001\002\000\012" +
    "\046\064\047\063\050\056\051\055\001\002\000\004\020" +
    "\uffb3\001\002\000\006\020\uff70\036\164\001\002\000\004" +
    "\020\uffb4\001\002\000\004\037\171\001\002\000\032\002" +
    "\uffb7\003\uffb7\005\uffb7\006\uffb7\046\uffb7\055\uffb7\062\uffb7" +
    "\063\uffb7\064\uffb7\066\uffb7\067\uffb7\072\uffb7\001\002\000" +
    "\004\037\173\001\002\000\032\002\uffb5\003\uffb5\005\uffb5" +
    "\006\uffb5\046\uffb5\055\uffb5\062\uffb5\063\uffb5\064\uffb5\066" +
    "\uffb5\067\uffb5\072\uffb5\001\002\000\004\065\226\001\002" +
    "\000\022\017\175\043\062\046\064\047\063\050\056\051" +
    "\055\075\054\076\057\001\002\000\004\055\uffae\001\002" +
    "\000\016\007\214\010\211\011\215\012\212\024\213\025" +
    "\210\001\002\000\030\007\uff81\010\uff81\011\uff81\012\uff81" +
    "\020\uff70\024\uff81\025\uff81\041\203\042\202\065\uff70\074" +
    "\uff70\001\002\000\010\020\uff9e\065\uff9e\074\uff9e\001\002" +
    "\000\022\017\175\043\062\046\064\047\063\050\056\051" +
    "\055\075\054\076\057\001\002\000\022\017\175\043\062" +
    "\046\064\047\063\050\056\051\055\075\054\076\057\001" +
    "\002\000\010\020\uff99\065\uff99\074\uff99\001\002\000\010" +
    "\020\uff9a\065\uff9a\074\uff9a\001\002\000\010\020\uff9b\065" +
    "\uff9b\074\uff9b\001\002\000\020\043\uff84\046\uff84\047\uff84" +
    "\050\uff84\051\uff84\075\uff84\076\uff84\001\002\000\020\043" +
    "\uff85\046\uff85\047\uff85\050\uff85\051\uff85\075\uff85\076\uff85" +
    "\001\002\000\020\043\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\075\uff89\076\uff89\001\002\000\020\043\uff87\046\uff87" +
    "\047\uff87\050\uff87\051\uff87\075\uff87\076\uff87\001\002\000" +
    "\020\043\uff83\046\uff83\047\uff83\050\uff83\051\uff83\075\uff83" +
    "\076\uff83\001\002\000\020\043\uff88\046\uff88\047\uff88\050" +
    "\uff88\051\uff88\075\uff88\076\uff88\001\002\000\020\043\uff86" +
    "\046\uff86\047\uff86\050\uff86\051\uff86\075\uff86\076\uff86\001" +
    "\002\000\020\043\062\046\064\047\063\050\056\051\055" +
    "\075\054\076\057\001\002\000\014\020\uff70\041\203\042" +
    "\202\065\uff70\074\uff70\001\002\000\010\020\uff9d\065\uff9d" +
    "\074\uff9d\001\002\000\004\055\222\001\002\000\032\002" +
    "\uffad\003\uffad\005\uffad\006\uffad\046\uffad\055\uffad\062\uffad" +
    "\063\uffad\064\uffad\066\uffad\067\uffad\072\uffad\001\002\000" +
    "\004\020\224\001\002\000\014\020\uff70\041\203\042\202" +
    "\065\uff70\074\uff70\001\002\000\010\020\uff9c\065\uff9c\074" +
    "\uff9c\001\002\000\030\003\040\005\027\006\032\046\042" +
    "\055\uff70\062\021\063\030\064\026\066\uff70\067\023\072" +
    "\045\001\002\000\006\055\uff70\066\230\001\002\000\026" +
    "\003\040\005\027\006\032\046\042\055\uff70\062\021\063" +
    "\030\064\026\067\023\072\045\001\002\000\004\055\uffac" +
    "\001\002\000\004\055\234\001\002\000\004\055\uffab\001" +
    "\002\000\032\002\uffaf\003\uffaf\005\uffaf\006\uffaf\046\uffaf" +
    "\055\uffaf\062\uffaf\063\uffaf\064\uffaf\066\uffaf\067\uffaf\072" +
    "\uffaf\001\002\000\004\055\uffaa\001\002\000\032\002\uffcd" +
    "\003\uffcd\005\uffcd\006\uffcd\046\uffcd\055\uffcd\062\uffcd\063" +
    "\uffcd\064\uffcd\066\uffcd\067\uffcd\072\uffcd\001\002\000\004" +
    "\074\243\001\002\000\004\055\uffa8\001\002\000\004\055" +
    "\242\001\002\000\032\002\uffa7\003\uffa7\005\uffa7\006\uffa7" +
    "\046\uffa7\055\uffa7\062\uffa7\063\uffa7\064\uffa7\066\uffa7\067" +
    "\uffa7\072\uffa7\001\002\000\004\054\244\001\002\000\026" +
    "\003\040\005\027\006\032\046\042\055\uff70\062\021\063" +
    "\030\064\026\067\023\072\045\001\002\000\004\055\246" +
    "\001\002\000\032\002\uffa9\003\uffa9\005\uffa9\006\uffa9\046" +
    "\uffa9\055\uffa9\062\uffa9\063\uffa9\064\uffa9\066\uffa9\067\uffa9" +
    "\072\uffa9\001\002\000\032\002\uffd7\003\uffd7\005\uffd7\006" +
    "\uffd7\046\uffd7\055\uffd7\062\uffd7\063\uffd7\064\uffd7\066\uffd7" +
    "\067\uffd7\072\uffd7\001\002\000\032\002\uffd6\003\uffd6\005" +
    "\uffd6\006\uffd6\046\uffd6\055\uffd6\062\uffd6\063\uffd6\064\uffd6" +
    "\066\uffd6\067\uffd6\072\uffd6\001\002\000\004\037\uffcc\001" +
    "\002\000\004\037\uffbb\001\002\000\006\020\uff70\046\254" +
    "\001\002\000\004\020\uffb9\001\002\000\004\020\257\001" +
    "\002\000\004\020\uffb8\001\002\000\004\037\260\001\002" +
    "\000\032\002\uffbc\003\uffbc\005\uffbc\006\uffbc\046\uffbc\055" +
    "\uffbc\062\uffbc\063\uffbc\064\uffbc\066\uffbc\067\uffbc\072\uffbc" +
    "\001\002\000\004\037\262\001\002\000\032\002\uffba\003" +
    "\uffba\005\uffba\006\uffba\046\uffba\055\uffba\062\uffba\063\uffba" +
    "\064\uffba\066\uffba\067\uffba\072\uffba\001\002\000\010\054" +
    "\uff70\060\267\061\264\001\002\000\006\003\336\046\337" +
    "\001\002\000\010\054\uff70\060\267\061\264\001\002\000" +
    "\004\054\ufffc\001\002\000\006\003\271\046\272\001\002" +
    "\000\004\054\uffe7\001\002\000\004\055\uffe6\001\002\000" +
    "\004\017\273\001\002\000\022\020\uff70\077\274\100\276" +
    "\101\302\102\306\103\303\104\300\105\304\001\002\000" +
    "\014\037\uff77\046\uff77\054\uff77\056\uff77\057\uff77\001\002" +
    "\000\004\020\314\001\002\000\014\037\uff75\046\uff75\054" +
    "\uff75\056\uff75\057\uff75\001\002\000\004\046\307\001\002" +
    "\000\014\037\uff71\046\uff71\054\uff71\056\uff71\057\uff71\001" +
    "\002\000\004\020\uffdc\001\002\000\014\037\uff76\046\uff76" +
    "\054\uff76\056\uff76\057\uff76\001\002\000\014\037\uff73\046" +
    "\uff73\054\uff73\056\uff73\057\uff73\001\002\000\014\037\uff74" +
    "\046\uff74\054\uff74\056\uff74\057\uff74\001\002\000\004\020" +
    "\uffdb\001\002\000\014\037\uff72\046\uff72\054\uff72\056\uff72" +
    "\057\uff72\001\002\000\006\020\uff70\036\310\001\002\000" +
    "\020\077\274\100\276\101\302\102\306\103\303\104\300" +
    "\105\304\001\002\000\004\020\uffda\001\002\000\004\020" +
    "\uffd8\001\002\000\004\020\uffd9\001\002\000\004\040\315" +
    "\001\002\000\020\077\274\100\276\101\302\102\306\103" +
    "\303\104\300\105\304\001\002\000\010\054\uff70\056\011" +
    "\057\uff70\001\002\000\004\054\320\001\002\000\026\003" +
    "\040\005\027\006\032\046\323\055\uffdd\062\021\063\030" +
    "\064\026\067\023\072\045\001\002\000\004\055\331\001" +
    "\002\000\024\003\251\005\027\006\032\046\042\062\021" +
    "\063\030\064\026\067\023\072\045\001\002\000\022\005" +
    "\027\006\032\017\105\023\324\026\107\027\101\030\110" +
    "\031\106\001\002\000\026\005\027\006\032\017\113\043" +
    "\062\046\150\047\063\050\056\051\055\075\054\076\057" +
    "\001\002\000\004\037\326\001\002\000\026\003\uffca\005" +
    "\uffca\006\uffca\046\uffca\055\uffde\062\uffca\063\uffca\064\uffca" +
    "\067\uffca\072\uffca\001\002\000\026\003\uffd0\005\uffd0\006" +
    "\uffd0\046\uffd0\055\330\062\uffd0\063\uffd0\064\uffd0\067\uffd0" +
    "\072\uffd0\001\002\000\010\054\uffe2\060\uffe2\061\uffe2\001" +
    "\002\000\010\054\uffe1\060\uffe1\061\uffe1\001\002\000\004" +
    "\055\333\001\002\000\010\054\uff70\060\267\061\264\001" +
    "\002\000\004\054\uffe5\001\002\000\004\054\uffe9\001\002" +
    "\000\004\055\uffe4\001\002\000\004\017\340\001\002\000" +
    "\022\020\uff70\077\274\100\276\101\302\102\306\103\303" +
    "\104\300\105\304\001\002\000\004\020\342\001\002\000" +
    "\010\054\uff70\056\011\057\uff70\001\002\000\004\054\344" +
    "\001\002\000\026\003\040\005\027\006\032\046\042\055" +
    "\346\062\021\063\030\064\026\067\023\072\045\001\002" +
    "\000\026\003\251\005\027\006\032\046\042\055\347\062" +
    "\021\063\030\064\026\067\023\072\045\001\002\000\010" +
    "\054\uffdf\060\uffdf\061\uffdf\001\002\000\010\054\uffe0\060" +
    "\uffe0\061\uffe0\001\002\000\004\055\351\001\002\000\010" +
    "\054\uff70\060\267\061\264\001\002\000\004\054\uffe3\001" +
    "\002\000\004\054\uffe8\001\002\000\006\003\360\046\361" +
    "\001\002\000\010\054\ufffa\060\ufffa\061\ufffa\001\002\000" +
    "\010\054\ufff1\060\ufff1\061\ufff1\001\002\000\010\054\ufff2" +
    "\060\ufff2\061\ufff2\001\002\000\004\037\ufff0\001\002\000" +
    "\006\036\363\040\uff70\001\002\000\004\040\367\001\002" +
    "\000\004\046\365\001\002\000\004\040\uffec\001\002\000" +
    "\006\036\363\040\uff70\001\002\000\004\040\uffed\001\002" +
    "\000\020\077\274\100\276\101\302\102\306\103\303\104" +
    "\300\105\304\001\002\000\004\037\371\001\002\000\012" +
    "\046\361\054\uff70\060\uff70\061\uff70\001\002\000\010\054" +
    "\uffeb\060\uffeb\061\uffeb\001\002\000\010\054\uffee\060\uffee" +
    "\061\uffee\001\002\000\010\054\uffea\060\uffea\061\uffea\001" +
    "\002\000\004\037\376\001\002\000\012\046\361\054\uff70" +
    "\060\uff70\061\uff70\001\002\000\010\054\uffef\060\uffef\061" +
    "\uffef\001\002\000\012\054\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\001\002\000\004\037\ufff7\001\002\000\004\024\u0103\001" +
    "\002\000\020\043\062\046\064\047\063\050\056\051\055" +
    "\075\054\076\057\001\002\000\004\037\u0105\001\002\000" +
    "\014\046\u0102\054\uff70\057\uff70\060\uff70\061\uff70\001\002" +
    "\000\012\054\ufff4\057\ufff4\060\ufff4\061\ufff4\001\002\000" +
    "\012\054\ufff5\057\ufff5\060\ufff5\061\ufff5\001\002\000\012" +
    "\054\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000\004\037" +
    "\u010a\001\002\000\014\046\u0102\054\uff70\057\uff70\060\uff70" +
    "\061\uff70\001\002\000\012\054\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u010a\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\015\013\012\017\013\065\014\001\001\000" +
    "\004\014\377\001\001\000\002\001\001\000\006\007\354" +
    "\065\355\001\001\000\012\020\265\022\264\023\262\065" +
    "\267\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\021\006\033\021\017\024\043\025\042\036\035\040" +
    "\030\043\024\044\032\045\036\047\046\051\023\060\040" +
    "\061\034\065\045\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\021\246\024\043\025\042\036\035\040\247" +
    "\043\024\044\032\045\036\047\046\051\023\060\040\061" +
    "\034\001\001\000\012\053\236\055\176\056\052\064\177" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\053" +
    "\173\055\176\056\052\064\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\153\001\001\000" +
    "\002\001\001\000\006\036\101\037\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\077\075\001\001\000\002" +
    "\001\001\000\010\055\057\056\052\064\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\055\070\056\052\064\060\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\005\021\006\073\021\017\024" +
    "\043\025\042\036\035\040\030\043\024\044\032\045\036" +
    "\047\046\051\023\060\040\061\034\065\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\032\146\036\145\043\111\055\114\056\052" +
    "\064\060\001\001\000\014\032\144\043\111\055\114\056" +
    "\052\064\060\001\001\000\020\032\113\041\110\043\111" +
    "\055\114\056\052\064\060\065\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\033\142\035\127\065\126\001\001\000\014\032" +
    "\137\043\111\055\114\056\052\064\060\001\001\000\002" +
    "\001\001\000\010\033\117\035\127\065\126\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\032\130\043\111\055\114\056\052\064\060\001" +
    "\001\000\002\001\001\000\016\032\132\042\133\043\111" +
    "\055\134\056\052\064\060\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\033\117\035\127\065\126\001\001" +
    "\000\016\032\132\042\136\043\111\055\134\056\052\064" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\141\035\127\065\126\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\074\171\001\001\000\004\056\161\001\001" +
    "\000\006\050\162\065\164\001\001\000\002\001\001\000" +
    "\004\056\165\001\001\000\002\001\001\000\006\050\166" +
    "\065\164\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\053\222\055\176\056\052\064\177\001" +
    "\001\000\004\075\220\001\001\000\006\062\206\063\215" +
    "\001\001\000\006\057\200\065\203\001\001\000\002\001" +
    "\001\000\012\053\205\055\176\056\052\064\177\001\001" +
    "\000\012\053\204\055\176\056\052\064\177\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\055\216\056\052\064\060\001\001\000\006\057" +
    "\217\065\203\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\057\224\065" +
    "\203\001\001\000\002\001\001\000\040\005\021\006\226" +
    "\021\017\024\043\025\042\036\035\040\030\043\024\044" +
    "\032\045\036\047\046\051\023\060\040\061\034\065\045" +
    "\001\001\000\010\052\231\054\230\065\232\001\001\000" +
    "\040\005\021\006\234\021\017\024\043\025\042\036\035" +
    "\040\030\043\024\044\032\045\036\047\046\051\023\060" +
    "\040\061\034\065\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\076\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\005\021\006\244\021\017\024\043\025\042" +
    "\036\035\040\030\043\024\044\032\045\036\047\046\051" +
    "\023\060\040\061\034\065\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\072\153\001\001\000\004\073\260\001\001\000\006" +
    "\046\254\065\255\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\352\022" +
    "\264\023\262\065\267\001\001\000\002\001\001\000\012" +
    "\020\334\022\264\023\262\065\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\070\331" +
    "\001\001\000\002\001\001\000\012\016\276\026\274\027" +
    "\300\065\304\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\310\065\311\001\001\000\006\016\276\027\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\315\001\001\000\010\013\012" +
    "\017\316\065\014\001\001\000\002\001\001\000\036\005" +
    "\321\021\017\024\043\025\042\031\320\036\035\040\030" +
    "\043\024\044\032\045\036\047\046\051\023\060\040\061" +
    "\034\001\001\000\002\001\001\000\032\021\246\024\326" +
    "\025\042\036\035\040\247\043\024\044\032\045\036\047" +
    "\046\051\023\060\040\061\034\001\001\000\006\036\101" +
    "\037\103\001\001\000\016\032\324\036\145\043\111\055" +
    "\114\056\052\064\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\333\022\264\023\262" +
    "\065\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\347\001\001\000\002\001\001\000\012\016\276" +
    "\026\340\027\300\065\304\001\001\000\002\001\001\000" +
    "\010\013\012\017\342\065\014\001\001\000\002\001\001" +
    "\000\034\005\344\021\017\024\043\025\042\036\035\040" +
    "\030\043\024\044\032\045\036\047\046\051\023\060\040" +
    "\061\034\001\001\000\032\021\246\024\043\025\042\036" +
    "\035\040\247\043\024\044\032\045\036\047\046\051\023" +
    "\060\040\061\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\351\022\264\023\262" +
    "\065\267\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\356\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\374\001\001\000\006\011" +
    "\361\065\363\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\365\065\363\001\001\000" +
    "\002\001\001\000\004\016\367\001\001\000\002\001\001" +
    "\000\010\010\371\012\372\065\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\371\012\376\065\373\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\u0108\001\001\000\002" +
    "\001\001\000\010\055\u0103\056\052\064\060\001\001\000" +
    "\002\001\001\000\010\014\u0105\015\u0106\065\u0107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\u0105\015\u010a\065\u0107\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    protected int error_sync_size(){
        return 1;
    }

    private Symbol tokenError;

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;
            tokenError = s;

            //System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;

            String mensaje = "Error sintáctico irrecuperable, con el símbolo: " + lexema;
            ErrorUI(mensaje, lexema, fila, columna);

            //System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String message, Object info)
    {
        if (info instanceof String){
            System.out.println(message);
        }
        else {
            if (info instanceof Symbol){
                String m = "Error sintático en: " + message;
                Symbol s = (Symbol)info;
                m += ", con el símbolo: \"" + s.value.toString() + "\"";
                ErrorUI(m, s.value.toString(), (s.left+1), s.right);
            }else{
                System.err.println(message);
            }
        }
    }

    public void ErrorUI(String pMsg, String token, int linea, int columna)
    {
        String msg = pMsg + ". En la línea: " + (linea) + ", columna: " + (columna) + ".";

        Main.miInstancia.agregarErrorSintactico(msg);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN _cuerpo 
            {
              Symbol RESULT =null;
		
                    Symbol tokenAct = (Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1);
                    report_error("PROGRAM sin cierre END", tokenAct);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // programa ::= PROGRAM error 
            {
              Symbol RESULT =null;
		
                    report_error("PROGRAM", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= declarar_datos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= error 
            {
              Symbol RESULT =null;
		
                    report_error("Declaraciones globales", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarar_datos ::= constantes variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // constantes ::= CONST _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Symbol RESULT =null;

                    report_error("Declaración de constante", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constantes ::= CONST error NT$0 OPERADOR_PUNTO_Y_COMA __constantes 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // _constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION_2 tokens OPERADOR_PUNTO_Y_COMA __constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // __constantes ::= _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // __constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= VAR _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Symbol RESULT =null;

                    report_error("Declaración de variable", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$1",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // variables ::= VAR error NT$1 OPERADOR_PUNTO_Y_COMA ___variables 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _variables ::= IDENTIFICADOR __variables OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA ___variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_variables",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // __variables ::= OPERADOR_COMA IDENTIFICADOR __variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // __variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ___variables ::= _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ___variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarar_func_proc ::= declarar_funciones declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarar_func_proc ::= declarar_procedimientos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarar_func_proc ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Symbol RESULT =null;

                             report_error("Declaración de función", tokenError);
                             RESULT = new Symbol(-1);
                         
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$2",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarar_func_proc ::= FUNCTION error NT$2 END declarar_func_proc 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$3 ::= 
            {
              Symbol RESULT =null;

                              report_error("Declaración de procedimiento", tokenError);
                              RESULT = new Symbol(-1);
                          
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$3",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declarar_func_proc ::= PROCEDURE error NT$3 END declarar_func_proc 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos BEGIN cuerpo asignar_valores_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos BEGIN retorno_funcion END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos BEGIN cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos BEGIN END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // retorno_funcion ::= 
            {
              Symbol RESULT =null;
		  //es aceptado pero se reporta como error
                        Symbol tokenAct = (Symbol)CUP$Syntax$stack.peek();
                        report_error("Retorno de función", tokenAct);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parametros_entrada ::= _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _parametros_entrada ::= tipos IDENTIFICADOR __parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_entrada",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // __parametros_entrada ::= OPERADOR_COMA _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // __parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= cuerpo instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= cuerpo estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // cuerpo ::= instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // cuerpo ::= estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // cuerpo ::= error 
            {
              Symbol RESULT =null;
		
                report_error("Cuerpo", tokenError);
                RESULT = new Symbol(-1);
            
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // _cuerpo ::= cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // _cuerpo ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instrucciones ::= asignar_valores_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // instrucciones ::= asignar_valores_2 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instrucciones ::= expr_read_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // instrucciones ::= llamar_func_o_proc OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$4 ::= 
            {
              Symbol RESULT =null;

                         report_error("Expresión", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$4",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // instrucciones ::= error NT$4 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignar_valores_1 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_1",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignar_valores_2 ::= IDENTIFICADOR ___operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignar_valores_2 ::= IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignar_valores_2 ::= __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // parametros_llamada_func ::= expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // parametros_llamada_func ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // _parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_read_write ::= expr_read 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_read_write ::= expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_read ::= READ OPERADOR_PARENTESIS_ABRIR _expr_read OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // NT$5 ::= 
            {
              Symbol RESULT =null;

                        report_error("Función READ", tokenError);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$5",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_read ::= READ error NT$5 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _expr_read ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _expr_read ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_write ::= WRITE OPERADOR_PARENTESIS_ABRIR _tokens _expr_write OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // NT$6 ::= 
            {
              Symbol RESULT =null;

                        report_error("Función WRITE", tokenError);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$6",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_write ::= WRITE error NT$6 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _expr_write ::= OPERADOR_COMA _tokens _expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _expr_write ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // estruc_de_control ::= sentencia_if 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // estruc_de_control ::= sentencia_while 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // estruc_de_control ::= sentencia_for 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // sentencia_if ::= IF expr_booleanas THEN _cuerpo _sentencia_if END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$7 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia IF", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$7",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_if ::= IF error NT$7 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // _sentencia_if ::= sentencia_else 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _sentencia_if ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia_else ::= ELSE _cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_while ::= WHILE expr_booleanas DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$8 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia WHILE", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$8",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_while ::= WHILE error NT$8 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION_1 tokens TO tokens DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NT$9 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia FOR", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$9",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // sentencia_for ::= FOR error NT$9 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr_aritmeticas ::= tokens _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr_aritmeticas ::= llamar_func_o_proc _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // _expr_aritmeticas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr_booleanas ::= tokens operadores_booleanos_1 tokens _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // _expr_booleanas ::= AND expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // _expr_booleanas ::= OR expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // _expr_booleanas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // _operadores_aritmeticos ::= MOD 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // _operadores_aritmeticos ::= DIV 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // operadores_booleanos_1 ::= operadores_booleanos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // operadores_booleanos_1 ::= OPERADOR_ASIGNACION_2 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // tokens ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // tokens ::= tokens_boolean 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // _tokens ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // _tokens ::= LITERAL_STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tokens_boolean ::= TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tokens_boolean ::= FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tokens_boolean ::= NOT TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tokens_boolean ::= NOT FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipos ::= INT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipos ::= SHORTINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipos ::= LONGINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipos ::= REAL 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // tipos ::= STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // tipos ::= CHAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // tipos ::= BOOLEAN 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
