
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import lexico.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\174\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\004\000\002\017\004\000\002\013\004" +
    "\000\002\013\003\000\002\014\007\000\002\015\003\000" +
    "\002\015\003\000\002\007\004\000\002\007\003\000\002" +
    "\010\010\000\002\011\005\000\002\011\003\000\002\012" +
    "\003\000\002\012\003\000\002\020\004\000\002\020\004" +
    "\000\002\020\003\000\002\020\004\000\002\022\016\000" +
    "\002\022\015\000\002\023\013\000\002\023\012\000\002" +
    "\031\006\000\002\026\003\000\002\026\003\000\002\027" +
    "\005\000\002\030\004\000\002\030\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\006\003\000\002\006\003\000\002\021\003\000\002" +
    "\021\004\000\002\021\003\000\002\021\004\000\002\021" +
    "\004\000\002\024\006\000\002\025\005\000\002\025\004" +
    "\000\002\025\004\000\002\025\006\000\002\025\006\000" +
    "\002\043\006\000\002\041\005\000\002\041\003\000\002" +
    "\041\003\000\002\042\005\000\002\042\003\000\002\044" +
    "\003\000\002\044\003\000\002\045\005\000\002\046\003" +
    "\000\002\046\003\000\002\047\010\000\002\050\005\000" +
    "\002\050\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\004\000\002\051\010\000\002\052" +
    "\003\000\002\052\003\000\002\054\004\000\002\060\010" +
    "\000\002\061\014\000\002\032\004\000\002\032\004\000" +
    "\002\032\006\000\002\033\004\000\002\033\003\000\002" +
    "\053\004\000\002\053\006\000\002\053\006\000\002\057" +
    "\004\000\002\057\004\000\002\057\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\036\003\000\002\036" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\037\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\062\003\000\002" +
    "\063\003\000\002\063\003\000\002\055\003\000\002\055" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\056\003\000\002\064\003\000\002\064\003\000" +
    "\002\064\004\000\002\064\004\000\002\064\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\065\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\346\001\002\000\004\046\007\001\002" +
    "\000\016\003\uff86\054\uff86\056\010\057\uff86\060\uff86\061" +
    "\uff86\001\002\000\004\046\337\001\002\000\012\003\270" +
    "\054\uff86\060\273\061\267\001\002\000\014\003\uff86\054" +
    "\uff86\057\237\060\uff86\061\uff86\001\002\000\014\003\ufffb" +
    "\054\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002\000\004\054" +
    "\015\001\002\000\026\003\036\005\025\006\030\046\037" +
    "\055\uff86\062\017\063\026\064\024\067\021\072\043\001" +
    "\002\000\030\003\uffe0\005\uffe0\006\uffe0\046\uffe0\055\uffe0" +
    "\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0\072\uffe0\001" +
    "\002\000\014\037\uff86\046\061\047\060\050\053\051\052" +
    "\001\002\000\030\003\036\005\025\006\030\046\037\055" +
    "\uffde\062\017\063\026\064\024\066\uffde\067\021\072\043" +
    "\001\002\000\022\017\165\043\057\046\061\047\060\050" +
    "\053\051\052\075\051\076\054\001\002\000\030\003\uffc3" +
    "\005\uffc3\006\uffc3\046\uffc3\055\uffc3\062\uffc3\063\uffc3\064" +
    "\uffc3\066\uffc3\067\uffc3\072\uffc3\001\002\000\004\037\223" +
    "\001\002\000\022\017\165\043\057\046\061\047\060\050" +
    "\053\051\052\075\051\076\054\001\002\000\006\037\uffa5" +
    "\046\uffa5\001\002\000\004\017\153\001\002\000\030\003" +
    "\uffdf\005\uffdf\006\uffdf\046\uffdf\055\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\066\uffdf\067\uffdf\072\uffdf\001\002\000\006\037" +
    "\uffa4\046\uffa4\001\002\000\030\003\uffda\005\uffda\006\uffda" +
    "\046\uffda\055\uffda\062\uffda\063\uffda\064\uffda\066\uffda\067" +
    "\uffda\072\uffda\001\002\000\004\055\152\001\002\000\030" +
    "\003\uffc1\005\uffc1\006\uffc1\046\uffc1\055\uffc1\062\uffc1\063" +
    "\uffc1\064\uffc1\066\uffc1\067\uffc1\072\uffc1\001\002\000\030" +
    "\003\uffcb\005\uffcb\006\uffcb\046\uffcb\055\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\066\uffcb\067\uffcb\072\uffcb\001\002\000\004" +
    "\046\151\001\002\000\006\037\147\055\150\001\002\000" +
    "\022\005\025\006\030\017\100\023\076\026\102\027\074" +
    "\030\103\031\101\001\002\000\030\003\uffc2\005\uffc2\006" +
    "\uffc2\046\uffc2\055\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2" +
    "\067\uffc2\072\uffc2\001\002\000\004\037\073\001\002\000" +
    "\030\003\uffdc\005\uffdc\006\uffdc\046\uffdc\055\uffdc\062\uffdc" +
    "\063\uffdc\064\uffdc\066\uffdc\067\uffdc\072\uffdc\001\002\000" +
    "\004\046\046\001\002\000\006\055\uffdd\066\uffdd\001\002" +
    "\000\030\003\uffca\005\uffca\006\uffca\046\uffca\055\uffca\062" +
    "\uffca\063\uffca\064\uffca\066\uffca\067\uffca\072\uffca\001\002" +
    "\000\004\023\047\001\002\000\020\043\057\046\061\047" +
    "\060\050\053\051\052\075\051\076\054\001\002\000\052" +
    "\007\uff98\010\uff98\011\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\020\uff98\024\uff98\025\uff98\036\uff98\037\uff98" +
    "\041\uff98\042\uff98\044\uff98\045\uff98\065\uff98\073\uff98\074" +
    "\uff98\001\002\000\052\007\uff92\010\uff92\011\uff92\012\uff92" +
    "\013\uff92\014\uff92\015\uff92\016\uff92\020\uff92\024\uff92\025" +
    "\uff92\036\uff92\037\uff92\041\uff92\042\uff92\044\uff92\045\uff92" +
    "\065\uff92\073\uff92\074\uff92\001\002\000\052\007\uff95\010" +
    "\uff95\011\uff95\012\uff95\013\uff95\014\uff95\015\uff95\016\uff95" +
    "\020\uff95\024\uff95\025\uff95\036\uff95\037\uff95\041\uff95\042" +
    "\uff95\044\uff95\045\uff95\065\uff95\073\uff95\074\uff95\001\002" +
    "\000\052\007\uff93\010\uff93\011\uff93\012\uff93\013\uff93\014" +
    "\uff93\015\uff93\016\uff93\020\uff93\024\uff93\025\uff93\036\uff93" +
    "\037\uff93\041\uff93\042\uff93\044\uff93\045\uff93\065\uff93\073" +
    "\uff93\074\uff93\001\002\000\052\007\uff91\010\uff91\011\uff91" +
    "\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91\020\uff91\024" +
    "\uff91\025\uff91\036\uff91\037\uff91\041\uff91\042\uff91\044\uff91" +
    "\045\uff91\065\uff91\073\uff91\074\uff91\001\002\000\004\073" +
    "\065\001\002\000\036\013\uff97\014\uff97\015\uff97\016\uff97" +
    "\020\uff97\036\uff97\037\uff97\041\uff97\042\uff97\044\uff97\045" +
    "\uff97\065\uff97\073\uff97\074\uff97\001\002\000\010\046\062" +
    "\075\063\076\064\001\002\000\052\007\uff94\010\uff94\011" +
    "\uff94\012\uff94\013\uff94\014\uff94\015\uff94\016\uff94\020\uff94" +
    "\024\uff94\025\uff94\036\uff94\037\uff94\041\uff94\042\uff94\044" +
    "\uff94\045\uff94\065\uff94\073\uff94\074\uff94\001\002\000\036" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\020\uff96\024\uff96\025" +
    "\uff96\036\uff96\037\uff96\041\uff96\042\uff96\065\uff96\073\uff96" +
    "\074\uff96\001\002\000\052\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\013\uff90\014\uff90\015\uff90\016\uff90\020\uff90\024\uff90" +
    "\025\uff90\036\uff90\037\uff90\041\uff90\042\uff90\044\uff90\045" +
    "\uff90\065\uff90\073\uff90\074\uff90\001\002\000\052\007\uff8f" +
    "\010\uff8f\011\uff8f\012\uff8f\013\uff8f\014\uff8f\015\uff8f\016" +
    "\uff8f\020\uff8f\024\uff8f\025\uff8f\036\uff8f\037\uff8f\041\uff8f" +
    "\042\uff8f\044\uff8f\045\uff8f\065\uff8f\073\uff8f\074\uff8f\001" +
    "\002\000\052\007\uff8e\010\uff8e\011\uff8e\012\uff8e\013\uff8e" +
    "\014\uff8e\015\uff8e\016\uff8e\020\uff8e\024\uff8e\025\uff8e\036" +
    "\uff8e\037\uff8e\041\uff8e\042\uff8e\044\uff8e\045\uff8e\065\uff8e" +
    "\073\uff8e\074\uff8e\001\002\000\020\043\057\046\061\047" +
    "\060\050\053\051\052\075\051\076\054\001\002\000\004" +
    "\074\067\001\002\000\004\054\070\001\002\000\026\003" +
    "\036\005\025\006\030\046\037\055\uff86\062\017\063\026" +
    "\064\024\067\021\072\043\001\002\000\004\055\072\001" +
    "\002\000\030\003\uffba\005\uffba\006\uffba\046\uffba\055\uffba" +
    "\062\uffba\063\uffba\064\uffba\066\uffba\067\uffba\072\uffba\001" +
    "\002\000\030\003\uffdb\005\uffdb\006\uffdb\046\uffdb\055\uffdb" +
    "\062\uffdb\063\uffdb\064\uffdb\066\uffdb\067\uffdb\072\uffdb\001" +
    "\002\000\022\017\uffa2\043\uffa2\046\uffa2\047\uffa2\050\uffa2" +
    "\051\uffa2\075\uffa2\076\uffa2\001\002\000\004\037\uffd5\001" +
    "\002\000\026\005\025\006\030\017\106\043\057\046\143" +
    "\047\060\050\053\051\052\075\051\076\054\001\002\000" +
    "\022\017\106\043\057\046\112\047\060\050\053\051\052" +
    "\075\051\076\054\001\002\000\024\017\106\020\uff86\043" +
    "\057\046\112\047\060\050\053\051\052\075\051\076\054" +
    "\001\002\000\022\017\uffa0\043\uffa0\046\uffa0\047\uffa0\050" +
    "\uffa0\051\uffa0\075\uffa0\076\uffa0\001\002\000\022\017\uffa3" +
    "\043\uffa3\046\uffa3\047\uffa3\050\uffa3\051\uffa3\075\uffa3\076" +
    "\uffa3\001\002\000\022\017\uffa1\043\uffa1\046\uffa1\047\uffa1" +
    "\050\uffa1\051\uffa1\075\uffa1\076\uffa1\001\002\000\004\020" +
    "\137\001\002\000\024\013\121\014\114\015\115\016\120" +
    "\020\uff86\036\uff86\037\uff86\044\116\045\117\001\002\000" +
    "\022\017\106\043\057\046\112\047\060\050\053\051\052" +
    "\075\051\076\054\001\002\000\006\020\uffcf\036\125\001" +
    "\002\000\024\013\121\014\114\015\115\016\120\020\uff86" +
    "\036\uff86\037\uff86\044\116\045\117\001\002\000\004\020" +
    "\uffce\001\002\000\026\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\100\020\uff96\036\uff96\037\uff96\044\uff96\045\uff96\001" +
    "\002\000\010\020\uffb9\036\uffb9\037\uffb9\001\002\000\022" +
    "\017\uffaa\043\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\075" +
    "\uffaa\076\uffaa\001\002\000\022\017\uffa9\043\uffa9\046\uffa9" +
    "\047\uffa9\050\uffa9\051\uffa9\075\uffa9\076\uffa9\001\002\000" +
    "\022\017\uffa7\043\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\075\uffa7\076\uffa7\001\002\000\022\017\uffa6\043\uffa6\046" +
    "\uffa6\047\uffa6\050\uffa6\051\uffa6\075\uffa6\076\uffa6\001\002" +
    "\000\022\017\uffa8\043\uffa8\046\uffa8\047\uffa8\050\uffa8\051" +
    "\uffa8\075\uffa8\076\uffa8\001\002\000\022\017\uffab\043\uffab" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\075\uffab\076\uffab\001" +
    "\002\000\022\017\106\043\057\046\112\047\060\050\053" +
    "\051\052\075\051\076\054\001\002\000\010\020\uffb5\036" +
    "\uffb5\037\uffb5\001\002\000\010\020\uffb6\036\uffb6\037\uffb6" +
    "\001\002\000\022\017\106\043\057\046\112\047\060\050" +
    "\053\051\052\075\051\076\054\001\002\000\004\036\131" +
    "\001\002\000\004\020\uffd0\001\002\000\022\013\121\014" +
    "\114\015\115\016\120\020\uffcc\036\uff86\044\116\045\117" +
    "\001\002\000\022\017\106\043\057\046\112\047\060\050" +
    "\053\051\052\075\051\076\054\001\002\000\004\020\uffcd" +
    "\001\002\000\004\020\134\001\002\000\024\013\121\014" +
    "\114\015\115\016\120\020\uff86\036\uff86\037\uff86\044\116" +
    "\045\117\001\002\000\010\020\uffb7\036\uffb7\037\uffb7\001" +
    "\002\000\010\020\uffb8\036\uffb8\037\uffb8\001\002\000\024" +
    "\013\uffd1\014\uffd1\015\uffd1\016\uffd1\020\uffd1\036\uffd1\037" +
    "\uffd1\044\uffd1\045\uffd1\001\002\000\004\037\uffd6\001\002" +
    "\000\004\046\146\001\002\000\004\037\145\001\002\000" +
    "\026\005\025\006\030\013\uff96\014\uff96\015\uff96\016\uff96" +
    "\017\100\037\uff96\044\uff96\045\uff96\001\002\000\004\037" +
    "\uffd3\001\002\000\030\003\uffd7\005\uffd7\006\uffd7\046\uffd7" +
    "\055\uffd7\062\uffd7\063\uffd7\064\uffd7\066\uffd7\067\uffd7\072" +
    "\uffd7\001\002\000\004\037\uffd2\001\002\000\030\003\uffd8" +
    "\005\uffd8\006\uffd8\046\uffd8\055\uffd8\062\uffd8\063\uffd8\064" +
    "\uffd8\066\uffd8\067\uffd8\072\uffd8\001\002\000\030\003\uffc0" +
    "\005\uffc0\006\uffc0\046\uffc0\055\uffc0\062\uffc0\063\uffc0\064" +
    "\uffc0\066\uffc0\067\uffc0\072\uffc0\001\002\000\004\037\uffd4" +
    "\001\002\000\004\002\uffff\001\002\000\012\046\061\047" +
    "\060\050\053\051\052\001\002\000\006\020\uff86\036\156" +
    "\001\002\000\004\020\162\001\002\000\012\046\061\047" +
    "\060\050\053\051\052\001\002\000\004\020\uffc4\001\002" +
    "\000\006\020\uff86\036\156\001\002\000\004\020\uffc5\001" +
    "\002\000\004\037\163\001\002\000\030\003\uffc6\005\uffc6" +
    "\006\uffc6\046\uffc6\055\uffc6\062\uffc6\063\uffc6\064\uffc6\066" +
    "\uffc6\067\uffc6\072\uffc6\001\002\000\004\065\213\001\002" +
    "\000\022\017\165\043\057\046\061\047\060\050\053\051" +
    "\052\075\051\076\054\001\002\000\016\007\203\010\200" +
    "\011\204\012\201\024\202\025\177\001\002\000\030\007" +
    "\uff97\010\uff97\011\uff97\012\uff97\020\uff86\024\uff97\025\uff97" +
    "\041\172\042\171\065\uff86\074\uff86\001\002\000\010\020" +
    "\uffb4\065\uffb4\074\uffb4\001\002\000\022\017\165\043\057" +
    "\046\061\047\060\050\053\051\052\075\051\076\054\001" +
    "\002\000\022\017\165\043\057\046\061\047\060\050\053" +
    "\051\052\075\051\076\054\001\002\000\010\020\uffaf\065" +
    "\uffaf\074\uffaf\001\002\000\010\020\uffb0\065\uffb0\074\uffb0" +
    "\001\002\000\010\020\uffb1\065\uffb1\074\uffb1\001\002\000" +
    "\020\043\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a\075\uff9a" +
    "\076\uff9a\001\002\000\020\043\uff9b\046\uff9b\047\uff9b\050" +
    "\uff9b\051\uff9b\075\uff9b\076\uff9b\001\002\000\020\043\uff9f" +
    "\046\uff9f\047\uff9f\050\uff9f\051\uff9f\075\uff9f\076\uff9f\001" +
    "\002\000\020\043\uff9d\046\uff9d\047\uff9d\050\uff9d\051\uff9d" +
    "\075\uff9d\076\uff9d\001\002\000\020\043\uff99\046\uff99\047" +
    "\uff99\050\uff99\051\uff99\075\uff99\076\uff99\001\002\000\020" +
    "\043\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\075\uff9e\076" +
    "\uff9e\001\002\000\020\043\uff9c\046\uff9c\047\uff9c\050\uff9c" +
    "\051\uff9c\075\uff9c\076\uff9c\001\002\000\020\043\057\046" +
    "\061\047\060\050\053\051\052\075\051\076\054\001\002" +
    "\000\014\020\uff86\041\172\042\171\065\uff86\074\uff86\001" +
    "\002\000\010\020\uffb3\065\uffb3\074\uffb3\001\002\000\004" +
    "\020\211\001\002\000\014\020\uff86\041\172\042\171\065" +
    "\uff86\074\uff86\001\002\000\010\020\uffb2\065\uffb2\074\uffb2" +
    "\001\002\000\030\003\036\005\025\006\030\046\037\055" +
    "\uff86\062\017\063\026\064\024\066\uff86\067\021\072\043" +
    "\001\002\000\006\055\uff86\066\215\001\002\000\026\003" +
    "\036\005\025\006\030\046\037\055\uff86\062\017\063\026" +
    "\064\024\067\021\072\043\001\002\000\004\055\uffbe\001" +
    "\002\000\004\055\221\001\002\000\004\055\uffbd\001\002" +
    "\000\030\003\uffbf\005\uffbf\006\uffbf\046\uffbf\055\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\066\uffbf\067\uffbf\072\uffbf\001\002" +
    "\000\004\055\uffbc\001\002\000\030\003\uffd9\005\uffd9\006" +
    "\uffd9\046\uffd9\055\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9" +
    "\067\uffd9\072\uffd9\001\002\000\004\074\225\001\002\000" +
    "\004\054\226\001\002\000\026\003\036\005\025\006\030" +
    "\046\037\055\uff86\062\017\063\026\064\024\067\021\072" +
    "\043\001\002\000\004\055\230\001\002\000\030\003\uffbb" +
    "\005\uffbb\006\uffbb\046\uffbb\055\uffbb\062\uffbb\063\uffbb\064" +
    "\uffbb\066\uffbb\067\uffbb\072\uffbb\001\002\000\030\003\uffe2" +
    "\005\uffe2\006\uffe2\046\uffe2\055\uffe2\062\uffe2\063\uffe2\064" +
    "\uffe2\066\uffe2\067\uffe2\072\uffe2\001\002\000\030\003\uffe1" +
    "\005\uffe1\006\uffe1\046\uffe1\055\uffe1\062\uffe1\063\uffe1\064" +
    "\uffe1\066\uffe1\067\uffe1\072\uffe1\001\002\000\004\037\uffc8" +
    "\001\002\000\004\037\236\001\002\000\004\037\uffc7\001" +
    "\002\000\030\003\uffc9\005\uffc9\006\uffc9\046\uffc9\055\uffc9" +
    "\062\uffc9\063\uffc9\064\uffc9\066\uffc9\067\uffc9\072\uffc9\001" +
    "\002\000\004\046\243\001\002\000\012\003\ufff6\054\ufff6" +
    "\060\ufff6\061\ufff6\001\002\000\012\003\ufffd\054\ufffd\060" +
    "\ufffd\061\ufffd\001\002\000\012\003\ufff7\054\ufff7\060\ufff7" +
    "\061\ufff7\001\002\000\006\036\245\040\uff86\001\002\000" +
    "\004\040\251\001\002\000\004\046\247\001\002\000\004" +
    "\040\ufff3\001\002\000\006\036\245\040\uff86\001\002\000" +
    "\004\040\ufff4\001\002\000\020\077\261\100\256\101\254" +
    "\102\257\103\252\104\260\105\253\001\002\000\014\037" +
    "\uff89\046\uff89\054\uff89\056\uff89\057\uff89\001\002\000\014" +
    "\037\uff8a\046\uff8a\054\uff8a\056\uff8a\057\uff8a\001\002\000" +
    "\014\037\uff8c\046\uff8c\054\uff8c\056\uff8c\057\uff8c\001\002" +
    "\000\004\037\262\001\002\000\014\037\uff8b\046\uff8b\054" +
    "\uff8b\056\uff8b\057\uff8b\001\002\000\014\037\uff88\046\uff88" +
    "\054\uff88\056\uff88\057\uff88\001\002\000\014\037\uff87\046" +
    "\uff87\054\uff87\056\uff87\057\uff87\001\002\000\014\037\uff8d" +
    "\046\uff8d\054\uff8d\056\uff8d\057\uff8d\001\002\000\014\003" +
    "\uff86\046\243\054\uff86\060\uff86\061\uff86\001\002\000\012" +
    "\003\ufff2\054\ufff2\060\ufff2\061\ufff2\001\002\000\012\003" +
    "\ufff5\054\ufff5\060\ufff5\061\ufff5\001\002\000\012\003\ufff1" +
    "\054\ufff1\060\ufff1\061\ufff1\001\002\000\012\003\270\054" +
    "\uff86\060\273\061\267\001\002\000\004\046\324\001\002" +
    "\000\004\055\323\001\002\000\012\003\270\054\uff86\060" +
    "\273\061\267\001\002\000\004\054\ufffe\001\002\000\004" +
    "\046\275\001\002\000\004\054\uffee\001\002\000\004\017" +
    "\276\001\002\000\022\020\uff86\077\261\100\256\101\254" +
    "\102\257\103\252\104\260\105\253\001\002\000\004\020" +
    "\310\001\002\000\004\046\303\001\002\000\004\020\uffe7" +
    "\001\002\000\004\020\uffe6\001\002\000\006\020\uff86\036" +
    "\304\001\002\000\020\077\261\100\256\101\254\102\257" +
    "\103\252\104\260\105\253\001\002\000\004\020\uffe5\001" +
    "\002\000\004\020\uffe3\001\002\000\004\020\uffe4\001\002" +
    "\000\004\040\311\001\002\000\020\077\261\100\256\101" +
    "\254\102\257\103\252\104\260\105\253\001\002\000\010" +
    "\054\uff86\056\010\057\uff86\001\002\000\004\054\314\001" +
    "\002\000\024\003\036\005\025\006\030\046\037\062\017" +
    "\063\026\064\024\067\021\072\043\001\002\000\024\003" +
    "\036\005\025\006\030\046\037\062\017\063\026\064\024" +
    "\067\021\072\043\001\002\000\026\003\uffdc\005\uffdc\006" +
    "\uffdc\046\uffdc\055\317\062\uffdc\063\uffdc\064\uffdc\067\uffdc" +
    "\072\uffdc\001\002\000\012\003\uffeb\054\uffeb\060\uffeb\061" +
    "\uffeb\001\002\000\026\003\uffdc\005\uffdc\006\uffdc\046\uffdc" +
    "\055\321\062\uffdc\063\uffdc\064\uffdc\067\uffdc\072\uffdc\001" +
    "\002\000\012\003\uffec\054\uffec\060\uffec\061\uffec\001\002" +
    "\000\004\054\ufff0\001\002\000\004\054\uffed\001\002\000" +
    "\004\017\325\001\002\000\022\020\uff86\077\261\100\256" +
    "\101\254\102\257\103\252\104\260\105\253\001\002\000" +
    "\004\020\327\001\002\000\010\054\uff86\056\010\057\uff86" +
    "\001\002\000\004\054\331\001\002\000\026\003\036\005" +
    "\025\006\030\046\037\055\333\062\017\063\026\064\024" +
    "\067\021\072\043\001\002\000\026\003\036\005\025\006" +
    "\030\046\037\055\334\062\017\063\026\064\024\067\021" +
    "\072\043\001\002\000\012\003\uffe9\054\uffe9\060\uffe9\061" +
    "\uffe9\001\002\000\012\003\uffea\054\uffea\060\uffea\061\uffea" +
    "\001\002\000\004\054\uffef\001\002\000\014\003\ufffc\054" +
    "\ufffc\057\ufffc\060\ufffc\061\ufffc\001\002\000\004\024\340" +
    "\001\002\000\020\043\057\046\061\047\060\050\053\051" +
    "\052\075\051\076\054\001\002\000\004\037\342\001\002" +
    "\000\016\003\uff86\046\337\054\uff86\057\uff86\060\uff86\061" +
    "\uff86\001\002\000\014\003\ufff9\054\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\001\002\000\014\003\ufffa\054\ufffa\057\ufffa\060" +
    "\ufffa\061\ufffa\001\002\000\014\003\ufff8\054\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\013" +
    "\013\011\017\010\065\012\001\001\000\004\014\335\001" +
    "\001\000\012\020\271\022\270\023\265\065\273\001\001" +
    "\000\006\007\240\065\237\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\005\017\006\031\021\015\024\041" +
    "\025\040\036\034\040\026\043\022\044\030\045\033\047" +
    "\044\051\021\060\037\061\032\065\043\001\001\000\002" +
    "\001\001\000\010\046\233\056\232\065\234\001\001\000" +
    "\032\021\230\024\041\025\040\036\034\040\231\043\022" +
    "\044\030\045\033\047\044\051\021\060\037\061\032\001" +
    "\001\000\012\053\223\055\165\056\047\064\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\053\163\055" +
    "\165\056\047\064\166\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\074\037" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\055\054\056\047\064\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\055\065\056\047\064\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\040\005\017\006\070" +
    "\021\015\024\041\025\040\036\034\040\026\043\022\044" +
    "\030\045\033\047\044\051\021\060\037\061\032\065\043" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\032\141" +
    "\036\140\043\104\055\107\056\047\064\055\001\001\000" +
    "\014\032\137\043\104\055\107\056\047\064\055\001\001" +
    "\000\020\032\106\041\103\043\104\055\107\056\047\064" +
    "\055\065\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\033\135\035" +
    "\121\065\122\001\001\000\014\032\132\043\104\055\107" +
    "\056\047\064\055\001\001\000\002\001\001\000\010\033" +
    "\112\035\121\065\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\032\123\043\104\055\107\056" +
    "\047\064\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\032\125\042\126\043\104\055\127\056\047\064" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\112\035\121\065\122\001\001\000\016\032\125\042" +
    "\131\043\104\055\127\056\047\064\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\033\134\035\121\065" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\036\143\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\153" +
    "\001\001\000\006\050\154\065\156\001\001\000\002\001" +
    "\001\000\004\056\157\001\001\000\002\001\001\000\006" +
    "\050\160\065\156\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\053\207" +
    "\055\165\056\047\064\166\001\001\000\006\062\175\063" +
    "\204\001\001\000\006\057\167\065\172\001\001\000\002" +
    "\001\001\000\012\053\174\055\165\056\047\064\166\001" +
    "\001\000\012\053\173\055\165\056\047\064\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\055\205\056\047\064\055\001\001\000\006" +
    "\057\206\065\172\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\057\211\065\172\001\001\000\002\001\001" +
    "\000\040\005\017\006\213\021\015\024\041\025\040\036" +
    "\034\040\026\043\022\044\030\045\033\047\044\051\021" +
    "\060\037\061\032\065\043\001\001\000\010\052\216\054" +
    "\215\065\217\001\001\000\040\005\017\006\221\021\015" +
    "\024\041\025\040\036\034\040\026\043\022\044\030\045" +
    "\033\047\044\051\021\060\037\061\032\065\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\005\017\006\226\021" +
    "\015\024\041\025\040\036\034\040\026\043\022\044\030" +
    "\045\033\047\044\051\021\060\037\061\032\065\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\241\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\243\065\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\247\065\245\001" +
    "\001\000\002\001\001\000\004\016\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\262\012\263\065\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\020\334\022\270\023\265\065\273\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\321\022\270" +
    "\023\265\065\273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\016\277" +
    "\026\276\027\300\065\301\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\030\304\065\305\001\001\000\006\016\277\027\306\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\311\001\001\000\010\013" +
    "\011\017\312\065\012\001\001\000\002\001\001\000\034" +
    "\005\314\021\015\024\315\025\040\036\034\040\026\043" +
    "\022\044\030\045\033\047\044\051\021\060\037\061\032" +
    "\001\001\000\032\021\230\024\317\025\040\036\034\040" +
    "\231\043\022\044\030\045\033\047\044\051\021\060\037" +
    "\061\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\016\277\026\325\027" +
    "\300\065\301\001\001\000\002\001\001\000\010\013\011" +
    "\017\327\065\012\001\001\000\002\001\001\000\034\005" +
    "\331\021\015\024\041\025\040\036\034\040\026\043\022" +
    "\044\030\045\033\047\044\051\021\060\037\061\032\001" +
    "\001\000\032\021\230\024\041\025\040\036\034\040\231" +
    "\043\022\044\030\045\033\047\044\051\021\060\037\061" +
    "\032\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\055" +
    "\340\056\047\064\055\001\001\000\002\001\001\000\010" +
    "\014\342\015\343\065\344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;

            System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;

            System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }

    public void ErrorUI(String pMsg, String token, int linea, int columna)
    {
        String msg = "Error en la linea: " + (linea) + ", columna: " + (columna) + ". " + pMsg;

        Main.miInstancia.agregarErrorSintactico(msg);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= declarar_datos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarar_datos ::= constantes variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // constantes ::= CONST _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION_2 tokens OPERADOR_PUNTO_Y_COMA __constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // __constantes ::= _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // __constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variables ::= VAR _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // _variables ::= IDENTIFICADOR __variables OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA ___variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_variables",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // __variables ::= OPERADOR_COMA IDENTIFICADOR __variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // __variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ___variables ::= _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ___variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarar_func_proc ::= declarar_funciones declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarar_func_proc ::= declarar_procedimientos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declarar_func_proc ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declarar_func_proc ::= error END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos BEGIN cuerpo asignar_valores_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos BEGIN asignar_valores_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos BEGIN cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos BEGIN END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parametros_entrada ::= _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // _parametros_entrada ::= tipos IDENTIFICADOR __parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_entrada",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // __parametros_entrada ::= OPERADOR_COMA _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // __parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpo ::= cuerpo instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // cuerpo ::= cuerpo estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpo ::= instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cuerpo ::= estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // _cuerpo ::= cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // _cuerpo ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // instrucciones ::= asignar_valores_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // instrucciones ::= asignar_valores_2 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrucciones ::= expr_read_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instrucciones ::= llamar_func_o_proc OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instrucciones ::= error OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // asignar_valores_1 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_1",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignar_valores_2 ::= IDENTIFICADOR ___operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignar_valores_2 ::= IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignar_valores_2 ::= __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros_llamada_func ::= expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros_llamada_func ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // _parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // _parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_read_write ::= expr_read 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_read_write ::= expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_read ::= READ _expr_read OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _expr_read ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _expr_read ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_write ::= WRITE OPERADOR_PARENTESIS_ABRIR _tokens _expr_write OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _expr_write ::= OPERADOR_COMA _tokens _expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _expr_write ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estruc_de_control ::= sentencia_if 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // estruc_de_control ::= sentencia_while 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // estruc_de_control ::= sentencia_for 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // estruc_de_control ::= error END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_if ::= IF expr_booleanas THEN _cuerpo _sentencia_if END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _sentencia_if ::= sentencia_else 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _sentencia_if ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // sentencia_else ::= ELSE _cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // sentencia_while ::= WHILE expr_booleanas DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION_1 tokens TO tokens DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expr_aritmeticas ::= tokens _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_aritmeticas ::= llamar_func_o_proc _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _expr_aritmeticas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // expr_booleanas ::= tokens operadores_booleanos_1 tokens _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // _expr_booleanas ::= AND expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // _expr_booleanas ::= OR expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // _expr_booleanas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // _operadores_aritmeticos ::= MOD 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // _operadores_aritmeticos ::= DIV 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadores_booleanos_1 ::= operadores_booleanos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadores_booleanos_1 ::= OPERADOR_ASIGNACION_2 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tokens ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tokens ::= tokens_boolean 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // _tokens ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // _tokens ::= LITERAL_STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tokens_boolean ::= TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tokens_boolean ::= FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tokens_boolean ::= NOT TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tokens_boolean ::= NOT FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipos ::= INT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipos ::= SHORTINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipos ::= LONGINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipos ::= REAL 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // tipos ::= STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // tipos ::= CHAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // tipos ::= BOOLEAN 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
