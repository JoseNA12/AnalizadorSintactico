
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\013\004\000\002\013\004\000" +
    "\002\010\006\000\002\010\005\000\002\011\006\000\002" +
    "\011\005\000\002\014\014\000\002\015\012\000\002\020" +
    "\004\000\002\020\006\000\002\021\005\000\002\006\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\005\000\002\006\003\000\002\016\005\000\002" +
    "\017\004\000\002\017\004\000\002\017\003\000\002\040" +
    "\006\000\002\036\003\000\002\036\005\000\002\036\003" +
    "\000\002\037\005\000\002\037\003\000\002\042\003\000" +
    "\002\042\003\000\002\043\005\000\002\044\003\000\002" +
    "\044\003\000\002\045\006\000\002\046\004\000\002\046" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\047\010\000\002\050\003\000\002\050\003\000" +
    "\002\052\004\000\002\057\010\000\002\060\014\000\002" +
    "\022\003\000\002\022\003\000\002\022\005\000\002\022" +
    "\005\000\002\022\006\000\002\025\004\000\002\025\003" +
    "\000\002\051\004\000\002\051\006\000\002\051\006\000" +
    "\002\056\004\000\002\056\004\000\002\056\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\061\003\000\002\061" +
    "\003\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\054\003\000\002\054\003\000" +
    "\002\055\003\000\002\055\003\000\002\055\003\000\002" +
    "\055\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\004\000\002\062\004\000\002\062\004\000\002\012\003" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\063\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\004\052\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\304\001\002\000\004\045\007\001\002" +
    "\000\014\053\uff9a\055\020\056\013\057\016\060\011\001" +
    "\002\000\014\053\uff9a\055\020\056\013\057\016\060\011" +
    "\001\002\000\004\045\274\001\002\000\014\053\uff9a\055" +
    "\020\056\013\057\016\060\011\001\002\000\004\045\264" +
    "\001\002\000\014\053\uff9a\055\020\056\013\057\016\060" +
    "\011\001\002\000\004\053\260\001\002\000\004\045\044" +
    "\001\002\000\004\053\ufffb\001\002\000\004\045\022\001" +
    "\002\000\034\045\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\066" +
    "\ufff9\071\ufff9\001\002\000\006\023\023\035\024\001\002" +
    "\000\020\042\035\045\037\046\036\047\031\050\030\074" +
    "\027\075\032\001\002\000\004\045\022\001\002\000\034" +
    "\045\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\065\ufff5\066\ufff5\071\ufff5" +
    "\001\002\000\030\013\uffac\014\uffac\015\uffac\016\uffac\020" +
    "\uffac\035\uffac\036\uffac\043\uffac\044\uffac\072\uffac\073\uffac" +
    "\001\002\000\036\013\uffa6\014\uffa6\015\uffa6\016\uffa6\020" +
    "\uffa6\035\uffa6\036\uffa6\040\uffa6\041\uffa6\043\uffa6\044\uffa6" +
    "\064\uffa6\072\uffa6\073\uffa6\001\002\000\062\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\020\uffa9\023\uffa9\024\uffa9\035\uffa9\036\uffa9\040\uffa9\041" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\064\uffa9\072\uffa9\073\uffa9\001\002\000\062\007\uffa7\010" +
    "\uffa7\011\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7" +
    "\020\uffa7\023\uffa7\024\uffa7\035\uffa7\036\uffa7\040\uffa7\041" +
    "\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7" +
    "\064\uffa7\072\uffa7\073\uffa7\001\002\000\036\013\uffa5\014" +
    "\uffa5\015\uffa5\016\uffa5\020\uffa5\035\uffa5\036\uffa5\040\uffa5" +
    "\041\uffa5\043\uffa5\044\uffa5\064\uffa5\072\uffa5\073\uffa5\001" +
    "\002\000\004\036\043\001\002\000\030\013\uffab\014\uffab" +
    "\015\uffab\016\uffab\020\uffab\035\uffab\036\uffab\043\uffab\044" +
    "\uffab\072\uffab\073\uffab\001\002\000\010\045\041\074\040" +
    "\075\042\001\002\000\062\007\uffa8\010\uffa8\011\uffa8\012" +
    "\uffa8\013\uffa8\014\uffa8\015\uffa8\016\uffa8\020\uffa8\023\uffa8" +
    "\024\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\064\uffa8\072\uffa8" +
    "\073\uffa8\001\002\000\046\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\020\uffaa\023\uffaa\024\uffaa\035\uffaa\036\uffaa\040\uffaa" +
    "\041\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\064\uffaa\072" +
    "\uffaa\073\uffaa\001\002\000\036\013\uffa3\014\uffa3\015\uffa3" +
    "\016\uffa3\020\uffa3\035\uffa3\036\uffa3\040\uffa3\041\uffa3\043" +
    "\uffa3\044\uffa3\064\uffa3\072\uffa3\073\uffa3\001\002\000\036" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\020\uffa4\035\uffa4\036" +
    "\uffa4\040\uffa4\041\uffa4\043\uffa4\044\uffa4\064\uffa4\072\uffa4" +
    "\073\uffa4\001\002\000\036\013\uffa2\014\uffa2\015\uffa2\016" +
    "\uffa2\020\uffa2\035\uffa2\036\uffa2\040\uffa2\041\uffa2\043\uffa2" +
    "\044\uffa2\064\uffa2\072\uffa2\073\uffa2\001\002\000\034\045" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\065\ufff6\066\ufff6\071\ufff6\001" +
    "\002\000\004\017\045\001\002\000\020\076\046\077\047" +
    "\100\053\101\056\102\054\103\052\104\055\001\002\000" +
    "\010\036\uffa1\045\uffa1\053\uffa1\001\002\000\010\036\uff9f" +
    "\045\uff9f\053\uff9f\001\002\000\004\020\062\001\002\000" +
    "\004\045\057\001\002\000\010\036\uff9b\045\uff9b\053\uff9b" +
    "\001\002\000\010\036\uffa0\045\uffa0\053\uffa0\001\002\000" +
    "\010\036\uff9d\045\uff9d\053\uff9d\001\002\000\010\036\uff9e" +
    "\045\uff9e\053\uff9e\001\002\000\010\036\uff9c\045\uff9c\053" +
    "\uff9c\001\002\000\006\020\ufff2\035\060\001\002\000\020" +
    "\076\046\077\047\100\053\101\056\102\054\103\052\104" +
    "\055\001\002\000\004\020\ufff1\001\002\000\004\037\063" +
    "\001\002\000\020\076\046\077\047\100\053\101\056\102" +
    "\054\103\052\104\055\001\002\000\004\053\065\001\002" +
    "\000\024\045\103\054\uff9a\055\020\056\013\061\066\062" +
    "\075\063\074\066\070\071\105\001\002\000\014\036\uff9a" +
    "\045\037\046\036\047\031\050\030\001\002\000\004\054" +
    "\253\001\002\000\022\017\207\042\035\045\037\046\036" +
    "\047\031\050\030\074\027\075\032\001\002\000\026\045" +
    "\103\054\uff9a\055\020\056\013\061\066\062\075\063\074" +
    "\065\uff9a\066\070\071\105\001\002\000\026\045\uffd7\054" +
    "\uffd7\055\uffd7\056\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7" +
    "\066\uffd7\071\uffd7\001\002\000\004\036\243\001\002\000" +
    "\022\017\207\042\035\045\037\046\036\047\031\050\030" +
    "\074\027\075\032\001\002\000\012\045\037\046\036\047" +
    "\031\050\030\001\002\000\026\045\103\054\uff9a\055\020" +
    "\056\013\061\066\062\075\063\074\065\uff9a\066\070\071" +
    "\105\001\002\000\026\045\103\054\uff9a\055\020\056\013" +
    "\061\066\062\075\063\074\065\uff9a\066\070\071\105\001" +
    "\002\000\026\045\uffd5\054\uffd5\055\uffd5\056\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\065\uffd5\066\uffd5\071\uffd5\001\002\000" +
    "\026\045\uffdf\054\uffdf\055\uffdf\056\uffdf\061\uffdf\062\uffdf" +
    "\063\uffdf\065\uffdf\066\uffdf\071\uffdf\001\002\000\026\045" +
    "\103\054\uff9a\055\020\056\013\061\066\062\075\063\074" +
    "\065\uff9a\066\070\071\105\001\002\000\022\005\130\006" +
    "\132\017\127\023\123\025\131\026\122\027\133\030\126" +
    "\001\002\000\026\045\uffd6\054\uffd6\055\uffd6\056\uffd6\061" +
    "\uffd6\062\uffd6\063\uffd6\065\uffd6\066\uffd6\071\uffd6\001\002" +
    "\000\004\045\110\001\002\000\006\054\uffea\065\uffea\001" +
    "\002\000\026\045\uffde\054\uffde\055\uffde\056\uffde\061\uffde" +
    "\062\uffde\063\uffde\065\uffde\066\uffde\071\uffde\001\002\000" +
    "\004\023\111\001\002\000\020\042\035\045\037\046\036" +
    "\047\031\050\030\074\027\075\032\001\002\000\004\072" +
    "\113\001\002\000\020\042\035\045\037\046\036\047\031" +
    "\050\030\074\027\075\032\001\002\000\004\073\115\001" +
    "\002\000\004\053\116\001\002\000\024\045\103\054\uff9a" +
    "\055\020\056\013\061\066\062\075\063\074\066\070\071" +
    "\105\001\002\000\004\054\120\001\002\000\026\045\uffcf" +
    "\054\uffcf\055\uffcf\056\uffcf\061\uffcf\062\uffcf\063\uffcf\065" +
    "\uffcf\066\uffcf\071\uffcf\001\002\000\004\036\173\001\002" +
    "\000\022\017\uffb5\042\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\074\uffb5\075\uffb5\001\002\000\022\017\147\042\035" +
    "\045\151\046\036\047\031\050\030\074\027\075\032\001" +
    "\002\000\004\036\uffe6\001\002\000\022\017\147\042\035" +
    "\045\151\046\036\047\031\050\030\074\027\075\032\001" +
    "\002\000\022\017\uffb3\042\uffb3\045\uffb3\046\uffb3\047\uffb3" +
    "\050\uffb3\074\uffb3\075\uffb3\001\002\000\022\020\uff9a\042" +
    "\035\045\037\046\036\047\031\050\030\074\027\075\032" +
    "\001\002\000\004\036\uffb8\001\002\000\022\017\uffb6\042" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\074\uffb6\075\uffb6" +
    "\001\002\000\004\036\uffb7\001\002\000\022\017\uffb4\042" +
    "\uffb4\045\uffb4\046\uffb4\047\uffb4\050\uffb4\074\uffb4\075\uffb4" +
    "\001\002\000\004\020\144\001\002\000\006\020\uffe4\035" +
    "\137\001\002\000\004\020\uffe2\001\002\000\020\042\035" +
    "\045\037\046\036\047\031\050\030\074\027\075\032\001" +
    "\002\000\004\020\uffe3\001\002\000\006\020\uffe0\035\142" +
    "\001\002\000\020\042\035\045\037\046\036\047\031\050" +
    "\030\074\027\075\032\001\002\000\004\020\uffe1\001\002" +
    "\000\022\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5\036" +
    "\uffe5\043\uffe5\044\uffe5\001\002\000\022\013\155\014\160" +
    "\015\152\016\156\020\uffcd\036\uffcd\043\153\044\154\001" +
    "\002\000\004\036\uffe7\001\002\000\022\017\147\042\035" +
    "\045\151\046\036\047\031\050\030\074\027\075\032\001" +
    "\002\000\022\013\155\014\160\015\152\016\156\020\uffce" +
    "\036\uffce\043\153\044\154\001\002\000\024\013\uffaa\014" +
    "\uffaa\015\uffaa\016\uffaa\017\127\020\uffaa\036\uffaa\043\uffaa" +
    "\044\uffaa\001\002\000\022\017\uffbc\042\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\074\uffbc\075\uffbc\001\002\000\022" +
    "\017\uffba\042\uffba\045\uffba\046\uffba\047\uffba\050\uffba\074" +
    "\uffba\075\uffba\001\002\000\022\017\uffb9\042\uffb9\045\uffb9" +
    "\046\uffb9\047\uffb9\050\uffb9\074\uffb9\075\uffb9\001\002\000" +
    "\022\017\uffbe\042\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe" +
    "\074\uffbe\075\uffbe\001\002\000\022\017\uffbb\042\uffbb\045" +
    "\uffbb\046\uffbb\047\uffbb\050\uffbb\074\uffbb\075\uffbb\001\002" +
    "\000\022\017\147\042\035\045\151\046\036\047\031\050" +
    "\030\074\027\075\032\001\002\000\022\017\uffbd\042\uffbd" +
    "\045\uffbd\046\uffbd\047\uffbd\050\uffbd\074\uffbd\075\uffbd\001" +
    "\002\000\006\020\uffcc\036\uffcc\001\002\000\004\020\163" +
    "\001\002\000\022\013\155\014\160\015\152\016\156\020" +
    "\uff9a\036\uff9a\043\153\044\154\001\002\000\006\020\uffca" +
    "\036\uffca\001\002\000\006\020\uffc8\036\uffc8\001\002\000" +
    "\022\017\147\042\035\045\151\046\036\047\031\050\030" +
    "\074\027\075\032\001\002\000\006\020\uffc9\036\uffc9\001" +
    "\002\000\022\017\147\042\035\045\151\046\036\047\031" +
    "\050\030\074\027\075\032\001\002\000\006\020\uffcb\036" +
    "\uffcb\001\002\000\004\036\uffe8\001\002\000\026\045\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\061\uffe9\062\uffe9\063\uffe9\065" +
    "\uffe9\066\uffe9\071\uffe9\001\002\000\006\054\uffef\065\uffef" +
    "\001\002\000\006\054\uffed\065\uffed\001\002\000\006\054" +
    "\uffec\065\uffec\001\002\000\014\036\uff9a\045\037\046\036" +
    "\047\031\050\030\001\002\000\014\036\uff9a\045\037\046" +
    "\036\047\031\050\030\001\002\000\004\036\203\001\002" +
    "\000\004\036\uffd8\001\002\000\026\045\uffda\054\uffda\055" +
    "\uffda\056\uffda\061\uffda\062\uffda\063\uffda\065\uffda\066\uffda" +
    "\071\uffda\001\002\000\004\036\uffd9\001\002\000\016\007" +
    "\237\010\235\011\240\012\236\023\233\024\234\001\002" +
    "\000\004\064\222\001\002\000\022\017\207\042\035\045" +
    "\037\046\036\047\031\050\030\074\027\075\032\001\002" +
    "\000\014\020\uff9a\040\213\041\212\064\uff9a\073\uff9a\001" +
    "\002\000\010\020\uffc7\064\uffc7\073\uffc7\001\002\000\022" +
    "\017\207\042\035\045\037\046\036\047\031\050\030\074" +
    "\027\075\032\001\002\000\022\017\207\042\035\045\037" +
    "\046\036\047\031\050\030\074\027\075\032\001\002\000" +
    "\010\020\uffc2\064\uffc2\073\uffc2\001\002\000\010\020\uffc3" +
    "\064\uffc3\073\uffc3\001\002\000\010\020\uffc4\064\uffc4\073" +
    "\uffc4\001\002\000\004\020\220\001\002\000\014\020\uff9a" +
    "\040\213\041\212\064\uff9a\073\uff9a\001\002\000\010\020" +
    "\uffc5\064\uffc5\073\uffc5\001\002\000\026\045\103\054\uff9a" +
    "\055\020\056\013\061\066\062\075\063\074\065\uff9a\066" +
    "\070\071\105\001\002\000\006\054\uff9a\065\224\001\002" +
    "\000\024\045\103\054\uff9a\055\020\056\013\061\066\062" +
    "\075\063\074\066\070\071\105\001\002\000\004\054\uffd3" +
    "\001\002\000\004\054\230\001\002\000\004\054\uffd2\001" +
    "\002\000\026\045\uffd4\054\uffd4\055\uffd4\056\uffd4\061\uffd4" +
    "\062\uffd4\063\uffd4\065\uffd4\066\uffd4\071\uffd4\001\002\000" +
    "\004\054\uffd1\001\002\000\012\045\037\046\036\047\031" +
    "\050\030\001\002\000\012\045\uffae\046\uffae\047\uffae\050" +
    "\uffae\001\002\000\012\045\uffad\046\uffad\047\uffad\050\uffad" +
    "\001\002\000\012\045\uffb2\046\uffb2\047\uffb2\050\uffb2\001" +
    "\002\000\012\045\uffb0\046\uffb0\047\uffb0\050\uffb0\001\002" +
    "\000\012\045\uffb1\046\uffb1\047\uffb1\050\uffb1\001\002\000" +
    "\012\045\uffaf\046\uffaf\047\uffaf\050\uffaf\001\002\000\014" +
    "\020\uff9a\040\213\041\212\064\uff9a\073\uff9a\001\002\000" +
    "\010\020\uffc6\064\uffc6\073\uffc6\001\002\000\026\045\103" +
    "\054\uff9a\055\020\056\013\061\066\062\075\063\074\065" +
    "\uff9a\066\070\071\105\001\002\000\006\054\uffeb\065\uffeb" +
    "\001\002\000\006\054\uffee\065\uffee\001\002\000\004\073" +
    "\247\001\002\000\004\053\250\001\002\000\024\045\103" +
    "\054\uff9a\055\020\056\013\061\066\062\075\063\074\066" +
    "\070\071\105\001\002\000\004\054\252\001\002\000\026" +
    "\045\uffd0\054\uffd0\055\uffd0\056\uffd0\061\uffd0\062\uffd0\063" +
    "\uffd0\065\uffd0\066\uffd0\071\uffd0\001\002\000\014\053\ufff4" +
    "\055\ufff4\056\ufff4\057\ufff4\060\ufff4\001\002\000\004\036" +
    "\uffdc\001\002\000\004\036\257\001\002\000\004\036\uffdb" +
    "\001\002\000\026\045\uffdd\054\uffdd\055\uffdd\056\uffdd\061" +
    "\uffdd\062\uffdd\063\uffdd\065\uffdd\066\uffdd\071\uffdd\001\002" +
    "\000\024\045\103\054\uff9a\055\020\056\013\061\066\062" +
    "\075\063\074\066\070\071\105\001\002\000\004\054\262" +
    "\001\002\000\004\002\uffff\001\002\000\004\053\ufffd\001" +
    "\002\000\006\035\266\037\267\001\002\000\034\045\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\065\ufffa\066\ufffa\071\ufffa\001\002" +
    "\000\004\045\264\001\002\000\020\076\046\077\047\100" +
    "\053\101\056\102\054\103\052\104\055\001\002\000\004" +
    "\036\271\001\002\000\034\045\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8" +
    "\065\ufff8\066\ufff8\071\ufff8\001\002\000\034\045\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7" +
    "\062\ufff7\063\ufff7\065\ufff7\066\ufff7\071\ufff7\001\002\000" +
    "\004\053\ufffe\001\002\000\004\017\275\001\002\000\020" +
    "\076\046\077\047\100\053\101\056\102\054\103\052\104" +
    "\055\001\002\000\004\020\277\001\002\000\004\053\300" +
    "\001\002\000\024\045\103\054\uff9a\055\020\056\013\061" +
    "\066\062\075\063\074\066\070\071\105\001\002\000\004" +
    "\054\302\001\002\000\014\053\ufff3\055\ufff3\056\ufff3\057" +
    "\ufff3\060\ufff3\001\002\000\004\053\ufffc\001\002\000\004" +
    "\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\302\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\014" +
    "\013\011\014\013\015\007\063\016\001\001\000\014\004" +
    "\302\013\011\014\013\015\007\063\016\001\001\000\002" +
    "\001\001\000\014\004\272\013\011\014\013\015\007\063" +
    "\016\001\001\000\004\010\264\001\001\000\014\004\262" +
    "\013\011\014\013\015\007\063\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\054" +
    "\032\055\025\062\033\001\001\000\004\011\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\050\020\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\050\020" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\063\001\001\000\002\001\001\000\032\006\066\013" +
    "\070\016\101\035\075\040\072\042\076\043\100\045\106" +
    "\047\071\057\103\060\077\063\105\001\001\000\010\044" +
    "\254\055\253\063\255\001\001\000\002\001\001\000\010" +
    "\051\245\055\204\062\207\001\001\000\032\006\244\013" +
    "\070\016\101\035\075\040\072\042\076\043\100\045\106" +
    "\047\071\057\103\060\077\063\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\051\205\055\204\062\207" +
    "\001\001\000\004\055\176\001\001\000\032\006\175\013" +
    "\070\016\101\035\075\040\072\042\076\043\100\045\106" +
    "\047\071\057\103\060\077\063\105\001\001\000\032\006" +
    "\174\013\070\016\101\035\075\040\072\042\076\043\100" +
    "\045\106\047\071\057\103\060\077\063\105\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\006\173\013\070" +
    "\016\101\035\075\040\072\042\076\043\100\045\106\047" +
    "\071\057\103\060\077\063\105\001\001\000\010\017\120" +
    "\033\123\034\124\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\054\111\055\025\062\033\001\001\000\002\001" +
    "\001\000\010\054\113\055\025\062\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\006\116\013\070\016" +
    "\101\035\075\040\072\042\076\043\100\045\106\047\071" +
    "\057\103\060\077\063\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\022\171\040\144\054\147\055\025\062\033\001\001\000" +
    "\002\001\001\000\014\022\145\040\144\054\147\055\025" +
    "\062\033\001\001\000\002\001\001\000\014\036\133\054" +
    "\134\055\025\062\033\063\135\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\037\137\054\140\055\025\062\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\037\142\054\140\055\025" +
    "\062\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\032\167\001\001\000\002\001\001\000\014\022\161" +
    "\040\144\054\147\055\025\062\033\001\001\000\004\032" +
    "\156\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\022\160\040\144\054\147\055\025\062\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\025\163\032\165\063\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\022\166\040\144\054" +
    "\147\055\025\062\033\001\001\000\002\001\001\000\014" +
    "\022\170\040\144\054\147\055\025\062\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\046" +
    "\200\055\177\063\201\001\001\000\010\046\203\055\177" +
    "\063\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\231\001\001" +
    "\000\002\001\001\000\010\051\216\055\204\062\207\001" +
    "\001\000\006\056\210\063\213\001\001\000\002\001\001" +
    "\000\010\051\215\055\204\062\207\001\001\000\010\051" +
    "\214\055\204\062\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\056" +
    "\220\063\213\001\001\000\002\001\001\000\032\006\222" +
    "\013\070\016\101\035\075\040\072\042\076\043\100\045" +
    "\106\047\071\057\103\060\077\063\105\001\001\000\010" +
    "\050\225\052\224\063\226\001\001\000\032\006\230\013" +
    "\070\016\101\035\075\040\072\042\076\043\100\045\106" +
    "\047\071\057\103\060\077\063\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\055\240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\056\241\063" +
    "\213\001\001\000\002\001\001\000\032\006\243\013\070" +
    "\016\101\035\075\040\072\042\076\043\100\045\106\047" +
    "\071\057\103\060\077\063\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\006\250\013\070\016\101\035\075\040\072\042\076" +
    "\043\100\045\106\047\071\057\103\060\077\063\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\006\260\013\070\016\101\035\075" +
    "\040\072\042\076\043\100\045\106\047\071\057\103\060" +
    "\077\063\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\271\001\001\000\004\012\267\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\050\020\275\001\001" +
    "\000\002\001\001\000\002\001\001\000\032\006\300\013" +
    "\070\016\101\035\075\040\072\042\076\043\100\045\106" +
    "\047\071\057\103\060\077\063\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		 System.out.println("Correcto!"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= declarar_datos encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= declarar_funciones encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= declarar_procedimientos encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarar_datos ::= VAR variables 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarar_datos ::= CONST constantes 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables ::= IDENTIFICADOR OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variables ::= IDENTIFICADOR OPERADOR_COMA variables 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION tokens OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constantes ::= IDENTIFICADOR OPERADOR_COMA constantes 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_entrada ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_entrada ::= tipos IDENTIFICADOR OPERADOR_COMA parametros_entrada 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= asignar_valores cuerpo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= declarar_datos cuerpo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo ::= expr_read_write cuerpo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo ::= estruc_de_control cuerpo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo ::= llamar_func_o_proc OPERADOR_PUNTO_Y_COMA cuerpo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignar_valores ::= IDENTIFICADOR _asignar_valores OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _asignar_valores ::= OPERADOR_ASIGNACION expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _asignar_valores ::= ___operadores_aritmeticos expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // _asignar_valores ::= __operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_llamada_func ::= tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_llamada_func ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _parametros_llamada_func ::= tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_read_write ::= expr_read 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_read_write ::= expr_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_read ::= READ _expr_read OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // _expr_read ::= _tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // _expr_read ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_write ::= WRITE _tokens _expr_write OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _expr_write ::= _tokens _expr_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _expr_write ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estruc_de_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estruc_de_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estruc_de_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_if ::= IF expr_booleanas THEN cuerpo _sentencia_if END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // _sentencia_if ::= sentencia_else 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // _sentencia_if ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_else ::= ELSE cuerpo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_while ::= WHILE expr_booleanas DO BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION tokens TO tokens DO BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_aritmeticas ::= tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_aritmeticas ::= llamar_func_o_proc 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_aritmeticas ::= tokens _operadores_aritmeticos expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_aritmeticas ::= llamar_func_o_proc _operadores_aritmeticos expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // _expr_aritmeticas ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_booleanas ::= _tokens operadores_booleanos _tokens _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _expr_booleanas ::= AND expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _expr_booleanas ::= OR expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _expr_booleanas ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _operadores_aritmeticos ::= MOD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _operadores_aritmeticos ::= DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // operadores_booleanos ::= OPERADOR_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // tokens ::= _tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // tokens ::= tokens_boolean 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _tokens ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // _tokens ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tokens_boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tokens_boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tokens_boolean ::= NOT TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tokens_boolean ::= NOT FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipos ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tipos ::= LONGINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipos ::= REAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipos ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tipos ::= CHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
