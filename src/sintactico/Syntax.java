
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\012\004\000\002\012\004\000" +
    "\002\007\006\000\002\007\005\000\002\010\006\000\002" +
    "\010\005\000\002\013\015\000\002\014\012\000\002\017" +
    "\004\000\002\017\006\000\002\020\005\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\015\004\000\002\015\005\000\002\016\004\000\002" +
    "\016\004\000\002\016\007\000\002\033\007\000\002\031" +
    "\003\000\002\031\005\000\002\031\003\000\002\032\005" +
    "\000\002\032\003\000\002\034\003\000\002\034\003\000" +
    "\002\035\005\000\002\036\003\000\002\036\003\000\002" +
    "\037\006\000\002\040\004\000\002\040\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\041\010" +
    "\000\002\042\003\000\002\042\003\000\002\044\004\000" +
    "\002\052\010\000\002\053\014\000\002\022\004\000\002" +
    "\022\005\000\002\022\006\000\002\022\005\000\002\023" +
    "\005\000\002\024\003\000\002\024\003\000\002\043\006" +
    "\000\002\043\006\000\002\051\004\000\002\051\004\000" +
    "\002\051\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\003\000" +
    "\002\027\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\021\004\000\002" +
    "\021\004\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\055\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\302\001\002\000\004\046\007\001\002" +
    "\000\014\054\uff9f\056\020\057\013\060\016\061\011\001" +
    "\002\000\014\054\uff9f\056\020\057\013\060\016\061\011" +
    "\001\002\000\004\046\272\001\002\000\014\054\uff9f\056" +
    "\020\057\013\060\016\061\011\001\002\000\004\046\262" +
    "\001\002\000\014\054\uff9f\056\020\057\013\060\016\061" +
    "\011\001\002\000\004\054\256\001\002\000\004\046\043" +
    "\001\002\000\004\054\ufffb\001\002\000\004\046\022\001" +
    "\002\000\014\054\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\001\002\000\006\023\023\036\024\001\002\000\020\043" +
    "\033\046\035\047\034\050\031\051\030\075\027\076\032" +
    "\001\002\000\004\046\022\001\002\000\014\054\ufff5\056" +
    "\ufff5\057\ufff5\060\ufff5\061\ufff5\001\002\000\004\037\042" +
    "\001\002\000\066\005\uffab\006\uffab\007\uffab\010\uffab\011" +
    "\uffab\012\uffab\013\uffab\015\uffab\016\uffab\020\uffab\023\uffab" +
    "\024\uffab\026\uffab\027\uffab\030\uffab\031\uffab\036\uffab\037" +
    "\uffab\041\uffab\042\uffab\044\uffab\045\uffab\055\uffab\065\uffab" +
    "\073\uffab\074\uffab\001\002\000\066\005\uffaf\006\uffaf\007" +
    "\uffaf\010\uffaf\011\uffaf\012\uffaf\013\uffaf\015\uffaf\016\uffaf" +
    "\020\uffaf\023\uffaf\024\uffaf\026\uffaf\027\uffaf\030\uffaf\031" +
    "\uffaf\036\uffaf\037\uffaf\041\uffaf\042\uffaf\044\uffaf\045\uffaf" +
    "\055\uffaf\065\uffaf\073\uffaf\074\uffaf\001\002\000\066\005" +
    "\uffad\006\uffad\007\uffad\010\uffad\011\uffad\012\uffad\013\uffad" +
    "\015\uffad\016\uffad\020\uffad\023\uffad\024\uffad\026\uffad\027" +
    "\uffad\030\uffad\031\uffad\036\uffad\037\uffad\041\uffad\042\uffad" +
    "\044\uffad\045\uffad\055\uffad\065\uffad\073\uffad\074\uffad\001" +
    "\002\000\066\005\uffaa\006\uffaa\007\uffaa\010\uffaa\011\uffaa" +
    "\012\uffaa\013\uffaa\015\uffaa\016\uffaa\020\uffaa\023\uffaa\024" +
    "\uffaa\026\uffaa\027\uffaa\030\uffaa\031\uffaa\036\uffaa\037\uffaa" +
    "\041\uffaa\042\uffaa\044\uffaa\045\uffaa\055\uffaa\065\uffaa\073" +
    "\uffaa\074\uffaa\001\002\000\010\046\037\075\040\076\041" +
    "\001\002\000\066\005\uffae\006\uffae\007\uffae\010\uffae\011" +
    "\uffae\012\uffae\013\uffae\015\uffae\016\uffae\020\uffae\023\uffae" +
    "\024\uffae\026\uffae\027\uffae\030\uffae\031\uffae\036\uffae\037" +
    "\uffae\041\uffae\042\uffae\044\uffae\045\uffae\055\uffae\065\uffae" +
    "\073\uffae\074\uffae\001\002\000\066\005\uffb0\006\uffb0\007" +
    "\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\015\uffb0\016\uffb0" +
    "\020\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0\030\uffb0\031" +
    "\uffb0\036\uffb0\037\uffb0\041\uffb0\042\uffb0\044\uffb0\045\uffb0" +
    "\055\uffb0\065\uffb0\073\uffb0\074\uffb0\001\002\000\066\005" +
    "\uffac\006\uffac\007\uffac\010\uffac\011\uffac\012\uffac\013\uffac" +
    "\015\uffac\016\uffac\020\uffac\023\uffac\024\uffac\026\uffac\027" +
    "\uffac\030\uffac\031\uffac\036\uffac\037\uffac\041\uffac\042\uffac" +
    "\044\uffac\045\uffac\055\uffac\065\uffac\073\uffac\074\uffac\001" +
    "\002\000\066\005\uffa9\006\uffa9\007\uffa9\010\uffa9\011\uffa9" +
    "\012\uffa9\013\uffa9\015\uffa9\016\uffa9\020\uffa9\023\uffa9\024" +
    "\uffa9\026\uffa9\027\uffa9\030\uffa9\031\uffa9\036\uffa9\037\uffa9" +
    "\041\uffa9\042\uffa9\044\uffa9\045\uffa9\055\uffa9\065\uffa9\073" +
    "\uffa9\074\uffa9\001\002\000\066\005\uffa8\006\uffa8\007\uffa8" +
    "\010\uffa8\011\uffa8\012\uffa8\013\uffa8\015\uffa8\016\uffa8\020" +
    "\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\036\uffa8\037\uffa8\041\uffa8\042\uffa8\044\uffa8\045\uffa8\055" +
    "\uffa8\065\uffa8\073\uffa8\074\uffa8\001\002\000\066\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\013\uffa7\015" +
    "\uffa7\016\uffa7\020\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7" +
    "\030\uffa7\031\uffa7\036\uffa7\037\uffa7\041\uffa7\042\uffa7\044" +
    "\uffa7\045\uffa7\055\uffa7\065\uffa7\073\uffa7\074\uffa7\001\002" +
    "\000\014\054\ufff6\056\ufff6\057\ufff6\060\ufff6\061\ufff6\001" +
    "\002\000\004\017\044\001\002\000\020\077\045\100\047" +
    "\101\052\102\055\103\053\104\051\105\054\001\002\000" +
    "\010\037\uffa6\046\uffa6\054\uffa6\001\002\000\004\020\061" +
    "\001\002\000\010\037\uffa4\046\uffa4\054\uffa4\001\002\000" +
    "\004\046\056\001\002\000\010\037\uffa0\046\uffa0\054\uffa0" +
    "\001\002\000\010\037\uffa5\046\uffa5\054\uffa5\001\002\000" +
    "\010\037\uffa2\046\uffa2\054\uffa2\001\002\000\010\037\uffa3" +
    "\046\uffa3\054\uffa3\001\002\000\010\037\uffa1\046\uffa1\054" +
    "\uffa1\001\002\000\006\020\ufff2\036\057\001\002\000\020" +
    "\077\045\100\047\101\052\102\055\103\053\104\051\105" +
    "\054\001\002\000\004\020\ufff1\001\002\000\004\040\062" +
    "\001\002\000\020\077\045\100\047\101\052\102\055\103" +
    "\053\104\051\105\054\001\002\000\004\054\064\001\002" +
    "\000\034\017\101\043\033\046\103\047\034\050\031\051" +
    "\030\062\065\063\073\064\072\067\067\072\105\075\027" +
    "\076\032\001\002\000\006\037\uff9f\046\252\001\002\000" +
    "\004\046\246\001\002\000\022\017\206\043\033\046\035" +
    "\047\034\050\031\051\030\075\027\076\032\001\002\000" +
    "\010\046\uffd8\055\uffd8\066\uffd8\001\002\000\010\046\uffed" +
    "\055\uffed\066\uffed\001\002\000\022\017\206\043\033\046" +
    "\035\047\034\050\031\051\030\075\027\076\032\001\002" +
    "\000\004\046\176\001\002\000\010\046\uffec\055\uffec\066" +
    "\uffec\001\002\000\010\046\uffee\055\uffee\066\uffee\001\002" +
    "\000\010\046\uffd6\055\uffd6\066\uffd6\001\002\000\010\046" +
    "\uffe0\055\uffe0\066\uffe0\001\002\000\010\046\uffef\055\uffef" +
    "\066\uffef\001\002\000\022\017\101\043\033\046\035\047" +
    "\034\050\031\051\030\075\027\076\032\001\002\000\010" +
    "\046\uffd7\055\uffd7\066\uffd7\001\002\000\034\005\uffb0\006" +
    "\uffb0\013\uffb0\015\uffb0\016\uffb0\017\147\023\146\026\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\044\uffb0\045\uffb0\001\002\000" +
    "\004\037\145\001\002\000\004\046\134\001\002\000\030" +
    "\005\114\006\121\013\122\015\110\016\120\026\116\027" +
    "\112\030\124\031\115\044\111\045\117\001\002\000\010" +
    "\046\uffdf\055\uffdf\066\uffdf\001\002\000\020\043\uffc0\046" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\075\uffc0\076\uffc0\001\002" +
    "\000\020\043\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\075" +
    "\uffbe\076\uffbe\001\002\000\020\043\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\075\uffbc\076\uffbc\001\002\000\006\020" +
    "\uffcf\037\uffcf\001\002\000\006\020\uffb8\037\uffb8\001\002" +
    "\000\020\043\uffba\046\uffba\047\uffba\050\uffba\051\uffba\075" +
    "\uffba\076\uffba\001\002\000\020\043\uffbd\046\uffbd\047\uffbd" +
    "\050\uffbd\051\uffbd\075\uffbd\076\uffbd\001\002\000\020\043" +
    "\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\075\uffb9\076\uffb9" +
    "\001\002\000\020\043\uffbf\046\uffbf\047\uffbf\050\uffbf\051" +
    "\uffbf\075\uffbf\076\uffbf\001\002\000\006\020\uffb7\037\uffb7" +
    "\001\002\000\020\043\uffc1\046\uffc1\047\uffc1\050\uffc1\051" +
    "\uffc1\075\uffc1\076\uffc1\001\002\000\020\043\033\046\035" +
    "\047\034\050\031\051\030\075\027\076\032\001\002\000" +
    "\020\043\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\075\uffbb" +
    "\076\uffbb\001\002\000\030\013\122\015\110\016\120\020" +
    "\uffce\026\116\027\112\030\124\031\115\037\uffce\044\111" +
    "\045\117\001\002\000\006\020\uffcd\037\uffcd\001\002\000" +
    "\020\043\033\046\035\047\034\050\031\051\030\075\027" +
    "\076\032\001\002\000\030\013\122\015\110\016\120\020" +
    "\uff9f\026\116\027\112\030\124\031\115\037\uff9f\044\111" +
    "\045\117\001\002\000\006\020\uffca\037\uffca\001\002\000" +
    "\006\020\uffcb\037\uffcb\001\002\000\006\020\uffc9\037\uffc9" +
    "\001\002\000\004\023\135\001\002\000\020\043\033\046" +
    "\035\047\034\050\031\051\030\075\027\076\032\001\002" +
    "\000\004\073\137\001\002\000\020\043\033\046\035\047" +
    "\034\050\031\051\030\075\027\076\032\001\002\000\004" +
    "\074\141\001\002\000\004\054\142\001\002\000\034\017" +
    "\101\043\033\046\103\047\034\050\031\051\030\062\065" +
    "\063\073\064\072\067\067\072\105\075\027\076\032\001" +
    "\002\000\004\055\144\001\002\000\010\046\uffd0\055\uffd0" +
    "\066\uffd0\001\002\000\010\046\uffeb\055\uffeb\066\uffeb\001" +
    "\002\000\022\017\101\043\033\046\165\047\034\050\031" +
    "\051\030\075\027\076\032\001\002\000\022\020\uff9f\043" +
    "\033\046\035\047\034\050\031\051\030\075\027\076\032" +
    "\001\002\000\004\020\160\001\002\000\006\020\uffe5\036" +
    "\153\001\002\000\004\020\uffe3\001\002\000\020\043\033" +
    "\046\035\047\034\050\031\051\030\075\027\076\032\001" +
    "\002\000\006\020\uffe1\036\156\001\002\000\004\020\uffe4" +
    "\001\002\000\020\043\033\046\035\047\034\050\031\051" +
    "\030\075\027\076\032\001\002\000\004\020\uffe2\001\002" +
    "\000\004\037\161\001\002\000\010\046\uffe6\055\uffe6\066" +
    "\uffe6\001\002\000\010\046\uffea\055\uffea\066\uffea\001\002" +
    "\000\032\005\114\006\121\013\122\015\110\016\120\026" +
    "\116\027\112\030\124\031\115\037\173\044\111\045\117" +
    "\001\002\000\004\037\172\001\002\000\034\005\uffb0\006" +
    "\uffb0\013\uffb0\015\uffb0\016\uffb0\017\166\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\037\uffb0\044\uffb0\045\uffb0\001\002\000" +
    "\022\020\uff9f\043\033\046\035\047\034\050\031\051\030" +
    "\075\027\076\032\001\002\000\004\020\170\001\002\000" +
    "\004\037\171\001\002\000\010\046\uffe7\055\uffe7\066\uffe7" +
    "\001\002\000\010\046\uffe8\055\uffe8\066\uffe8\001\002\000" +
    "\010\046\uffe9\055\uffe9\066\uffe9\001\002\000\004\020\175" +
    "\001\002\000\006\020\uffcc\037\uffcc\001\002\000\006\037" +
    "\uff9f\046\200\001\002\000\004\037\203\001\002\000\006" +
    "\037\uff9f\046\200\001\002\000\004\037\uffd9\001\002\000" +
    "\004\037\uffda\001\002\000\010\046\uffdb\055\uffdb\066\uffdb" +
    "\001\002\000\016\007\235\010\232\011\234\012\233\023" +
    "\230\024\231\001\002\000\004\065\217\001\002\000\022" +
    "\017\206\043\033\046\035\047\034\050\031\051\030\075" +
    "\027\076\032\001\002\000\004\020\210\001\002\000\014" +
    "\020\uff9f\041\213\042\212\065\uff9f\074\uff9f\001\002\000" +
    "\010\020\uffc7\065\uffc7\074\uffc7\001\002\000\022\017\206" +
    "\043\033\046\035\047\034\050\031\051\030\075\027\076" +
    "\032\001\002\000\022\017\206\043\033\046\035\047\034" +
    "\050\031\051\030\075\027\076\032\001\002\000\010\020" +
    "\uffc4\065\uffc4\074\uffc4\001\002\000\010\020\uffc5\065\uffc5" +
    "\074\uffc5\001\002\000\010\020\uffc6\065\uffc6\074\uffc6\001" +
    "\002\000\034\017\101\043\033\046\103\047\034\050\031" +
    "\051\030\062\065\063\073\064\072\067\067\072\105\075" +
    "\027\076\032\001\002\000\006\055\uff9f\066\221\001\002" +
    "\000\034\017\101\043\033\046\103\047\034\050\031\051" +
    "\030\062\065\063\073\064\072\067\067\072\105\075\027" +
    "\076\032\001\002\000\004\055\uffd4\001\002\000\004\055" +
    "\225\001\002\000\004\055\uffd3\001\002\000\010\046\uffd5" +
    "\055\uffd5\066\uffd5\001\002\000\004\055\uffd2\001\002\000" +
    "\020\043\033\046\035\047\034\050\031\051\030\075\027" +
    "\076\032\001\002\000\020\043\uffb2\046\uffb2\047\uffb2\050" +
    "\uffb2\051\uffb2\075\uffb2\076\uffb2\001\002\000\020\043\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\075\uffb1\076\uffb1\001" +
    "\002\000\020\043\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6" +
    "\075\uffb6\076\uffb6\001\002\000\020\043\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\075\uffb4\076\uffb4\001\002\000\020" +
    "\043\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\075\uffb3\076" +
    "\uffb3\001\002\000\020\043\uffb5\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\075\uffb5\076\uffb5\001\002\000\014\020\uff9f\041" +
    "\213\042\212\065\uff9f\074\uff9f\001\002\000\010\020\uffc8" +
    "\065\uffc8\074\uffc8\001\002\000\004\074\241\001\002\000" +
    "\004\054\242\001\002\000\034\017\101\043\033\046\103" +
    "\047\034\050\031\051\030\062\065\063\073\064\072\067" +
    "\067\072\105\075\027\076\032\001\002\000\004\055\244" +
    "\001\002\000\010\046\uffd1\055\uffd1\066\uffd1\001\002\000" +
    "\004\055\251\001\002\000\004\023\247\001\002\000\020" +
    "\043\033\046\035\047\034\050\031\051\030\075\027\076" +
    "\032\001\002\000\004\055\ufff0\001\002\000\014\054\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\061\ufff4\001\002\000\004\037" +
    "\uffdd\001\002\000\004\037\255\001\002\000\004\037\uffdc" +
    "\001\002\000\010\046\uffde\055\uffde\066\uffde\001\002\000" +
    "\034\017\101\043\033\046\103\047\034\050\031\051\030" +
    "\062\065\063\073\064\072\067\067\072\105\075\027\076" +
    "\032\001\002\000\004\055\260\001\002\000\004\002\uffff" +
    "\001\002\000\004\054\ufffd\001\002\000\006\036\264\040" +
    "\265\001\002\000\014\054\ufffa\056\ufffa\057\ufffa\060\ufffa" +
    "\061\ufffa\001\002\000\004\046\262\001\002\000\020\077" +
    "\045\100\047\101\052\102\055\103\053\104\051\105\054" +
    "\001\002\000\004\037\267\001\002\000\014\054\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002\000\014\054\ufff7" +
    "\056\ufff7\057\ufff7\060\ufff7\061\ufff7\001\002\000\004\054" +
    "\ufffe\001\002\000\004\017\273\001\002\000\020\077\045" +
    "\100\047\101\052\102\055\103\053\104\051\105\054\001" +
    "\002\000\004\020\275\001\002\000\004\054\276\001\002" +
    "\000\034\017\101\043\033\046\103\047\034\050\031\051" +
    "\030\062\065\063\073\064\072\067\067\072\105\075\027" +
    "\076\032\001\002\000\004\055\300\001\002\000\014\054" +
    "\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000\004" +
    "\054\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\014" +
    "\012\011\013\013\014\007\055\016\001\001\000\014\004" +
    "\300\012\011\013\013\014\007\055\016\001\001\000\002" +
    "\001\001\000\014\004\270\012\011\013\013\014\007\055" +
    "\016\001\001\000\004\007\262\001\001\000\014\004\260" +
    "\012\011\013\013\014\007\055\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\035\046\025\001\001\000\004\010\024\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\011\047\017\045\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\047\017\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\062\001\001\000\002" +
    "\001\001\000\034\006\065\015\077\021\035\022\103\030" +
    "\073\033\070\034\074\035\076\037\106\041\067\046\105" +
    "\052\101\053\075\001\001\000\006\036\252\055\253\001" +
    "\001\000\004\020\244\001\001\000\010\021\035\043\237" +
    "\046\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\021\035\043\204\046\203\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\035\022\173" +
    "\046\105\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\026\122\027\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\021\035\046\124\001\001\000\002\001\001\000\006\023" +
    "\125\026\126\001\001\000\002\001\001\000\006\021\035" +
    "\046\127\001\001\000\012\023\130\024\131\026\126\055" +
    "\132\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\035\046\135\001" +
    "\001\000\002\001\001\000\006\021\035\046\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\142\015" +
    "\077\021\035\022\103\030\073\033\070\034\074\035\076" +
    "\037\106\041\067\046\105\052\101\053\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\016\161\021\035\022\163\046\162\001\001\000\012\021" +
    "\035\031\147\046\150\055\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\021\035\032" +
    "\154\046\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\021\035\032\156\046\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\122\027\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\021\035\031\166\046\150\055\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\176\055\200\001\001\000" +
    "\002\001\001\000\006\040\201\055\200\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\226\001\001\000\002\001\001\000\010\021\035\043\206" +
    "\046\203\001\001\000\002\001\001\000\006\051\210\055" +
    "\213\001\001\000\002\001\001\000\010\021\035\043\215" +
    "\046\203\001\001\000\010\021\035\043\214\046\203\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\217\015\077\021\035\022\103\030\073\033" +
    "\070\034\074\035\076\037\106\041\067\046\105\052\101" +
    "\053\075\001\001\000\010\042\222\044\221\055\223\001" +
    "\001\000\034\006\225\015\077\021\035\022\103\030\073" +
    "\033\070\034\074\035\076\037\106\041\067\046\105\052" +
    "\101\053\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\035\046\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\051\236\055\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\242\015\077\021\035\022\103\030\073\033\070" +
    "\034\074\035\076\037\106\041\067\046\105\052\101\053" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\035\046\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\256\015\077\021\035\022\103\030\073\033\070" +
    "\034\074\035\076\037\106\041\067\046\105\052\101\053" +
    "\075\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\267\001\001\000\004\011\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\047\017\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\276\015\077\021" +
    "\035\022\103\030\073\033\070\034\074\035\076\037\106" +
    "\041\067\046\105\052\101\053\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		 System.out.println("Correcto!"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= declarar_datos encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= declarar_funciones encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= declarar_procedimientos encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarar_datos ::= VAR variables 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarar_datos ::= CONST constantes 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables ::= IDENTIFICADOR OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variables ::= IDENTIFICADOR OPERADOR_COMA variables 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION valores OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constantes ::= IDENTIFICADOR OPERADOR_COMA constantes 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos BEGIN cuerpo retorno_funcion END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_entrada ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_entrada ::= tipos IDENTIFICADOR OPERADOR_COMA parametros_entrada 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= asignar_valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= expr_read_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo ::= llamar_func_o_proc 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo ::= estruc_de_control 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // asignar_valores ::= expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // asignar_valores ::= IDENTIFICADOR OPERADOR_ASIGNACION _asignar_valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // _asignar_valores ::= valores OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _asignar_valores ::= expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _asignar_valores ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_llamada_func ::= valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_llamada_func ::= valores OPERADOR_COMA _parametros_llamada_func 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_llamada_func ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // _parametros_llamada_func ::= valores OPERADOR_COMA _parametros_llamada_func 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _parametros_llamada_func ::= valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr_read_write ::= expr_read 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_read_write ::= expr_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_read ::= READ _expr_read OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // _expr_read ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // _expr_read ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr_write ::= WRITE IDENTIFICADOR _expr_write OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // _expr_write ::= IDENTIFICADOR _expr_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _expr_write ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // estruc_de_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estruc_de_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estruc_de_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // sentencia_if ::= IF expr_booleanas THEN cuerpo _sentencia_if END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // _sentencia_if ::= sentencia_else 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // _sentencia_if ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // sentencia_else ::= ELSE cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_while ::= WHILE expr_booleanas DO BEGIN cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION valores TO valores DO BEGIN cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr_aritmeticas ::= valores __operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_aritmeticas ::= valores _operadores_aritmeticos valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_aritmeticas ::= valores _operadores_aritmeticos valores _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _expr_aritmeticas ::= _operadores_aritmeticos valores __expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // __expr_aritmeticas ::= _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__expr_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // __expr_aritmeticas ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__expr_aritmeticas",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_booleanas ::= valores operadores_booleanos valores _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _expr_booleanas ::= AND expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _expr_booleanas ::= OR expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _expr_booleanas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _operadores_aritmeticos ::= MOD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _operadores_aritmeticos ::= DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_booleanos ::= OPERADOR_ASIGNACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // valores ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // valores ::= LITERAL_NUM_ENTERO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // valores ::= LITERAL_NUM_FLOTANTE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // valores ::= LITERAL_STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // valores ::= boolean 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("valores",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // boolean ::= NOT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // boolean ::= NOT TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // boolean ::= NOT FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("boolean",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tipos ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tipos ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tipos ::= LONGINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipos ::= REAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipos ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos ::= CHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
