
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import lexico.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\003\004\000\002\004\004\000\002\017\004" +
    "\000\002\013\004\000\002\013\003\000\002\067\003\000" +
    "\002\070\002\000\002\067\005\000\002\014\007\000\002" +
    "\015\003\000\002\015\003\000\002\007\004\000\002\007" +
    "\003\000\002\066\003\000\002\071\002\000\002\066\005" +
    "\000\002\010\004\000\002\011\003\000\002\011\004\000" +
    "\002\012\005\000\002\012\006\000\002\020\004\000\002" +
    "\020\004\000\002\020\003\000\002\072\002\000\002\020" +
    "\006\000\002\022\016\000\002\022\015\000\002\023\013" +
    "\000\002\023\012\000\002\031\006\000\002\031\002\000" +
    "\002\026\003\000\002\026\003\000\002\027\005\000\002" +
    "\030\004\000\002\030\003\000\002\005\004\000\002\005" +
    "\004\000\002\005\003\000\002\005\003\000\002\006\003" +
    "\000\002\006\003\000\002\021\003\000\002\021\004\000" +
    "\002\021\003\000\002\021\004\000\002\073\002\000\002" +
    "\021\005\000\002\024\006\000\002\025\005\000\002\025" +
    "\004\000\002\025\004\000\002\025\006\000\002\025\006" +
    "\000\002\043\006\000\002\041\005\000\002\041\003\000" +
    "\002\041\003\000\002\042\005\000\002\042\003\000\002" +
    "\044\003\000\002\044\003\000\002\045\007\000\002\074" +
    "\002\000\002\045\006\000\002\046\003\000\002\046\003" +
    "\000\002\047\010\000\002\075\002\000\002\047\006\000" +
    "\002\050\005\000\002\050\003\000\002\040\003\000\002" +
    "\040\003\000\002\040\003\000\002\051\010\000\002\076" +
    "\002\000\002\051\006\000\002\052\003\000\002\052\003" +
    "\000\002\054\004\000\002\060\010\000\002\077\002\000" +
    "\002\060\006\000\002\061\014\000\002\100\002\000\002" +
    "\061\006\000\002\032\004\000\002\032\004\000\002\032" +
    "\006\000\002\033\004\000\002\033\003\000\002\053\004" +
    "\000\002\053\006\000\002\053\006\000\002\057\004\000" +
    "\002\057\004\000\002\057\003\000\002\034\003\000\002" +
    "\034\003\000\002\034\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\036\003\000\002\036\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\062\003\000\002\062\003\000\002\062" +
    "\003\000\002\062\003\000\002\062\003\000\002\063\003" +
    "\000\002\063\003\000\002\055\003\000\002\055\003\000" +
    "\002\056\003\000\002\056\003\000\002\056\003\000\002" +
    "\056\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\004\000\002\064\004\000\002\064\004\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\065\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\u0103\001\002\000\006\003\007\046\010" +
    "\001\002\000\004\002\ufffe\001\002\000\016\003\uff73\054" +
    "\uff73\056\011\057\uff73\060\uff73\061\uff73\001\002\000\006" +
    "\003\371\046\372\001\002\000\012\003\313\054\uff73\060" +
    "\316\061\312\001\002\000\014\003\uff73\054\uff73\057\261" +
    "\060\uff73\061\uff73\001\002\000\014\003\ufffa\054\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\004\054\016\001\002" +
    "\000\026\003\037\005\026\006\030\046\040\055\uff73\062" +
    "\020\063\027\064\025\067\022\072\044\001\002\000\030" +
    "\003\uffd7\005\uffd7\006\uffd7\046\uffd7\055\uffd7\062\uffd7\063" +
    "\uffd7\064\uffd7\066\uffd7\067\uffd7\072\uffd7\001\002\000\006" +
    "\003\250\017\251\001\002\000\030\003\037\005\026\006" +
    "\030\046\040\055\uffd5\062\020\063\027\064\025\066\uffd5" +
    "\067\022\072\044\001\002\000\024\003\237\017\174\043" +
    "\061\046\063\047\062\050\055\051\054\075\053\076\056" +
    "\001\002\000\030\003\uffb5\005\uffb5\006\uffb5\046\uffb5\055" +
    "\uffb5\062\uffb5\063\uffb5\064\uffb5\066\uffb5\067\uffb5\072\uffb5" +
    "\001\002\000\004\037\235\001\002\000\024\003\175\017" +
    "\174\043\061\046\063\047\062\050\055\051\054\075\053" +
    "\076\056\001\002\000\006\037\uff92\046\uff92\001\002\000" +
    "\006\003\157\017\160\001\002\000\006\037\uff91\046\uff91" +
    "\001\002\000\030\003\uffd6\005\uffd6\006\uffd6\046\uffd6\055" +
    "\uffd6\062\uffd6\063\uffd6\064\uffd6\066\uffd6\067\uffd6\072\uffd6" +
    "\001\002\000\030\003\uffd1\005\uffd1\006\uffd1\046\uffd1\055" +
    "\uffd1\062\uffd1\063\uffd1\064\uffd1\066\uffd1\067\uffd1\072\uffd1" +
    "\001\002\000\004\055\156\001\002\000\030\003\uffb3\005" +
    "\uffb3\006\uffb3\046\uffb3\055\uffb3\062\uffb3\063\uffb3\064\uffb3" +
    "\066\uffb3\067\uffb3\072\uffb3\001\002\000\030\003\uffc1\005" +
    "\uffc1\006\uffc1\046\uffc1\055\uffc1\062\uffc1\063\uffc1\064\uffc1" +
    "\066\uffc1\067\uffc1\072\uffc1\001\002\000\004\046\155\001" +
    "\002\000\004\037\uffcf\001\002\000\022\005\026\006\030" +
    "\017\104\023\102\026\106\027\100\030\107\031\105\001" +
    "\002\000\030\003\uffb4\005\uffb4\006\uffb4\046\uffb4\055\uffb4" +
    "\062\uffb4\063\uffb4\064\uffb4\066\uffb4\067\uffb4\072\uffb4\001" +
    "\002\000\004\037\077\001\002\000\030\003\uffd3\005\uffd3" +
    "\006\uffd3\046\uffd3\055\uffd3\062\uffd3\063\uffd3\064\uffd3\066" +
    "\uffd3\067\uffd3\072\uffd3\001\002\000\006\003\047\046\050" +
    "\001\002\000\006\055\uffd4\066\uffd4\001\002\000\030\003" +
    "\uffc0\005\uffc0\006\uffc0\046\uffc0\055\uffc0\062\uffc0\063\uffc0" +
    "\064\uffc0\066\uffc0\067\uffc0\072\uffc0\001\002\000\004\055" +
    "\uffa8\001\002\000\004\023\051\001\002\000\020\043\061" +
    "\046\063\047\062\050\055\051\054\075\053\076\056\001" +
    "\002\000\052\007\uff85\010\uff85\011\uff85\012\uff85\013\uff85" +
    "\014\uff85\015\uff85\016\uff85\020\uff85\024\uff85\025\uff85\036" +
    "\uff85\037\uff85\041\uff85\042\uff85\044\uff85\045\uff85\065\uff85" +
    "\073\uff85\074\uff85\001\002\000\052\007\uff7f\010\uff7f\011" +
    "\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\016\uff7f\020\uff7f" +
    "\024\uff7f\025\uff7f\036\uff7f\037\uff7f\041\uff7f\042\uff7f\044" +
    "\uff7f\045\uff7f\065\uff7f\073\uff7f\074\uff7f\001\002\000\052" +
    "\007\uff82\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\015" +
    "\uff82\016\uff82\020\uff82\024\uff82\025\uff82\036\uff82\037\uff82" +
    "\041\uff82\042\uff82\044\uff82\045\uff82\065\uff82\073\uff82\074" +
    "\uff82\001\002\000\052\007\uff80\010\uff80\011\uff80\012\uff80" +
    "\013\uff80\014\uff80\015\uff80\016\uff80\020\uff80\024\uff80\025" +
    "\uff80\036\uff80\037\uff80\041\uff80\042\uff80\044\uff80\045\uff80" +
    "\065\uff80\073\uff80\074\uff80\001\002\000\052\007\uff7e\010" +
    "\uff7e\011\uff7e\012\uff7e\013\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\020\uff7e\024\uff7e\025\uff7e\036\uff7e\037\uff7e\041\uff7e\042" +
    "\uff7e\044\uff7e\045\uff7e\065\uff7e\073\uff7e\074\uff7e\001\002" +
    "\000\004\073\067\001\002\000\036\013\uff84\014\uff84\015" +
    "\uff84\016\uff84\020\uff84\036\uff84\037\uff84\041\uff84\042\uff84" +
    "\044\uff84\045\uff84\065\uff84\073\uff84\074\uff84\001\002\000" +
    "\010\046\064\075\065\076\066\001\002\000\052\007\uff81" +
    "\010\uff81\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\016" +
    "\uff81\020\uff81\024\uff81\025\uff81\036\uff81\037\uff81\041\uff81" +
    "\042\uff81\044\uff81\045\uff81\065\uff81\073\uff81\074\uff81\001" +
    "\002\000\036\007\uff83\010\uff83\011\uff83\012\uff83\020\uff83" +
    "\024\uff83\025\uff83\036\uff83\037\uff83\041\uff83\042\uff83\065" +
    "\uff83\073\uff83\074\uff83\001\002\000\052\007\uff7d\010\uff7d" +
    "\011\uff7d\012\uff7d\013\uff7d\014\uff7d\015\uff7d\016\uff7d\020" +
    "\uff7d\024\uff7d\025\uff7d\036\uff7d\037\uff7d\041\uff7d\042\uff7d" +
    "\044\uff7d\045\uff7d\065\uff7d\073\uff7d\074\uff7d\001\002\000" +
    "\052\007\uff7c\010\uff7c\011\uff7c\012\uff7c\013\uff7c\014\uff7c" +
    "\015\uff7c\016\uff7c\020\uff7c\024\uff7c\025\uff7c\036\uff7c\037" +
    "\uff7c\041\uff7c\042\uff7c\044\uff7c\045\uff7c\065\uff7c\073\uff7c" +
    "\074\uff7c\001\002\000\052\007\uff7b\010\uff7b\011\uff7b\012" +
    "\uff7b\013\uff7b\014\uff7b\015\uff7b\016\uff7b\020\uff7b\024\uff7b" +
    "\025\uff7b\036\uff7b\037\uff7b\041\uff7b\042\uff7b\044\uff7b\045" +
    "\uff7b\065\uff7b\073\uff7b\074\uff7b\001\002\000\020\043\061" +
    "\046\063\047\062\050\055\051\054\075\053\076\056\001" +
    "\002\000\004\074\071\001\002\000\004\054\072\001\002" +
    "\000\026\003\037\005\026\006\030\046\040\055\uff73\062" +
    "\020\063\027\064\025\067\022\072\044\001\002\000\004" +
    "\055\074\001\002\000\030\003\uffa9\005\uffa9\006\uffa9\046" +
    "\uffa9\055\uffa9\062\uffa9\063\uffa9\064\uffa9\066\uffa9\067\uffa9" +
    "\072\uffa9\001\002\000\004\055\076\001\002\000\030\003" +
    "\uffa7\005\uffa7\006\uffa7\046\uffa7\055\uffa7\062\uffa7\063\uffa7" +
    "\064\uffa7\066\uffa7\067\uffa7\072\uffa7\001\002\000\030\003" +
    "\uffd2\005\uffd2\006\uffd2\046\uffd2\055\uffd2\062\uffd2\063\uffd2" +
    "\064\uffd2\066\uffd2\067\uffd2\072\uffd2\001\002\000\022\017" +
    "\uff8f\043\uff8f\046\uff8f\047\uff8f\050\uff8f\051\uff8f\075\uff8f" +
    "\076\uff8f\001\002\000\004\037\uffcb\001\002\000\026\005" +
    "\026\006\030\017\112\043\061\046\147\047\062\050\055" +
    "\051\054\075\053\076\056\001\002\000\022\017\112\043" +
    "\061\046\116\047\062\050\055\051\054\075\053\076\056" +
    "\001\002\000\024\017\112\020\uff73\043\061\046\116\047" +
    "\062\050\055\051\054\075\053\076\056\001\002\000\022" +
    "\017\uff8d\043\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\075" +
    "\uff8d\076\uff8d\001\002\000\022\017\uff90\043\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\075\uff90\076\uff90\001\002\000" +
    "\022\017\uff8e\043\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e" +
    "\075\uff8e\076\uff8e\001\002\000\004\020\143\001\002\000" +
    "\024\013\125\014\120\015\121\016\124\020\uff73\036\uff73" +
    "\037\uff73\044\122\045\123\001\002\000\022\017\112\043" +
    "\061\046\116\047\062\050\055\051\054\075\053\076\056" +
    "\001\002\000\006\020\uffc5\036\131\001\002\000\024\013" +
    "\125\014\120\015\121\016\124\020\uff73\036\uff73\037\uff73" +
    "\044\122\045\123\001\002\000\004\020\uffc4\001\002\000" +
    "\026\013\uff83\014\uff83\015\uff83\016\uff83\017\104\020\uff83" +
    "\036\uff83\037\uff83\044\uff83\045\uff83\001\002\000\010\020" +
    "\uffa6\036\uffa6\037\uffa6\001\002\000\022\017\uff97\043\uff97" +
    "\046\uff97\047\uff97\050\uff97\051\uff97\075\uff97\076\uff97\001" +
    "\002\000\022\017\uff96\043\uff96\046\uff96\047\uff96\050\uff96" +
    "\051\uff96\075\uff96\076\uff96\001\002\000\022\017\uff94\043" +
    "\uff94\046\uff94\047\uff94\050\uff94\051\uff94\075\uff94\076\uff94" +
    "\001\002\000\022\017\uff93\043\uff93\046\uff93\047\uff93\050" +
    "\uff93\051\uff93\075\uff93\076\uff93\001\002\000\022\017\uff95" +
    "\043\uff95\046\uff95\047\uff95\050\uff95\051\uff95\075\uff95\076" +
    "\uff95\001\002\000\022\017\uff98\043\uff98\046\uff98\047\uff98" +
    "\050\uff98\051\uff98\075\uff98\076\uff98\001\002\000\010\020" +
    "\uffa2\036\uffa2\037\uffa2\001\002\000\022\017\112\043\061" +
    "\046\116\047\062\050\055\051\054\075\053\076\056\001" +
    "\002\000\010\020\uffa3\036\uffa3\037\uffa3\001\002\000\022" +
    "\017\112\043\061\046\116\047\062\050\055\051\054\075" +
    "\053\076\056\001\002\000\004\036\135\001\002\000\004" +
    "\020\uffc6\001\002\000\022\013\125\014\120\015\121\016" +
    "\124\020\uffc2\036\uff73\044\122\045\123\001\002\000\022" +
    "\017\112\043\061\046\116\047\062\050\055\051\054\075" +
    "\053\076\056\001\002\000\004\020\uffc3\001\002\000\004" +
    "\020\140\001\002\000\024\013\125\014\120\015\121\016" +
    "\124\020\uff73\036\uff73\037\uff73\044\122\045\123\001\002" +
    "\000\010\020\uffa4\036\uffa4\037\uffa4\001\002\000\010\020" +
    "\uffa5\036\uffa5\037\uffa5\001\002\000\024\013\uffc7\014\uffc7" +
    "\015\uffc7\016\uffc7\020\uffc7\036\uffc7\037\uffc7\044\uffc7\045" +
    "\uffc7\001\002\000\004\037\uffcc\001\002\000\004\046\152" +
    "\001\002\000\004\037\151\001\002\000\026\005\026\006" +
    "\030\013\uff83\014\uff83\015\uff83\016\uff83\017\104\037\uff83" +
    "\044\uff83\045\uff83\001\002\000\004\037\uffc9\001\002\000" +
    "\030\003\uffcd\005\uffcd\006\uffcd\046\uffcd\055\uffcd\062\uffcd" +
    "\063\uffcd\064\uffcd\066\uffcd\067\uffcd\072\uffcd\001\002\000" +
    "\004\037\uffc8\001\002\000\004\037\154\001\002\000\030" +
    "\003\uffce\005\uffce\006\uffce\046\uffce\055\uffce\062\uffce\063" +
    "\uffce\064\uffce\066\uffce\067\uffce\072\uffce\001\002\000\004" +
    "\037\uffca\001\002\000\004\002\uffff\001\002\000\004\037" +
    "\uffb9\001\002\000\012\046\063\047\062\050\055\051\054" +
    "\001\002\000\006\020\uff73\036\163\001\002\000\004\020" +
    "\167\001\002\000\012\046\063\047\062\050\055\051\054" +
    "\001\002\000\004\020\uffb6\001\002\000\006\020\uff73\036" +
    "\163\001\002\000\004\020\uffb7\001\002\000\004\037\170" +
    "\001\002\000\030\003\uffba\005\uffba\006\uffba\046\uffba\055" +
    "\uffba\062\uffba\063\uffba\064\uffba\066\uffba\067\uffba\072\uffba" +
    "\001\002\000\004\037\172\001\002\000\030\003\uffb8\005" +
    "\uffb8\006\uffb8\046\uffb8\055\uffb8\062\uffb8\063\uffb8\064\uffb8" +
    "\066\uffb8\067\uffb8\072\uffb8\001\002\000\004\065\225\001" +
    "\002\000\022\017\174\043\061\046\063\047\062\050\055" +
    "\051\054\075\053\076\056\001\002\000\004\055\uffb1\001" +
    "\002\000\016\007\214\010\210\011\213\012\211\024\212" +
    "\025\207\001\002\000\030\007\uff84\010\uff84\011\uff84\012" +
    "\uff84\020\uff73\024\uff84\025\uff84\041\202\042\201\065\uff73" +
    "\074\uff73\001\002\000\010\020\uffa1\065\uffa1\074\uffa1\001" +
    "\002\000\022\017\174\043\061\046\063\047\062\050\055" +
    "\051\054\075\053\076\056\001\002\000\022\017\174\043" +
    "\061\046\063\047\062\050\055\051\054\075\053\076\056" +
    "\001\002\000\010\020\uff9c\065\uff9c\074\uff9c\001\002\000" +
    "\010\020\uff9d\065\uff9d\074\uff9d\001\002\000\010\020\uff9e" +
    "\065\uff9e\074\uff9e\001\002\000\020\043\uff87\046\uff87\047" +
    "\uff87\050\uff87\051\uff87\075\uff87\076\uff87\001\002\000\020" +
    "\043\uff88\046\uff88\047\uff88\050\uff88\051\uff88\075\uff88\076" +
    "\uff88\001\002\000\020\043\uff8c\046\uff8c\047\uff8c\050\uff8c" +
    "\051\uff8c\075\uff8c\076\uff8c\001\002\000\020\043\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\075\uff8a\076\uff8a\001\002" +
    "\000\020\043\uff86\046\uff86\047\uff86\050\uff86\051\uff86\075" +
    "\uff86\076\uff86\001\002\000\020\043\uff89\046\uff89\047\uff89" +
    "\050\uff89\051\uff89\075\uff89\076\uff89\001\002\000\020\043" +
    "\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\075\uff8b\076\uff8b" +
    "\001\002\000\020\043\061\046\063\047\062\050\055\051" +
    "\054\075\053\076\056\001\002\000\014\020\uff73\041\202" +
    "\042\201\065\uff73\074\uff73\001\002\000\010\020\uffa0\065" +
    "\uffa0\074\uffa0\001\002\000\004\055\221\001\002\000\030" +
    "\003\uffb0\005\uffb0\006\uffb0\046\uffb0\055\uffb0\062\uffb0\063" +
    "\uffb0\064\uffb0\066\uffb0\067\uffb0\072\uffb0\001\002\000\004" +
    "\020\223\001\002\000\014\020\uff73\041\202\042\201\065" +
    "\uff73\074\uff73\001\002\000\010\020\uff9f\065\uff9f\074\uff9f" +
    "\001\002\000\030\003\037\005\026\006\030\046\040\055" +
    "\uff73\062\020\063\027\064\025\066\uff73\067\022\072\044" +
    "\001\002\000\006\055\uff73\066\227\001\002\000\026\003" +
    "\037\005\026\006\030\046\040\055\uff73\062\020\063\027" +
    "\064\025\067\022\072\044\001\002\000\004\055\uffaf\001" +
    "\002\000\004\055\233\001\002\000\004\055\uffae\001\002" +
    "\000\030\003\uffb2\005\uffb2\006\uffb2\046\uffb2\055\uffb2\062" +
    "\uffb2\063\uffb2\064\uffb2\066\uffb2\067\uffb2\072\uffb2\001\002" +
    "\000\004\055\uffad\001\002\000\030\003\uffd0\005\uffd0\006" +
    "\uffd0\046\uffd0\055\uffd0\062\uffd0\063\uffd0\064\uffd0\066\uffd0" +
    "\067\uffd0\072\uffd0\001\002\000\004\074\242\001\002\000" +
    "\004\055\uffab\001\002\000\004\055\241\001\002\000\030" +
    "\003\uffaa\005\uffaa\006\uffaa\046\uffaa\055\uffaa\062\uffaa\063" +
    "\uffaa\064\uffaa\066\uffaa\067\uffaa\072\uffaa\001\002\000\004" +
    "\054\243\001\002\000\026\003\037\005\026\006\030\046" +
    "\040\055\uff73\062\020\063\027\064\025\067\022\072\044" +
    "\001\002\000\004\055\245\001\002\000\030\003\uffac\005" +
    "\uffac\006\uffac\046\uffac\055\uffac\062\uffac\063\uffac\064\uffac" +
    "\066\uffac\067\uffac\072\uffac\001\002\000\030\003\uffd9\005" +
    "\uffd9\006\uffd9\046\uffd9\055\uffd9\062\uffd9\063\uffd9\064\uffd9" +
    "\066\uffd9\067\uffd9\072\uffd9\001\002\000\030\003\uffd8\005" +
    "\uffd8\006\uffd8\046\uffd8\055\uffd8\062\uffd8\063\uffd8\064\uffd8" +
    "\066\uffd8\067\uffd8\072\uffd8\001\002\000\004\037\uffbe\001" +
    "\002\000\014\020\uff73\046\063\047\062\050\055\051\054" +
    "\001\002\000\004\020\uffbc\001\002\000\004\020\255\001" +
    "\002\000\004\020\uffbb\001\002\000\004\037\256\001\002" +
    "\000\030\003\uffbf\005\uffbf\006\uffbf\046\uffbf\055\uffbf\062" +
    "\uffbf\063\uffbf\064\uffbf\066\uffbf\067\uffbf\072\uffbf\001\002" +
    "\000\004\037\260\001\002\000\030\003\uffbd\005\uffbd\006" +
    "\uffbd\046\uffbd\055\uffbd\062\uffbd\063\uffbd\064\uffbd\066\uffbd" +
    "\067\uffbd\072\uffbd\001\002\000\006\003\266\046\267\001" +
    "\002\000\012\003\ufff2\054\ufff2\060\ufff2\061\ufff2\001\002" +
    "\000\012\003\ufffc\054\ufffc\060\ufffc\061\ufffc\001\002\000" +
    "\012\003\ufff1\054\ufff1\060\ufff1\061\ufff1\001\002\000\012" +
    "\003\ufff3\054\ufff3\060\ufff3\061\ufff3\001\002\000\004\037" +
    "\ufff0\001\002\000\006\036\272\040\273\001\002\000\012" +
    "\003\uffed\054\uffed\060\uffed\061\uffed\001\002\000\012\003" +
    "\uffee\054\uffee\060\uffee\061\uffee\001\002\000\004\046\267" +
    "\001\002\000\020\077\303\100\277\101\276\102\302\103" +
    "\274\104\301\105\275\001\002\000\014\037\uff76\046\uff76" +
    "\054\uff76\056\uff76\057\uff76\001\002\000\014\037\uff77\046" +
    "\uff77\054\uff77\056\uff77\057\uff77\001\002\000\014\037\uff79" +
    "\046\uff79\054\uff79\056\uff79\057\uff79\001\002\000\014\037" +
    "\uff78\046\uff78\054\uff78\056\uff78\057\uff78\001\002\000\004" +
    "\037\304\001\002\000\014\037\uff74\046\uff74\054\uff74\056" +
    "\uff74\057\uff74\001\002\000\014\037\uff75\046\uff75\054\uff75" +
    "\056\uff75\057\uff75\001\002\000\014\037\uff7a\046\uff7a\054" +
    "\uff7a\056\uff7a\057\uff7a\001\002\000\014\003\uffeb\046\267" +
    "\054\uffeb\060\uffeb\061\uffeb\001\002\000\012\003\uffea\054" +
    "\uffea\060\uffea\061\uffea\001\002\000\012\003\uffec\054\uffec" +
    "\060\uffec\061\uffec\001\002\000\004\037\310\001\002\000" +
    "\012\003\uffef\054\uffef\060\uffef\061\uffef\001\002\000\012" +
    "\003\313\054\uff73\060\316\061\312\001\002\000\004\046" +
    "\355\001\002\000\004\055\uffe6\001\002\000\012\003\313" +
    "\054\uff73\060\316\061\312\001\002\000\004\054\ufffd\001" +
    "\002\000\004\046\320\001\002\000\004\054\uffe7\001\002" +
    "\000\004\017\321\001\002\000\022\020\uff73\077\303\100" +
    "\277\101\276\102\302\103\274\104\301\105\275\001\002" +
    "\000\004\020\333\001\002\000\004\046\326\001\002\000" +
    "\004\020\uffde\001\002\000\004\020\uffdd\001\002\000\006" +
    "\020\uff73\036\327\001\002\000\020\077\303\100\277\101" +
    "\276\102\302\103\274\104\301\105\275\001\002\000\004" +
    "\020\uffdc\001\002\000\004\020\uffda\001\002\000\004\020" +
    "\uffdb\001\002\000\004\040\334\001\002\000\020\077\303" +
    "\100\277\101\276\102\302\103\274\104\301\105\275\001" +
    "\002\000\010\054\uff73\056\011\057\uff73\001\002\000\004" +
    "\054\337\001\002\000\026\003\037\005\026\006\030\046" +
    "\342\055\uffdf\062\020\063\027\064\025\067\022\072\044" +
    "\001\002\000\004\055\350\001\002\000\024\003\037\005" +
    "\026\006\030\046\040\062\020\063\027\064\025\067\022" +
    "\072\044\001\002\000\022\005\026\006\030\017\104\023" +
    "\343\026\106\027\100\030\107\031\105\001\002\000\026" +
    "\005\026\006\030\017\112\043\061\046\147\047\062\050" +
    "\055\051\054\075\053\076\056\001\002\000\004\037\345" +
    "\001\002\000\026\003\uffcd\005\uffcd\006\uffcd\046\uffcd\055" +
    "\uffe0\062\uffcd\063\uffcd\064\uffcd\067\uffcd\072\uffcd\001\002" +
    "\000\026\003\uffd3\005\uffd3\006\uffd3\046\uffd3\055\347\062" +
    "\uffd3\063\uffd3\064\uffd3\067\uffd3\072\uffd3\001\002\000\012" +
    "\003\uffe4\054\uffe4\060\uffe4\061\uffe4\001\002\000\012\003" +
    "\uffe3\054\uffe3\060\uffe3\061\uffe3\001\002\000\004\054\uffe9" +
    "\001\002\000\004\055\353\001\002\000\012\003\313\054" +
    "\uff73\060\316\061\312\001\002\000\004\054\uffe5\001\002" +
    "\000\004\017\356\001\002\000\022\020\uff73\077\303\100" +
    "\277\101\276\102\302\103\274\104\301\105\275\001\002" +
    "\000\004\020\360\001\002\000\010\054\uff73\056\011\057" +
    "\uff73\001\002\000\004\054\362\001\002\000\026\003\037" +
    "\005\026\006\030\046\040\055\364\062\020\063\027\064" +
    "\025\067\022\072\044\001\002\000\026\003\037\005\026" +
    "\006\030\046\040\055\365\062\020\063\027\064\025\067" +
    "\022\072\044\001\002\000\012\003\uffe1\054\uffe1\060\uffe1" +
    "\061\uffe1\001\002\000\012\003\uffe2\054\uffe2\060\uffe2\061" +
    "\uffe2\001\002\000\004\054\uffe8\001\002\000\014\003\ufffb" +
    "\054\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002\000\014\003" +
    "\ufff9\054\ufff9\057\ufff9\060\ufff9\061\ufff9\001\002\000\004" +
    "\037\ufff8\001\002\000\004\024\373\001\002\000\020\043" +
    "\061\046\063\047\062\050\055\051\054\075\053\076\056" +
    "\001\002\000\004\037\375\001\002\000\016\003\uff73\046" +
    "\372\054\uff73\057\uff73\060\uff73\061\uff73\001\002\000\014" +
    "\003\ufff5\054\ufff5\057\ufff5\060\ufff5\061\ufff5\001\002\000" +
    "\014\003\ufff6\054\ufff6\057\ufff6\060\ufff6\061\ufff6\001\002" +
    "\000\014\003\ufff4\054\ufff4\057\ufff4\060\ufff4\061\ufff4\001" +
    "\002\000\004\037\u0102\001\002\000\014\003\ufff7\054\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\014\013\012\017\011\065\013\001\001\000" +
    "\006\014\367\067\366\001\001\000\012\020\314\022\313" +
    "\023\310\065\316\001\001\000\006\007\262\065\261\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\005\020" +
    "\006\032\021\016\024\042\025\041\036\035\040\030\043" +
    "\023\044\031\045\034\047\045\051\022\060\040\061\033" +
    "\065\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\021\245\024\042\025\041\036\035\040\246\043\023" +
    "\044\031\045\034\047\045\051\022\060\040\061\033\001" +
    "\001\000\012\053\235\055\175\056\051\064\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\053\172\055" +
    "\175\056\051\064\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\073\152\001\001\000\006\036" +
    "\100\037\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\100\074\001\001\000\002\001\001" +
    "\000\010\055\056\056\051\064\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\055" +
    "\067\056\051\064\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\040\005\020\006\072\021\016\024\042\025" +
    "\041\036\035\040\030\043\023\044\031\045\034\047\045" +
    "\051\022\060\040\061\033\065\044\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\032\145\036\144\043\110\055\113\056\051\064\057" +
    "\001\001\000\014\032\143\043\110\055\113\056\051\064" +
    "\057\001\001\000\020\032\112\041\107\043\110\055\113" +
    "\056\051\064\057\065\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\033\141\035\126\065\125\001\001\000\014\032\136\043" +
    "\110\055\113\056\051\064\057\001\001\000\002\001\001" +
    "\000\010\033\116\035\126\065\125\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\032\127\043\110\055\113\056\051\064\057\001\001\000" +
    "\002\001\001\000\016\032\131\042\132\043\110\055\133" +
    "\056\051\064\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\116\035\126\065\125\001\001\000\016" +
    "\032\131\042\135\043\110\055\133\056\051\064\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\140" +
    "\035\126\065\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\036\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\170\001\001\000\004\056\160\001\001\000\006" +
    "\050\161\065\163\001\001\000\002\001\001\000\004\056" +
    "\164\001\001\000\002\001\001\000\006\050\165\065\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\053\221\055\175\056\051\064\176\001\001\000" +
    "\004\076\217\001\001\000\006\062\205\063\214\001\001" +
    "\000\006\057\177\065\202\001\001\000\002\001\001\000" +
    "\012\053\204\055\175\056\051\064\176\001\001\000\012" +
    "\053\203\055\175\056\051\064\176\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\055\215\056\051\064\057\001\001\000\006\057\216\065" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\057\223\065\202\001" +
    "\001\000\002\001\001\000\040\005\020\006\225\021\016" +
    "\024\042\025\041\036\035\040\030\043\023\044\031\045" +
    "\034\047\045\051\022\060\040\061\033\065\044\001\001" +
    "\000\010\052\230\054\227\065\231\001\001\000\040\005" +
    "\020\006\233\021\016\024\042\025\041\036\035\040\030" +
    "\043\023\044\031\045\034\047\045\051\022\060\040\061" +
    "\033\065\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\077\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\005\020\006\243\021\016\024\042\025\041\036\035" +
    "\040\030\043\023\044\031\045\034\047\045\051\022\060" +
    "\040\061\033\065\044\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\074" +
    "\256\001\001\000\010\046\252\056\251\065\253\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\263\066\264\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\071\306\001\001\000\006\011\270\012\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\305" +
    "\001\001\000\004\016\277\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\020" +
    "\365\022\313\023\310\065\316\001\001\000\002\001\001" +
    "\000\004\072\351\001\001\000\012\020\350\022\313\023" +
    "\310\065\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\322\026" +
    "\321\027\323\065\324\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\030" +
    "\327\065\330\001\001\000\006\016\322\027\331\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\334\001\001\000\010\013\012" +
    "\017\335\065\013\001\001\000\002\001\001\000\036\005" +
    "\340\021\016\024\042\025\041\031\337\036\035\040\030" +
    "\043\023\044\031\045\034\047\045\051\022\060\040\061" +
    "\033\001\001\000\002\001\001\000\032\021\245\024\345" +
    "\025\041\036\035\040\246\043\023\044\031\045\034\047" +
    "\045\051\022\060\040\061\033\001\001\000\006\036\100" +
    "\037\102\001\001\000\016\032\343\036\144\043\110\055" +
    "\113\056\051\064\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\353" +
    "\022\313\023\310\065\316\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\322\026\356\027\323\065\324" +
    "\001\001\000\002\001\001\000\010\013\012\017\360\065" +
    "\013\001\001\000\002\001\001\000\034\005\362\021\016" +
    "\024\042\025\041\036\035\040\030\043\023\044\031\045" +
    "\034\047\045\051\022\060\040\061\033\001\001\000\032" +
    "\021\245\024\042\025\041\036\035\040\246\043\023\044" +
    "\031\045\034\047\045\051\022\060\040\061\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\u0100\001\001" +
    "\000\002\001\001\000\010\055\373\056\051\064\057\001" +
    "\001\000\002\001\001\000\010\014\375\015\376\065\377" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    @Override
    protected int error_sync_size(){
        return 1;
    }

    private Symbol tokenError;

    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;
            tokenError = s;

            //System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        try
        {
            String lexema = s.value.toString();
            int fila = s.left + 1;
            int columna = s.right;

            String mensaje = "Error sintáctico irrecuperable, con el símbolo: " + lexema;
            ErrorUI(mensaje, lexema, fila, columna);

            //System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
        }catch(Exception e) {}
    }

    public void report_error(String message, Object info)
    {
        if (info instanceof String){
            System.out.println(message);
        }
        else {
            if (info instanceof Symbol){
                String m = "Error sintático en: " + message;
                Symbol s = (Symbol)info;
                m += ", con el símbolo: \"" + s.value.toString() + "\"";
                ErrorUI(m, s.value.toString(), (s.left+1), s.right);
            }else{
                System.err.println(message);
            }
        }
    }

    public void ErrorUI(String pMsg, String token, int linea, int columna)
    {
        String msg = pMsg + ". En la línea: " + (linea) + ", columna: " + (columna) + ".";

        Main.miInstancia.agregarErrorSintactico(msg);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programa ::= PROGRAM error 
            {
              Symbol RESULT =null;
		
                    report_error("PROGRAM", tokenError);
                    RESULT = new Symbol(-1);
                
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= declarar_datos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarar_datos ::= constantes variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // constantes ::= CONST decl_constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_constantes ::= _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("decl_constantes",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              Symbol RESULT =null;

                            report_error("Declaración de constante", tokenError);
                            RESULT = new Symbol(-1);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$0",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl_constantes ::= error NT$0 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("decl_constantes",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION_2 tokens OPERADOR_PUNTO_Y_COMA __constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // __constantes ::= _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // __constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // variables ::= VAR decl_variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl_variables ::= _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("decl_variables",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$1 ::= 
            {
              Symbol RESULT =null;

                            report_error("Declaración de variable", tokenError);
                            RESULT = new Symbol(-1);
                        
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$1",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // decl_variables ::= error NT$1 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("decl_variables",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _variables ::= IDENTIFICADOR __variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_variables",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // __variables ::= ___variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // __variables ::= OPERADOR_COMA _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ___variables ::= OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ___variables ::= OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarar_func_proc ::= declarar_funciones declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarar_func_proc ::= declarar_procedimientos declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarar_func_proc ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$2 ::= 
            {
              Symbol RESULT =null;

                             report_error("Declaración de función o procedimiento", tokenError);
                             RESULT = new Symbol(-1);
                         
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$2",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // declarar_func_proc ::= error NT$2 END declarar_func_proc 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos BEGIN cuerpo asignar_valores_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos declarar_datos BEGIN retorno_funcion END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos BEGIN cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR declarar_datos BEGIN END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // retorno_funcion ::= 
            {
              Symbol RESULT =null;
		  //es aceptado pero se reporta como error
                        Symbol tokenAct = (Symbol)CUP$Syntax$stack.peek();
                        report_error("Retorno de función", tokenAct);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parametros_entrada ::= _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // _parametros_entrada ::= tipos IDENTIFICADOR __parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_entrada",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // __parametros_entrada ::= OPERADOR_COMA _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // __parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // cuerpo ::= cuerpo instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // cuerpo ::= cuerpo estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cuerpo ::= instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cuerpo ::= estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // _cuerpo ::= cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // _cuerpo ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // instrucciones ::= asignar_valores_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // instrucciones ::= asignar_valores_2 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // instrucciones ::= expr_read_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // instrucciones ::= llamar_func_o_proc OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$3 ::= 
            {
              Symbol RESULT =null;

                         report_error("Expresión", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$3",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // instrucciones ::= error NT$3 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // asignar_valores_1 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_1",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // asignar_valores_2 ::= IDENTIFICADOR ___operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // asignar_valores_2 ::= IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // asignar_valores_2 ::= __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // asignar_valores_2 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 __operadores_aritmeticos IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parametros_llamada_func ::= expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parametros_llamada_func ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // _parametros_llamada_func ::= expr_aritmeticas OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_read_write ::= expr_read 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_read_write ::= expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_read ::= READ OPERADOR_PARENTESIS_ABRIR _expr_read OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$4 ::= 
            {
              Symbol RESULT =null;

                        report_error("Función READ", tokenError);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$4",58, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expr_read ::= READ error NT$4 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _expr_read ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _expr_read ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_write ::= WRITE OPERADOR_PARENTESIS_ABRIR _tokens _expr_write OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // NT$5 ::= 
            {
              Symbol RESULT =null;

                        report_error("Función WRITE", tokenError);
                        RESULT = new Symbol(-1);
                    
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$5",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expr_write ::= WRITE error NT$5 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _expr_write ::= OPERADOR_COMA _tokens _expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _expr_write ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // estruc_de_control ::= sentencia_if 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // estruc_de_control ::= sentencia_while 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // estruc_de_control ::= sentencia_for 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // sentencia_if ::= IF expr_booleanas THEN _cuerpo _sentencia_if END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$6 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia IF", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$6",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // sentencia_if ::= IF error NT$6 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // _sentencia_if ::= sentencia_else 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // _sentencia_if ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // sentencia_else ::= ELSE _cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia_while ::= WHILE expr_booleanas DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$7 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia WHILE", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$7",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia_while ::= WHILE error NT$7 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION_1 tokens TO tokens DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$8 ::= 
            {
              Symbol RESULT =null;

                         report_error("Sentencia FOR", tokenError);
                         RESULT = new Symbol(-1);
                     
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("NT$8",62, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia_for ::= FOR error NT$8 END 
            {
              Symbol RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Symbol) ((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr_aritmeticas ::= tokens _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr_aritmeticas ::= llamar_func_o_proc _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // _expr_aritmeticas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr_booleanas ::= tokens operadores_booleanos_1 tokens _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // _expr_booleanas ::= AND expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // _expr_booleanas ::= OR expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // _expr_booleanas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // _operadores_aritmeticos ::= MOD 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // _operadores_aritmeticos ::= DIV 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // operadores_booleanos_1 ::= operadores_booleanos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // operadores_booleanos_1 ::= OPERADOR_ASIGNACION_2 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // tokens ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // tokens ::= tokens_boolean 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // _tokens ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // _tokens ::= LITERAL_STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tokens_boolean ::= TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tokens_boolean ::= FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // tokens_boolean ::= NOT TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // tokens_boolean ::= NOT FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // tipos ::= INT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // tipos ::= SHORTINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // tipos ::= LONGINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // tipos ::= REAL 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // tipos ::= STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // tipos ::= CHAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // tipos ::= BOOLEAN 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
