
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\012\004\000\002\012\004\000" +
    "\002\007\006\000\002\007\005\000\002\010\006\000\002" +
    "\010\005\000\002\013\015\000\002\014\012\000\002\017" +
    "\004\000\002\017\006\000\002\020\005\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\005\000\002\005\003\000\002\015\005\000\002" +
    "\016\004\000\002\016\004\000\002\016\003\000\002\032" +
    "\006\000\002\030\003\000\002\030\005\000\002\030\003" +
    "\000\002\031\005\000\002\031\003\000\002\033\003\000" +
    "\002\033\003\000\002\034\005\000\002\035\003\000\002" +
    "\035\003\000\002\036\006\000\002\037\004\000\002\037" +
    "\003\000\002\027\003\000\002\027\003\000\002\027\003" +
    "\000\002\040\010\000\002\041\003\000\002\041\003\000" +
    "\002\043\004\000\002\047\010\000\002\050\014\000\002" +
    "\021\004\000\002\021\004\000\002\021\006\000\002\022" +
    "\004\000\002\022\003\000\002\042\004\000\002\042\006" +
    "\000\002\042\006\000\002\046\004\000\002\046\004\000" +
    "\002\046\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\025\003\000\002\025\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\044\003" +
    "\000\002\044\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\052\003\000\002" +
    "\052\003\000\002\052\004\000\002\052\004\000\002\052" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\053\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\004\052\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\276\001\002\000\004\045\007\001\002" +
    "\000\014\053\uff9c\055\020\056\013\057\016\060\011\001" +
    "\002\000\014\053\uff9c\055\020\056\013\057\016\060\011" +
    "\001\002\000\004\045\266\001\002\000\014\053\uff9c\055" +
    "\020\056\013\057\016\060\011\001\002\000\004\045\256" +
    "\001\002\000\014\053\uff9c\055\020\056\013\057\016\060" +
    "\011\001\002\000\004\053\252\001\002\000\004\045\044" +
    "\001\002\000\004\053\ufffb\001\002\000\004\045\022\001" +
    "\002\000\034\045\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9" +
    "\057\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\066" +
    "\ufff9\071\ufff9\001\002\000\006\023\023\035\024\001\002" +
    "\000\020\042\035\045\037\046\036\047\031\050\030\074" +
    "\027\075\032\001\002\000\004\045\022\001\002\000\034" +
    "\045\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060" +
    "\ufff5\061\ufff5\062\ufff5\063\ufff5\065\ufff5\066\ufff5\071\ufff5" +
    "\001\002\000\030\013\uffae\014\uffae\015\uffae\016\uffae\020" +
    "\uffae\035\uffae\036\uffae\043\uffae\044\uffae\072\uffae\073\uffae" +
    "\001\002\000\036\013\uffa8\014\uffa8\015\uffa8\016\uffa8\020" +
    "\uffa8\035\uffa8\036\uffa8\040\uffa8\041\uffa8\043\uffa8\044\uffa8" +
    "\064\uffa8\072\uffa8\073\uffa8\001\002\000\062\007\uffab\010" +
    "\uffab\011\uffab\012\uffab\013\uffab\014\uffab\015\uffab\016\uffab" +
    "\020\uffab\023\uffab\024\uffab\035\uffab\036\uffab\040\uffab\041" +
    "\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab" +
    "\064\uffab\072\uffab\073\uffab\001\002\000\062\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9" +
    "\020\uffa9\023\uffa9\024\uffa9\035\uffa9\036\uffa9\040\uffa9\041" +
    "\uffa9\043\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9" +
    "\064\uffa9\072\uffa9\073\uffa9\001\002\000\036\013\uffa7\014" +
    "\uffa7\015\uffa7\016\uffa7\020\uffa7\035\uffa7\036\uffa7\040\uffa7" +
    "\041\uffa7\043\uffa7\044\uffa7\064\uffa7\072\uffa7\073\uffa7\001" +
    "\002\000\004\036\043\001\002\000\030\013\uffad\014\uffad" +
    "\015\uffad\016\uffad\020\uffad\035\uffad\036\uffad\043\uffad\044" +
    "\uffad\072\uffad\073\uffad\001\002\000\010\045\040\074\041" +
    "\075\042\001\002\000\062\007\uffaa\010\uffaa\011\uffaa\012" +
    "\uffaa\013\uffaa\014\uffaa\015\uffaa\016\uffaa\020\uffaa\023\uffaa" +
    "\024\uffaa\035\uffaa\036\uffaa\040\uffaa\041\uffaa\043\uffaa\044" +
    "\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\064\uffaa\072\uffaa" +
    "\073\uffaa\001\002\000\046\007\uffac\010\uffac\011\uffac\012" +
    "\uffac\020\uffac\023\uffac\024\uffac\035\uffac\036\uffac\040\uffac" +
    "\041\uffac\045\uffac\046\uffac\047\uffac\050\uffac\064\uffac\072" +
    "\uffac\073\uffac\001\002\000\036\013\uffa6\014\uffa6\015\uffa6" +
    "\016\uffa6\020\uffa6\035\uffa6\036\uffa6\040\uffa6\041\uffa6\043" +
    "\uffa6\044\uffa6\064\uffa6\072\uffa6\073\uffa6\001\002\000\036" +
    "\013\uffa5\014\uffa5\015\uffa5\016\uffa5\020\uffa5\035\uffa5\036" +
    "\uffa5\040\uffa5\041\uffa5\043\uffa5\044\uffa5\064\uffa5\072\uffa5" +
    "\073\uffa5\001\002\000\036\013\uffa4\014\uffa4\015\uffa4\016" +
    "\uffa4\020\uffa4\035\uffa4\036\uffa4\040\uffa4\041\uffa4\043\uffa4" +
    "\044\uffa4\064\uffa4\072\uffa4\073\uffa4\001\002\000\034\045" +
    "\ufff6\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6" +
    "\061\ufff6\062\ufff6\063\ufff6\065\ufff6\066\ufff6\071\ufff6\001" +
    "\002\000\004\017\045\001\002\000\020\076\046\077\050" +
    "\100\053\101\056\102\054\103\052\104\055\001\002\000" +
    "\010\036\uffa3\045\uffa3\053\uffa3\001\002\000\004\020\062" +
    "\001\002\000\010\036\uffa1\045\uffa1\053\uffa1\001\002\000" +
    "\004\045\057\001\002\000\010\036\uff9d\045\uff9d\053\uff9d" +
    "\001\002\000\010\036\uffa2\045\uffa2\053\uffa2\001\002\000" +
    "\010\036\uff9f\045\uff9f\053\uff9f\001\002\000\010\036\uffa0" +
    "\045\uffa0\053\uffa0\001\002\000\010\036\uff9e\045\uff9e\053" +
    "\uff9e\001\002\000\006\020\ufff2\035\060\001\002\000\020" +
    "\076\046\077\050\100\053\101\056\102\054\103\052\104" +
    "\055\001\002\000\004\020\ufff1\001\002\000\004\037\063" +
    "\001\002\000\020\076\046\077\050\100\053\101\056\102" +
    "\054\103\052\104\055\001\002\000\004\053\065\001\002" +
    "\000\022\045\uff9c\055\uff9c\056\uff9c\061\uff9c\062\uff9c\063" +
    "\uff9c\066\uff9c\071\uff9c\001\002\000\022\045\104\055\020" +
    "\056\013\061\070\062\076\063\075\066\071\071\106\001" +
    "\002\000\026\045\uffea\054\uffea\055\uffea\056\uffea\061\uffea" +
    "\062\uffea\063\uffea\065\uffea\066\uffea\071\uffea\001\002\000" +
    "\014\036\uff9c\045\037\046\036\047\031\050\030\001\002" +
    "\000\022\017\204\042\035\045\037\046\036\047\031\050" +
    "\030\074\027\075\032\001\002\000\026\045\uffee\054\uffee" +
    "\055\uffee\056\uffee\061\uffee\062\uffee\063\uffee\065\uffee\066" +
    "\uffee\071\uffee\001\002\000\026\045\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\061\uffd7\062\uffd7\063\uffd7\065\uffd7\066\uffd7\071" +
    "\uffd7\001\002\000\004\036\240\001\002\000\022\017\204" +
    "\042\035\045\037\046\036\047\031\050\030\074\027\075" +
    "\032\001\002\000\012\045\037\046\036\047\031\050\030" +
    "\001\002\000\026\045\uffec\054\uffec\055\uffec\056\uffec\061" +
    "\uffec\062\uffec\063\uffec\065\uffec\066\uffec\071\uffec\001\002" +
    "\000\026\045\uffed\054\uffed\055\uffed\056\uffed\061\uffed\062" +
    "\uffed\063\uffed\065\uffed\066\uffed\071\uffed\001\002\000\026" +
    "\045\uffd5\054\uffd5\055\uffd5\056\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\065\uffd5\066\uffd5\071\uffd5\001\002\000\026\045\uffdf" +
    "\054\uffdf\055\uffdf\056\uffdf\061\uffdf\062\uffdf\063\uffdf\065" +
    "\uffdf\066\uffdf\071\uffdf\001\002\000\024\045\uffef\054\173" +
    "\055\uffef\056\uffef\061\uffef\062\uffef\063\uffef\066\uffef\071" +
    "\uffef\001\002\000\022\005\130\006\133\017\127\023\124" +
    "\025\132\026\123\027\134\030\131\001\002\000\026\045" +
    "\uffd6\054\uffd6\055\uffd6\056\uffd6\061\uffd6\062\uffd6\063\uffd6" +
    "\065\uffd6\066\uffd6\071\uffd6\001\002\000\004\045\110\001" +
    "\002\000\026\045\uffde\054\uffde\055\uffde\056\uffde\061\uffde" +
    "\062\uffde\063\uffde\065\uffde\066\uffde\071\uffde\001\002\000" +
    "\004\023\111\001\002\000\020\042\035\045\037\046\036" +
    "\047\031\050\030\074\027\075\032\001\002\000\004\072" +
    "\113\001\002\000\020\042\035\045\037\046\036\047\031" +
    "\050\030\074\027\075\032\001\002\000\004\073\115\001" +
    "\002\000\004\053\116\001\002\000\024\045\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c\071" +
    "\uff9c\001\002\000\024\045\104\054\120\055\020\056\013" +
    "\061\070\062\076\063\075\066\071\071\106\001\002\000" +
    "\026\045\uffcf\054\uffcf\055\uffcf\056\uffcf\061\uffcf\062\uffcf" +
    "\063\uffcf\065\uffcf\066\uffcf\071\uffcf\001\002\000\026\045" +
    "\uffef\054\uffef\055\uffef\056\uffef\061\uffef\062\uffef\063\uffef" +
    "\065\uffef\066\uffef\071\uffef\001\002\000\004\036\172\001" +
    "\002\000\022\017\uffb7\042\uffb7\045\uffb7\046\uffb7\047\uffb7" +
    "\050\uffb7\074\uffb7\075\uffb7\001\002\000\022\017\150\042" +
    "\035\045\152\046\036\047\031\050\030\074\027\075\032" +
    "\001\002\000\004\036\uffe6\001\002\000\022\017\150\042" +
    "\035\045\152\046\036\047\031\050\030\074\027\075\032" +
    "\001\002\000\022\020\uff9c\042\035\045\037\046\036\047" +
    "\031\050\030\074\027\075\032\001\002\000\004\036\uffba" +
    "\001\002\000\022\017\uffb5\042\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\074\uffb5\075\uffb5\001\002\000\022\017\uffb8" +
    "\042\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\074\uffb8\075" +
    "\uffb8\001\002\000\004\036\uffb9\001\002\000\022\017\uffb6" +
    "\042\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\074\uffb6\075" +
    "\uffb6\001\002\000\004\020\145\001\002\000\006\020\uffe4" +
    "\035\140\001\002\000\004\020\uffe2\001\002\000\020\042" +
    "\035\045\037\046\036\047\031\050\030\074\027\075\032" +
    "\001\002\000\004\020\uffe3\001\002\000\006\020\uffe0\035" +
    "\143\001\002\000\020\042\035\045\037\046\036\047\031" +
    "\050\030\074\027\075\032\001\002\000\004\020\uffe1\001" +
    "\002\000\022\013\uffe5\014\uffe5\015\uffe5\016\uffe5\020\uffe5" +
    "\036\uffe5\043\uffe5\044\uffe5\001\002\000\022\013\161\014" +
    "\154\015\155\016\160\020\uff9c\036\uff9c\043\156\044\157" +
    "\001\002\000\004\036\uffe7\001\002\000\022\017\150\042" +
    "\035\045\152\046\036\047\031\050\030\074\027\075\032" +
    "\001\002\000\022\013\161\014\154\015\155\016\160\020" +
    "\uff9c\036\uff9c\043\156\044\157\001\002\000\024\013\uffac" +
    "\014\uffac\015\uffac\016\uffac\017\127\020\uffac\036\uffac\043" +
    "\uffac\044\uffac\001\002\000\006\020\uffce\036\uffce\001\002" +
    "\000\022\017\uffbf\042\uffbf\045\uffbf\046\uffbf\047\uffbf\050" +
    "\uffbf\074\uffbf\075\uffbf\001\002\000\022\017\uffbe\042\uffbe" +
    "\045\uffbe\046\uffbe\047\uffbe\050\uffbe\074\uffbe\075\uffbe\001" +
    "\002\000\022\017\uffbc\042\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\074\uffbc\075\uffbc\001\002\000\022\017\uffbb\042" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\074\uffbb\075\uffbb" +
    "\001\002\000\022\017\uffbd\042\uffbd\045\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\074\uffbd\075\uffbd\001\002\000\022\017\uffc0" +
    "\042\uffc0\045\uffc0\046\uffc0\047\uffc0\050\uffc0\074\uffc0\075" +
    "\uffc0\001\002\000\006\020\uffca\036\uffca\001\002\000\022" +
    "\017\150\042\035\045\152\046\036\047\031\050\030\074" +
    "\027\075\032\001\002\000\006\020\uffcb\036\uffcb\001\002" +
    "\000\004\020\166\001\002\000\022\013\161\014\154\015" +
    "\155\016\160\020\uff9c\036\uff9c\043\156\044\157\001\002" +
    "\000\006\020\uffcc\036\uffcc\001\002\000\006\020\uffcd\036" +
    "\uffcd\001\002\000\004\036\uffe8\001\002\000\026\045\uffe9" +
    "\054\uffe9\055\uffe9\056\uffe9\061\uffe9\062\uffe9\063\uffe9\065" +
    "\uffe9\066\uffe9\071\uffe9\001\002\000\014\053\ufff4\055\ufff4" +
    "\056\ufff4\057\ufff4\060\ufff4\001\002\000\014\036\uff9c\045" +
    "\037\046\036\047\031\050\030\001\002\000\014\036\uff9c" +
    "\045\037\046\036\047\031\050\030\001\002\000\004\036" +
    "\200\001\002\000\004\036\uffd8\001\002\000\026\045\uffda" +
    "\054\uffda\055\uffda\056\uffda\061\uffda\062\uffda\063\uffda\065" +
    "\uffda\066\uffda\071\uffda\001\002\000\004\036\uffd9\001\002" +
    "\000\016\007\235\010\232\011\234\012\233\023\230\024" +
    "\231\001\002\000\004\064\217\001\002\000\022\017\204" +
    "\042\035\045\037\046\036\047\031\050\030\074\027\075" +
    "\032\001\002\000\014\020\uff9c\040\210\041\207\064\uff9c" +
    "\073\uff9c\001\002\000\010\020\uffc9\064\uffc9\073\uffc9\001" +
    "\002\000\022\017\204\042\035\045\037\046\036\047\031" +
    "\050\030\074\027\075\032\001\002\000\022\017\204\042" +
    "\035\045\037\046\036\047\031\050\030\074\027\075\032" +
    "\001\002\000\010\020\uffc4\064\uffc4\073\uffc4\001\002\000" +
    "\010\020\uffc5\064\uffc5\073\uffc5\001\002\000\010\020\uffc6" +
    "\064\uffc6\073\uffc6\001\002\000\004\020\215\001\002\000" +
    "\014\020\uff9c\040\210\041\207\064\uff9c\073\uff9c\001\002" +
    "\000\010\020\uffc7\064\uffc7\073\uffc7\001\002\000\026\045" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c" +
    "\065\uff9c\066\uff9c\071\uff9c\001\002\000\026\045\104\054" +
    "\uff9c\055\020\056\013\061\070\062\076\063\075\065\221" +
    "\066\071\071\106\001\002\000\024\045\uff9c\054\uff9c\055" +
    "\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c\071\uff9c" +
    "\001\002\000\004\054\225\001\002\000\004\054\uffd3\001" +
    "\002\000\004\054\uffd2\001\002\000\026\045\uffd4\054\uffd4" +
    "\055\uffd4\056\uffd4\061\uffd4\062\uffd4\063\uffd4\065\uffd4\066" +
    "\uffd4\071\uffd4\001\002\000\024\045\104\054\uffd1\055\020" +
    "\056\013\061\070\062\076\063\075\066\071\071\106\001" +
    "\002\000\012\045\037\046\036\047\031\050\030\001\002" +
    "\000\012\045\uffb0\046\uffb0\047\uffb0\050\uffb0\001\002\000" +
    "\012\045\uffaf\046\uffaf\047\uffaf\050\uffaf\001\002\000\012" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\001\002\000\012\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\001\002\000\012\045\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\001\002\000\012\045\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\001\002\000\014\020\uff9c\040\210" +
    "\041\207\064\uff9c\073\uff9c\001\002\000\010\020\uffc8\064" +
    "\uffc8\073\uffc8\001\002\000\026\045\uffeb\054\uffeb\055\uffeb" +
    "\056\uffeb\061\uffeb\062\uffeb\063\uffeb\065\uffeb\066\uffeb\071" +
    "\uffeb\001\002\000\004\073\242\001\002\000\004\053\243" +
    "\001\002\000\024\045\uff9c\054\uff9c\055\uff9c\056\uff9c\061" +
    "\uff9c\062\uff9c\063\uff9c\066\uff9c\071\uff9c\001\002\000\024" +
    "\045\104\054\245\055\020\056\013\061\070\062\076\063" +
    "\075\066\071\071\106\001\002\000\026\045\uffd0\054\uffd0" +
    "\055\uffd0\056\uffd0\061\uffd0\062\uffd0\063\uffd0\065\uffd0\066" +
    "\uffd0\071\uffd0\001\002\000\004\036\uffdc\001\002\000\004" +
    "\036\251\001\002\000\004\036\uffdb\001\002\000\026\045" +
    "\uffdd\054\uffdd\055\uffdd\056\uffdd\061\uffdd\062\uffdd\063\uffdd" +
    "\065\uffdd\066\uffdd\071\uffdd\001\002\000\024\045\uff9c\054" +
    "\uff9c\055\uff9c\056\uff9c\061\uff9c\062\uff9c\063\uff9c\066\uff9c" +
    "\071\uff9c\001\002\000\024\045\104\054\254\055\020\056" +
    "\013\061\070\062\076\063\075\066\071\071\106\001\002" +
    "\000\004\002\uffff\001\002\000\004\053\ufffd\001\002\000" +
    "\006\035\260\037\261\001\002\000\034\045\ufffa\053\ufffa" +
    "\054\ufffa\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062" +
    "\ufffa\063\ufffa\065\ufffa\066\ufffa\071\ufffa\001\002\000\004" +
    "\045\256\001\002\000\020\076\046\077\050\100\053\101" +
    "\056\102\054\103\052\104\055\001\002\000\004\036\263" +
    "\001\002\000\034\045\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\062\ufff8\063\ufff8\065\ufff8" +
    "\066\ufff8\071\ufff8\001\002\000\034\045\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\062\ufff7" +
    "\063\ufff7\065\ufff7\066\ufff7\071\ufff7\001\002\000\004\053" +
    "\ufffe\001\002\000\004\017\267\001\002\000\020\076\046" +
    "\077\050\100\053\101\056\102\054\103\052\104\055\001" +
    "\002\000\004\020\271\001\002\000\004\053\272\001\002" +
    "\000\024\045\uff9c\054\uff9c\055\uff9c\056\uff9c\061\uff9c\062" +
    "\uff9c\063\uff9c\066\uff9c\071\uff9c\001\002\000\024\045\104" +
    "\054\274\055\020\056\013\061\070\062\076\063\075\066" +
    "\071\071\106\001\002\000\014\053\ufff3\055\ufff3\056\ufff3" +
    "\057\ufff3\060\ufff3\001\002\000\004\053\ufffc\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\274\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\014" +
    "\012\011\013\013\014\007\053\016\001\001\000\014\004" +
    "\274\012\011\013\013\014\007\053\016\001\001\000\002" +
    "\001\001\000\014\004\264\012\011\013\013\014\007\053" +
    "\016\001\001\000\004\007\256\001\001\000\014\004\254" +
    "\012\011\013\013\014\007\053\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\044" +
    "\032\045\025\052\033\001\001\000\004\010\024\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\050\017\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\011\050\017" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\063\001\001\000\002\001\001\000\006\005\065\053" +
    "\066\001\001\000\026\012\071\015\102\027\076\032\073" +
    "\033\077\034\101\036\106\040\072\047\104\050\100\001" +
    "\001\000\002\001\001\000\010\035\246\045\245\053\247" +
    "\001\001\000\010\042\240\045\201\052\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\042\202\045\201\052\204\001\001\000\004\045\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\016\121\025" +
    "\124\026\125\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\044\111\045" +
    "\025\052\033\001\001\000\002\001\001\000\010\044\113" +
    "\045\025\052\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\116\053\066\001\001\000\026\012\071" +
    "\015\120\027\076\032\073\033\077\034\101\036\106\040" +
    "\072\047\104\050\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\021" +
    "\170\032\145\044\150\045\025\052\033\001\001\000\002" +
    "\001\001\000\014\021\146\032\145\044\150\045\025\052" +
    "\033\001\001\000\014\030\134\044\135\045\025\052\033" +
    "\053\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\031" +
    "\140\044\141\045\025\052\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\031\143\044\141\045\025\052" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\022\167\024\162\053\161\001\001\000\002\001\001\000" +
    "\014\021\164\032\145\044\150\045\025\052\033\001\001" +
    "\000\010\022\152\024\162\053\161\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\021\163\032\145" +
    "\044\150\045\025\052\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\166\024\162\053\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\037\175\045\174" +
    "\053\176\001\001\000\010\037\200\045\174\053\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\226\001\001\000\002\001" +
    "\001\000\010\042\213\045\201\052\204\001\001\000\006" +
    "\046\205\053\210\001\001\000\002\001\001\000\010\042" +
    "\212\045\201\052\204\001\001\000\010\042\211\045\201" +
    "\052\204\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\046\215\053\210" +
    "\001\001\000\002\001\001\000\006\005\217\053\066\001" +
    "\001\000\034\012\071\015\120\027\076\032\073\033\077" +
    "\034\101\036\106\040\072\041\221\043\222\047\104\050" +
    "\100\053\223\001\001\000\006\005\225\053\066\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\071\015\120\027\076\032\073" +
    "\033\077\034\101\036\106\040\072\047\104\050\100\001" +
    "\001\000\004\045\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\046\236\053\210\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\243\053\066\001\001\000\026" +
    "\012\071\015\120\027\076\032\073\033\077\034\101\036" +
    "\106\040\072\047\104\050\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\252\053\066\001\001\000\026" +
    "\012\071\015\120\027\076\032\073\033\077\034\101\036" +
    "\106\040\072\047\104\050\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\263\001\001\000\004\011\261\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\050\017\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\272\053" +
    "\066\001\001\000\026\012\071\015\120\027\076\032\073" +
    "\033\077\034\101\036\106\040\072\047\104\050\100\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Object RESULT =null;
		 System.out.println("Correcto!"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= declarar_datos encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= declarar_funciones encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= declarar_procedimientos encabezado 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarar_datos ::= VAR variables 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarar_datos ::= CONST constantes 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables ::= IDENTIFICADOR OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // variables ::= IDENTIFICADOR OPERADOR_COMA variables 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION tokens OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constantes ::= IDENTIFICADOR OPERADOR_COMA constantes 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos BEGIN cuerpo asignar_valores END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // parametros_entrada ::= tipos IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // parametros_entrada ::= tipos IDENTIFICADOR OPERADOR_COMA parametros_entrada 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // cuerpo ::= cuerpo asignar_valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cuerpo ::= cuerpo declarar_datos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // cuerpo ::= cuerpo expr_read_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cuerpo ::= cuerpo estruc_de_control 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // cuerpo ::= cuerpo llamar_func_o_proc OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // cuerpo ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // asignar_valores ::= IDENTIFICADOR _asignar_valores OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // _asignar_valores ::= OPERADOR_ASIGNACION expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // _asignar_valores ::= ___operadores_aritmeticos expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // _asignar_valores ::= __operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_llamada_func ::= tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parametros_llamada_func ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // _parametros_llamada_func ::= tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr_read_write ::= expr_read 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr_read_write ::= expr_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr_read ::= READ _expr_read OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // _expr_read ::= _tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // _expr_read ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr_write ::= WRITE _tokens _expr_write OPERADOR_PUNTO_Y_COMA 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // _expr_write ::= _tokens _expr_write 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _expr_write ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // estruc_de_control ::= sentencia_if 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // estruc_de_control ::= sentencia_while 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // estruc_de_control ::= sentencia_for 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // sentencia_if ::= IF expr_booleanas THEN cuerpo _sentencia_if END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // _sentencia_if ::= sentencia_else 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // _sentencia_if ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // sentencia_else ::= ELSE cuerpo 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // sentencia_while ::= WHILE expr_booleanas DO BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION tokens TO tokens DO BEGIN cuerpo END 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr_aritmeticas ::= tokens _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_aritmeticas ::= llamar_func_o_proc _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _expr_aritmeticas ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_booleanas ::= _tokens operadores_booleanos _tokens _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _expr_booleanas ::= AND expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // _expr_booleanas ::= OR expr_booleanas 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // _expr_booleanas ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _operadores_aritmeticos ::= MOD 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _operadores_aritmeticos ::= DIV 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_booleanos ::= OPERADOR_ASIGNACION 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // tokens ::= _tokens 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // tokens ::= tokens_boolean 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // _tokens ::= IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _tokens ::= LITERAL_STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // tokens_boolean ::= TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // tokens_boolean ::= FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // tokens_boolean ::= NOT TRUE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tokens_boolean ::= NOT FALSE 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tipos ::= INT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tipos ::= SHORTINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // tipos ::= LONGINT 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // tipos ::= REAL 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // tipos ::= STRING 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tipos ::= CHAR 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tipos ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
