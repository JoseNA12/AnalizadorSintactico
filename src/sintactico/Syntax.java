
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import lexico.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\162\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\016\004\000\002\016\004\000" +
    "\002\010\010\000\002\011\005\000\002\011\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\007\000\002\014" +
    "\003\000\002\014\003\000\002\017\014\000\002\020\012" +
    "\000\002\026\006\000\002\023\003\000\002\023\003\000" +
    "\002\024\005\000\002\025\004\000\002\025\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\005\000\002\005\003\000\002\006\003\000\002\006\004" +
    "\000\002\007\004\000\002\021\005\000\002\022\004\000" +
    "\002\022\004\000\002\022\003\000\002\040\006\000\002" +
    "\036\003\000\002\036\005\000\002\036\003\000\002\037" +
    "\005\000\002\037\003\000\002\041\003\000\002\041\003" +
    "\000\002\042\005\000\002\043\003\000\002\043\003\000" +
    "\002\044\010\000\002\045\005\000\002\045\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\046" +
    "\010\000\002\047\003\000\002\047\003\000\002\051\004" +
    "\000\002\055\010\000\002\056\014\000\002\027\004\000" +
    "\002\027\004\000\002\027\006\000\002\030\004\000\002" +
    "\030\003\000\002\050\004\000\002\050\006\000\002\050" +
    "\006\000\002\054\004\000\002\054\004\000\002\054\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\033" +
    "\003\000\002\033\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\057\003\000" +
    "\002\057\003\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\060\003\000\002\060\003\000\002\052" +
    "\003\000\002\052\003\000\002\053\003\000\002\053\003" +
    "\000\002\053\003\000\002\053\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\004\000\002\062\004\000\002" +
    "\062\004\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\064\002\000\002\063\003\000" +
    "\002\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\321\001\002\000\004\046\007\001\002" +
    "\000\014\054\uff92\056\020\057\013\060\016\061\011\001" +
    "\002\000\014\054\uff92\056\020\057\013\060\016\061\011" +
    "\001\002\000\004\046\311\001\002\000\014\054\uff92\056" +
    "\020\057\013\060\016\061\011\001\002\000\004\046\273" +
    "\001\002\000\014\054\uff92\056\020\057\013\060\016\061" +
    "\011\001\002\000\004\054\267\001\002\000\004\046\045" +
    "\001\002\000\004\054\ufffb\001\002\000\004\046\022\001" +
    "\002\000\016\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\001\002\000\004\024\023\001\002\000\020\043" +
    "\033\046\035\047\034\050\027\051\026\075\025\076\030" +
    "\001\002\000\030\013\uffa4\014\uffa4\015\uffa4\016\uffa4\020" +
    "\uffa4\036\uffa4\037\uffa4\044\uffa4\045\uffa4\073\uffa4\074\uffa4" +
    "\001\002\000\036\013\uff9e\014\uff9e\015\uff9e\016\uff9e\020" +
    "\uff9e\036\uff9e\037\uff9e\041\uff9e\042\uff9e\044\uff9e\045\uff9e" +
    "\065\uff9e\073\uff9e\074\uff9e\001\002\000\052\007\uffa1\010" +
    "\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1" +
    "\020\uffa1\024\uffa1\025\uffa1\036\uffa1\037\uffa1\041\uffa1\042" +
    "\uffa1\044\uffa1\045\uffa1\065\uffa1\073\uffa1\074\uffa1\001\002" +
    "\000\052\007\uff9f\010\uff9f\011\uff9f\012\uff9f\013\uff9f\014" +
    "\uff9f\015\uff9f\016\uff9f\020\uff9f\024\uff9f\025\uff9f\036\uff9f" +
    "\037\uff9f\041\uff9f\042\uff9f\044\uff9f\045\uff9f\065\uff9f\073" +
    "\uff9f\074\uff9f\001\002\000\036\013\uff9d\014\uff9d\015\uff9d" +
    "\016\uff9d\020\uff9d\036\uff9d\037\uff9d\041\uff9d\042\uff9d\044" +
    "\uff9d\045\uff9d\065\uff9d\073\uff9d\074\uff9d\001\002\000\004" +
    "\037\041\001\002\000\030\013\uffa3\014\uffa3\015\uffa3\016" +
    "\uffa3\020\uffa3\036\uffa3\037\uffa3\044\uffa3\045\uffa3\073\uffa3" +
    "\074\uffa3\001\002\000\010\046\037\075\036\076\040\001" +
    "\002\000\052\007\uffa0\010\uffa0\011\uffa0\012\uffa0\013\uffa0" +
    "\014\uffa0\015\uffa0\016\uffa0\020\uffa0\024\uffa0\025\uffa0\036" +
    "\uffa0\037\uffa0\041\uffa0\042\uffa0\044\uffa0\045\uffa0\065\uffa0" +
    "\073\uffa0\074\uffa0\001\002\000\036\007\uffa2\010\uffa2\011" +
    "\uffa2\012\uffa2\020\uffa2\024\uffa2\025\uffa2\036\uffa2\037\uffa2" +
    "\041\uffa2\042\uffa2\065\uffa2\073\uffa2\074\uffa2\001\002\000" +
    "\036\013\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\036\uff9b" +
    "\037\uff9b\041\uff9b\042\uff9b\044\uff9b\045\uff9b\065\uff9b\073" +
    "\uff9b\074\uff9b\001\002\000\036\013\uff9c\014\uff9c\015\uff9c" +
    "\016\uff9c\020\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\044" +
    "\uff9c\045\uff9c\065\uff9c\073\uff9c\074\uff9c\001\002\000\036" +
    "\013\uff9a\014\uff9a\015\uff9a\016\uff9a\020\uff9a\036\uff9a\037" +
    "\uff9a\041\uff9a\042\uff9a\044\uff9a\045\uff9a\065\uff9a\073\uff9a" +
    "\074\uff9a\001\002\000\020\046\022\054\uff92\055\uff92\056" +
    "\uff92\057\uff92\060\uff92\061\uff92\001\002\000\016\054\ufff3" +
    "\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000" +
    "\016\054\ufff2\055\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2" +
    "\001\002\000\016\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060" +
    "\ufff1\061\ufff1\001\002\000\004\017\046\001\002\000\022" +
    "\020\uff92\077\047\100\051\101\055\102\061\103\056\104" +
    "\053\105\057\001\002\000\010\037\uff99\046\uff99\054\uff99" +
    "\001\002\000\004\020\067\001\002\000\010\037\uff97\046" +
    "\uff97\054\uff97\001\002\000\004\046\062\001\002\000\010" +
    "\037\uff93\046\uff93\054\uff93\001\002\000\004\020\uffed\001" +
    "\002\000\010\037\uff98\046\uff98\054\uff98\001\002\000\010" +
    "\037\uff95\046\uff95\054\uff95\001\002\000\010\037\uff96\046" +
    "\uff96\054\uff96\001\002\000\004\020\uffec\001\002\000\010" +
    "\037\uff94\046\uff94\054\uff94\001\002\000\006\020\uff92\036" +
    "\063\001\002\000\020\077\047\100\051\101\055\102\061" +
    "\103\056\104\053\105\057\001\002\000\004\020\uffeb\001" +
    "\002\000\004\020\uffe9\001\002\000\004\020\uffea\001\002" +
    "\000\004\040\070\001\002\000\020\077\047\100\051\101" +
    "\055\102\061\103\056\104\053\105\057\001\002\000\004" +
    "\054\072\001\002\000\024\046\106\055\uff92\056\uff92\057" +
    "\uff92\062\073\063\100\064\077\067\074\072\110\001\002" +
    "\000\014\037\uff92\046\035\047\034\050\027\051\026\001" +
    "\002\000\022\017\217\043\033\046\035\047\034\050\027" +
    "\051\026\075\025\076\030\001\002\000\026\046\uffce\055" +
    "\uffce\056\uffce\057\uffce\062\uffce\063\uffce\064\uffce\066\uffce" +
    "\067\uffce\072\uffce\001\002\000\004\037\254\001\002\000" +
    "\022\017\217\043\033\046\035\047\034\050\027\051\026" +
    "\075\025\076\030\001\002\000\004\017\204\001\002\000" +
    "\026\046\106\055\uff92\056\uff92\057\uff92\062\073\063\100" +
    "\064\077\066\uff92\067\074\072\110\001\002\000\026\046" +
    "\106\055\uff92\056\uff92\057\uff92\062\073\063\100\064\077" +
    "\066\uff92\067\074\072\110\001\002\000\026\046\uffcc\055" +
    "\uffcc\056\uffcc\057\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc" +
    "\067\uffcc\072\uffcc\001\002\000\026\046\uffd6\055\uffd6\056" +
    "\uffd6\057\uffd6\062\uffd6\063\uffd6\064\uffd6\066\uffd6\067\uffd6" +
    "\072\uffd6\001\002\000\026\046\106\055\uff92\056\uff92\057" +
    "\uff92\062\073\063\100\064\077\066\uff92\067\074\072\110" +
    "\001\002\000\022\005\136\006\141\017\135\023\133\026" +
    "\140\027\131\030\142\031\137\001\002\000\026\046\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\062\uffcd\063\uffcd\064\uffcd\066" +
    "\uffcd\067\uffcd\072\uffcd\001\002\000\004\046\117\001\002" +
    "\000\004\055\116\001\002\000\010\055\uffe3\056\020\057" +
    "\013\001\002\000\012\055\uffe4\056\uffe4\057\uffe4\066\uffe4" +
    "\001\002\000\026\046\uffd5\055\uffd5\056\uffd5\057\uffd5\062" +
    "\uffd5\063\uffd5\064\uffd5\066\uffd5\067\uffd5\072\uffd5\001\002" +
    "\000\004\055\uffe2\001\002\000\014\054\ufff0\056\ufff0\057" +
    "\ufff0\060\ufff0\061\ufff0\001\002\000\004\023\120\001\002" +
    "\000\020\043\033\046\035\047\034\050\027\051\026\075" +
    "\025\076\030\001\002\000\004\073\122\001\002\000\020" +
    "\043\033\046\035\047\034\050\027\051\026\075\025\076" +
    "\030\001\002\000\004\074\124\001\002\000\004\054\125" +
    "\001\002\000\020\046\106\055\uff92\062\073\063\100\064" +
    "\077\067\074\072\110\001\002\000\004\055\127\001\002" +
    "\000\026\046\uffc6\055\uffc6\056\uffc6\057\uffc6\062\uffc6\063" +
    "\uffc6\064\uffc6\066\uffc6\067\uffc6\072\uffc6\001\002\000\004" +
    "\037\200\001\002\000\022\017\uffae\043\uffae\046\uffae\047" +
    "\uffae\050\uffae\051\uffae\075\uffae\076\uffae\001\002\000\004" +
    "\037\uffdd\001\002\000\022\017\156\043\033\046\160\047" +
    "\034\050\027\051\026\075\025\076\030\001\002\000\022" +
    "\017\156\043\033\046\160\047\034\050\027\051\026\075" +
    "\025\076\030\001\002\000\022\020\uff92\043\033\046\035" +
    "\047\034\050\027\051\026\075\025\076\030\001\002\000" +
    "\004\037\uffb1\001\002\000\022\017\uffac\043\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\075\uffac\076\uffac\001\002\000" +
    "\022\017\uffaf\043\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\075\uffaf\076\uffaf\001\002\000\004\037\uffb0\001\002\000" +
    "\022\017\uffad\043\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\075\uffad\076\uffad\001\002\000\004\020\153\001\002\000" +
    "\006\020\uffdb\036\146\001\002\000\004\020\uffd9\001\002" +
    "\000\020\043\033\046\035\047\034\050\027\051\026\075" +
    "\025\076\030\001\002\000\004\020\uffda\001\002\000\006" +
    "\020\uffd7\036\151\001\002\000\020\043\033\046\035\047" +
    "\034\050\027\051\026\075\025\076\030\001\002\000\004" +
    "\020\uffd8\001\002\000\022\013\uffdc\014\uffdc\015\uffdc\016" +
    "\uffdc\020\uffdc\037\uffdc\044\uffdc\045\uffdc\001\002\000\022" +
    "\013\167\014\162\015\163\016\166\020\uff92\037\uff92\044" +
    "\164\045\165\001\002\000\004\037\uffde\001\002\000\022" +
    "\017\156\043\033\046\160\047\034\050\027\051\026\075" +
    "\025\076\030\001\002\000\022\013\167\014\162\015\163" +
    "\016\166\020\uff92\037\uff92\044\164\045\165\001\002\000" +
    "\024\013\uffa2\014\uffa2\015\uffa2\016\uffa2\017\135\020\uffa2" +
    "\037\uffa2\044\uffa2\045\uffa2\001\002\000\006\020\uffc5\037" +
    "\uffc5\001\002\000\022\017\uffb6\043\uffb6\046\uffb6\047\uffb6" +
    "\050\uffb6\051\uffb6\075\uffb6\076\uffb6\001\002\000\022\017" +
    "\uffb5\043\uffb5\046\uffb5\047\uffb5\050\uffb5\051\uffb5\075\uffb5" +
    "\076\uffb5\001\002\000\022\017\uffb3\043\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\075\uffb3\076\uffb3\001\002\000\022" +
    "\017\uffb2\043\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\075" +
    "\uffb2\076\uffb2\001\002\000\022\017\uffb4\043\uffb4\046\uffb4" +
    "\047\uffb4\050\uffb4\051\uffb4\075\uffb4\076\uffb4\001\002\000" +
    "\022\017\uffb7\043\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7" +
    "\075\uffb7\076\uffb7\001\002\000\006\020\uffc1\037\uffc1\001" +
    "\002\000\022\017\156\043\033\046\160\047\034\050\027" +
    "\051\026\075\025\076\030\001\002\000\006\020\uffc2\037" +
    "\uffc2\001\002\000\004\020\174\001\002\000\022\013\167" +
    "\014\162\015\163\016\166\020\uff92\037\uff92\044\164\045" +
    "\165\001\002\000\006\020\uffc3\037\uffc3\001\002\000\006" +
    "\020\uffc4\037\uffc4\001\002\000\004\037\uffdf\001\002\000" +
    "\026\046\uffe0\055\uffe0\056\uffe0\057\uffe0\062\uffe0\063\uffe0" +
    "\064\uffe0\066\uffe0\067\uffe0\072\uffe0\001\002\000\012\055" +
    "\uffe8\056\uffe8\057\uffe8\066\uffe8\001\002\000\012\055\uffe7" +
    "\056\uffe7\057\uffe7\066\uffe7\001\002\000\012\055\uffe6\056" +
    "\uffe6\057\uffe6\066\uffe6\001\002\000\012\046\035\047\034" +
    "\050\027\051\026\001\002\000\006\020\uff92\036\207\001" +
    "\002\000\004\020\213\001\002\000\012\046\035\047\034" +
    "\050\027\051\026\001\002\000\004\020\uffcf\001\002\000" +
    "\006\020\uff92\036\207\001\002\000\004\020\uffd0\001\002" +
    "\000\004\037\214\001\002\000\026\046\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\062\uffd1\063\uffd1\064\uffd1\066\uffd1\067\uffd1" +
    "\072\uffd1\001\002\000\016\007\250\010\244\011\247\012" +
    "\245\024\246\025\243\001\002\000\004\065\232\001\002" +
    "\000\022\017\217\043\033\046\035\047\034\050\027\051" +
    "\026\075\025\076\030\001\002\000\014\020\uff92\041\223" +
    "\042\222\065\uff92\074\uff92\001\002\000\010\020\uffc0\065" +
    "\uffc0\074\uffc0\001\002\000\022\017\217\043\033\046\035" +
    "\047\034\050\027\051\026\075\025\076\030\001\002\000" +
    "\022\017\217\043\033\046\035\047\034\050\027\051\026" +
    "\075\025\076\030\001\002\000\010\020\uffbb\065\uffbb\074" +
    "\uffbb\001\002\000\010\020\uffbc\065\uffbc\074\uffbc\001\002" +
    "\000\010\020\uffbd\065\uffbd\074\uffbd\001\002\000\004\020" +
    "\230\001\002\000\014\020\uff92\041\223\042\222\065\uff92" +
    "\074\uff92\001\002\000\010\020\uffbe\065\uffbe\074\uffbe\001" +
    "\002\000\022\046\106\055\uff92\062\073\063\100\064\077" +
    "\066\uff92\067\074\072\110\001\002\000\006\055\uff92\066" +
    "\235\001\002\000\004\055\uffca\001\002\000\020\046\106" +
    "\055\uff92\062\073\063\100\064\077\067\074\072\110\001" +
    "\002\000\004\055\240\001\002\000\004\055\uffc9\001\002" +
    "\000\026\046\uffcb\055\uffcb\056\uffcb\057\uffcb\062\uffcb\063" +
    "\uffcb\064\uffcb\066\uffcb\067\uffcb\072\uffcb\001\002\000\004" +
    "\055\uffc8\001\002\000\012\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\001\002\000\012\046\uffa7\047\uffa7\050\uffa7\051\uffa7" +
    "\001\002\000\012\046\uffab\047\uffab\050\uffab\051\uffab\001" +
    "\002\000\012\046\uffa9\047\uffa9\050\uffa9\051\uffa9\001\002" +
    "\000\012\046\uffa5\047\uffa5\050\uffa5\051\uffa5\001\002\000" +
    "\012\046\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002\000\012" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\001\002\000\012\046" +
    "\035\047\034\050\027\051\026\001\002\000\014\020\uff92" +
    "\041\223\042\222\065\uff92\074\uff92\001\002\000\010\020" +
    "\uffbf\065\uffbf\074\uffbf\001\002\000\026\046\106\055\uff92" +
    "\056\uff92\057\uff92\062\073\063\100\064\077\066\uff92\067" +
    "\074\072\110\001\002\000\012\055\uffe5\056\uffe5\057\uffe5" +
    "\066\uffe5\001\002\000\004\074\257\001\002\000\004\054" +
    "\260\001\002\000\020\046\106\055\uff92\062\073\063\100" +
    "\064\077\067\074\072\110\001\002\000\004\055\262\001" +
    "\002\000\026\046\uffc7\055\uffc7\056\uffc7\057\uffc7\062\uffc7" +
    "\063\uffc7\064\uffc7\066\uffc7\067\uffc7\072\uffc7\001\002\000" +
    "\004\037\uffd3\001\002\000\004\037\266\001\002\000\004" +
    "\037\uffd2\001\002\000\026\046\uffd4\055\uffd4\056\uffd4\057" +
    "\uffd4\062\uffd4\063\uffd4\064\uffd4\066\uffd4\067\uffd4\072\uffd4" +
    "\001\002\000\020\046\106\055\uff92\062\073\063\100\064" +
    "\077\067\074\072\110\001\002\000\004\055\271\001\002" +
    "\000\004\002\uffff\001\002\000\004\054\ufffd\001\002\000" +
    "\006\036\276\040\uff92\001\002\000\016\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\001\002\000\004\040" +
    "\302\001\002\000\004\046\300\001\002\000\004\040\ufff6" +
    "\001\002\000\006\036\276\040\uff92\001\002\000\004\040" +
    "\ufff7\001\002\000\020\077\047\100\051\101\055\102\061" +
    "\103\056\104\053\105\057\001\002\000\004\037\304\001" +
    "\002\000\020\046\273\054\uff92\055\uff92\056\uff92\057\uff92" +
    "\060\uff92\061\uff92\001\002\000\016\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\001\002\000\016\054\ufff5" +
    "\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5\001\002\000" +
    "\016\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\001\002\000\004\054\ufffe\001\002\000\004\017\312\001" +
    "\002\000\022\020\uff92\077\047\100\051\101\055\102\061" +
    "\103\056\104\053\105\057\001\002\000\004\020\314\001" +
    "\002\000\004\054\315\001\002\000\024\046\106\055\uff92" +
    "\056\uff92\057\uff92\062\073\063\100\064\077\067\074\072" +
    "\110\001\002\000\004\055\317\001\002\000\014\054\uffef" +
    "\056\uffef\057\uffef\060\uffef\061\uffef\001\002\000\004\054" +
    "\ufffc\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\317\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\014" +
    "\016\011\017\013\020\007\064\016\001\001\000\014\004" +
    "\317\016\011\017\013\020\007\064\016\001\001\000\002" +
    "\001\001\000\014\004\307\016\011\017\013\020\007\064" +
    "\016\001\001\000\004\010\273\001\001\000\014\004\271" +
    "\016\011\017\013\020\007\064\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\030\053\023\062\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\013\042\014\041" +
    "\064\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\015\051\023\047" +
    "\024\053\064\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\063\064\064\001\001\000\006\015\051\024\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\070\001\001\000\002\001" +
    "\001\000\032\005\111\006\110\021\104\035\100\040\075" +
    "\041\101\042\103\044\113\046\074\055\106\056\102\064" +
    "\112\001\001\000\010\043\263\053\262\064\264\001\001" +
    "\000\010\050\255\053\214\062\217\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\050\215\053\214\062\217" +
    "\001\001\000\002\001\001\000\030\005\202\021\104\035" +
    "\100\040\075\041\101\042\103\044\113\046\074\055\106" +
    "\056\102\064\112\001\001\000\030\005\201\021\104\035" +
    "\100\040\075\041\101\042\103\044\113\046\074\055\106" +
    "\056\102\064\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\200\021\104\035\100\040\075\041\101" +
    "\042\103\044\113\046\074\055\106\056\102\064\112\001" +
    "\001\000\010\022\127\033\131\034\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\052" +
    "\120\053\023\062\031\001\001\000\002\001\001\000\010" +
    "\052\122\053\023\062\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\125\021\104\035\100\040\075" +
    "\041\101\042\103\044\113\046\074\055\106\056\102\064" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\027" +
    "\176\040\153\052\156\053\023\062\031\001\001\000\014" +
    "\027\154\040\153\052\156\053\023\062\031\001\001\000" +
    "\014\036\142\052\143\053\023\062\031\064\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\037\146\052\147\053" +
    "\023\062\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\037\151\052\147\053\023\062\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\030\175\032\170" +
    "\064\167\001\001\000\002\001\001\000\014\027\172\040" +
    "\153\052\156\053\023\062\031\001\001\000\010\030\160" +
    "\032\170\064\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\027\171\040\153\052\156\053\023" +
    "\062\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\030\174\032\170\064\167\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\053\204\001\001\000\006\045\205\064\207\001\001\000" +
    "\002\001\001\000\004\053\210\001\001\000\002\001\001" +
    "\000\006\045\211\064\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\057\241\060\250" +
    "\001\001\000\002\001\001\000\010\050\226\053\214\062" +
    "\217\001\001\000\006\054\220\064\223\001\001\000\002" +
    "\001\001\000\010\050\225\053\214\062\217\001\001\000" +
    "\010\050\224\053\214\062\217\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\054\230\064\223\001\001\000\002\001\001\000\030" +
    "\005\232\021\104\035\100\040\075\041\101\042\103\044" +
    "\113\046\074\055\106\056\102\064\112\001\001\000\010" +
    "\047\235\051\233\064\236\001\001\000\002\001\001\000" +
    "\030\005\240\021\104\035\100\040\075\041\101\042\103" +
    "\044\113\046\074\055\106\056\102\064\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\251\001\001\000\006\054" +
    "\252\064\223\001\001\000\002\001\001\000\030\005\254" +
    "\021\104\035\100\040\075\041\101\042\103\044\113\046" +
    "\074\055\106\056\102\064\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\005\260\021" +
    "\104\035\100\040\075\041\101\042\103\044\113\046\074" +
    "\055\106\056\102\064\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\267\021\104\035" +
    "\100\040\075\041\101\042\103\044\113\046\074\055\106" +
    "\056\102\064\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\274\064\276\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\300\064\276\001\001\000\002" +
    "\001\001\000\004\015\302\001\001\000\002\001\001\000" +
    "\010\010\305\012\304\064\306\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\051\023\312\024\053\064\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\005" +
    "\111\006\315\021\104\035\100\040\075\041\101\042\103" +
    "\044\113\046\074\055\106\056\102\064\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }

    public void Prueba()
    {
        /*try
        {
            System.out.println(action_obj.parser.parse().left);
        }
        catch (Exception e) {
            e.printStackTrace();
        }*/
    }

    public void RegistrarErrorPantalla(String pMsg)
    {
        Main.miInstancia.agregarErrorSintactico(pMsg);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;
		 RegistrarErrorPantalla("Correcto!"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN cuerpo_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= declarar_datos encabezado 
            {
              Symbol RESULT =null;
		 RegistrarErrorPantalla("Encabezado!"); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // encabezado ::= declarar_funciones encabezado 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // encabezado ::= declarar_procedimientos encabezado 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // encabezado ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declarar_datos ::= VAR variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declarar_datos ::= CONST constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // variables ::= IDENTIFICADOR _variables OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA __variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",6, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // _variables ::= OPERADOR_COMA IDENTIFICADOR _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // _variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // __variables ::= variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // __variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION_2 tokens OPERADOR_PUNTO_Y_COMA _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // _constantes ::= constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // _constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos BEGIN cuerpo_2 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",13, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR BEGIN cuerpo_2 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parametros_entrada ::= _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _parametros_entrada ::= tipos IDENTIFICADOR __parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_entrada",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // __parametros_entrada ::= OPERADOR_COMA _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // __parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cuerpo_1 ::= asignar_valores cuerpo_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo_1",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cuerpo_1 ::= expr_read_write cuerpo_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo_1",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cuerpo_1 ::= estruc_de_control cuerpo_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo_1",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cuerpo_1 ::= llamar_func_o_proc OPERADOR_PUNTO_Y_COMA cuerpo_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo_1",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cuerpo_1 ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo_1",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cuerpo_2 ::= cuerpo_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo_2",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cuerpo_2 ::= cuerpo_1 declarar_datos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo_2",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // _cuerpo_2 ::= cuerpo_2 retorno_funcion 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo_2",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // asignar_valores ::= IDENTIFICADOR _asignar_valores OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // _asignar_valores ::= OPERADOR_ASIGNACION_1 expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // _asignar_valores ::= ___operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // _asignar_valores ::= __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_asignar_valores",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parametros_llamada_func ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // _parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // _parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expr_read_write ::= expr_read 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expr_read_write ::= expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr_read ::= READ _expr_read OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // _expr_read ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // _expr_read ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr_write ::= WRITE OPERADOR_PARENTESIS_ABRIR _tokens _expr_write OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // _expr_write ::= OPERADOR_COMA _tokens _expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // _expr_write ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // estruc_de_control ::= sentencia_if 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // estruc_de_control ::= sentencia_while 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // estruc_de_control ::= sentencia_for 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentencia_if ::= IF expr_booleanas THEN cuerpo_1 _sentencia_if END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _sentencia_if ::= sentencia_else 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _sentencia_if ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentencia_else ::= ELSE cuerpo_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentencia_while ::= WHILE expr_booleanas DO BEGIN cuerpo_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION_1 tokens TO tokens DO BEGIN cuerpo_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_aritmeticas ::= tokens _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_aritmeticas ::= llamar_func_o_proc _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",21, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _expr_aritmeticas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_booleanas ::= _tokens operadores_booleanos_1 _tokens _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // _expr_booleanas ::= AND expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // _expr_booleanas ::= OR expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // _expr_booleanas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _operadores_aritmeticos ::= MOD 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _operadores_aritmeticos ::= DIV 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",24, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",25, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",45, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // operadores_booleanos_1 ::= operadores_booleanos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // operadores_booleanos_1 ::= OPERADOR_ASIGNACION_2 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",46, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // tokens ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // tokens ::= tokens_boolean 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // _tokens ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // _tokens ::= LITERAL_STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // tokens_boolean ::= TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // tokens_boolean ::= FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tokens_boolean ::= NOT TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tokens_boolean ::= NOT FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // tipos ::= INT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // tipos ::= SHORTINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // tipos ::= LONGINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // tipos ::= REAL 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tipos ::= STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tipos ::= CHAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tipos ::= BOOLEAN 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Er_retorno_funcion ::= asignar_valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Er_retorno_funcion",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Er_retorno_funcion ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Er_retorno_funcion",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
