
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
import lexico.Main;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Syntax extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Syntax() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Syntax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Syntax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\173\000\002\002\004\000\002\002\003\000\002\003" +
    "\010\000\002\004\004\000\002\021\004\000\002\007\004" +
    "\000\002\007\003\000\002\011\004\000\002\012\003\000" +
    "\002\012\004\000\002\013\005\000\002\013\006\000\002" +
    "\014\004\000\002\014\003\000\002\015\007\000\002\016" +
    "\003\000\002\016\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\004\000\002\023\004\000\002\023\003\000" +
    "\002\023\003\000\002\025\016\000\002\025\015\000\002" +
    "\026\013\000\002\026\012\000\002\037\006\000\002\034" +
    "\003\000\002\034\003\000\002\035\005\000\002\036\004" +
    "\000\002\036\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\006\003\000\002" +
    "\006\003\000\002\024\003\000\002\024\004\000\002\024" +
    "\003\000\002\024\004\000\002\030\006\000\002\031\005" +
    "\000\002\031\004\000\002\051\006\000\002\047\003\000" +
    "\002\047\005\000\002\047\003\000\002\050\005\000\002" +
    "\050\003\000\002\052\003\000\002\052\003\000\002\053" +
    "\005\000\002\054\003\000\002\054\003\000\002\055\010" +
    "\000\002\056\005\000\002\056\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\061\010\000\002" +
    "\062\003\000\002\062\003\000\002\064\004\000\002\070" +
    "\010\000\002\071\014\000\002\040\004\000\002\040\004" +
    "\000\002\040\006\000\002\041\004\000\002\041\003\000" +
    "\002\063\004\000\002\063\006\000\002\063\006\000\002" +
    "\067\004\000\002\067\004\000\002\067\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\044\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\073\003\000\002\073\003\000\002\065\003\000\002" +
    "\065\003\000\002\066\003\000\002\066\003\000\002\066" +
    "\003\000\002\066\003\000\002\075\003\000\002\075\003" +
    "\000\002\075\004\000\002\075\004\000\002\075\004\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\077\002\000\002\076\003\000\002\076\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\004\053\006\001\002\000\004\002\000\001" +
    "\002\000\004\002\330\001\002\000\004\046\007\001\002" +
    "\000\014\054\uff89\056\010\057\uff89\060\uff89\061\uff89\001" +
    "\002\000\004\046\321\001\002\000\010\054\uff89\060\256" +
    "\061\252\001\002\000\030\046\uff89\054\uff89\055\uff89\057" +
    "\225\060\uff89\061\uff89\062\uff89\063\uff89\064\uff89\067\uff89" +
    "\072\uff89\001\002\000\030\046\ufff4\054\ufff4\055\ufff4\057" +
    "\ufff4\060\ufff4\061\ufff4\062\ufff4\063\ufff4\064\ufff4\067\ufff4" +
    "\072\ufff4\001\002\000\004\054\015\001\002\000\020\046" +
    "\033\055\uff89\062\016\063\025\064\024\067\021\072\037" +
    "\001\002\000\014\037\uff89\046\055\047\054\050\047\051" +
    "\046\001\002\000\022\046\uffde\055\uffde\062\uffde\063\uffde" +
    "\064\uffde\066\uffde\067\uffde\072\uffde\001\002\000\022\046" +
    "\033\055\uffdc\062\016\063\025\064\024\066\uffdc\067\021" +
    "\072\037\001\002\000\022\017\154\043\053\046\055\047" +
    "\054\050\047\051\046\075\045\076\050\001\002\000\022" +
    "\046\uffc5\055\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\067" +
    "\uffc5\072\uffc5\001\002\000\004\037\211\001\002\000\022" +
    "\017\154\043\053\046\055\047\054\050\047\051\046\075" +
    "\045\076\050\001\002\000\004\017\141\001\002\000\022" +
    "\046\uffdd\055\uffdd\062\uffdd\063\uffdd\064\uffdd\066\uffdd\067" +
    "\uffdd\072\uffdd\001\002\000\022\046\uffd8\055\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\066\uffd8\067\uffd8\072\uffd8\001\002\000" +
    "\004\055\140\001\002\000\022\046\uffc3\055\uffc3\062\uffc3" +
    "\063\uffc3\064\uffc3\066\uffc3\067\uffc3\072\uffc3\001\002\000" +
    "\022\046\uffcd\055\uffcd\062\uffcd\063\uffcd\064\uffcd\066\uffcd" +
    "\067\uffcd\072\uffcd\001\002\000\022\005\074\006\100\017" +
    "\075\023\072\026\077\027\070\030\101\031\076\001\002" +
    "\000\022\046\uffc4\055\uffc4\062\uffc4\063\uffc4\064\uffc4\066" +
    "\uffc4\067\uffc4\072\uffc4\001\002\000\004\037\067\001\002" +
    "\000\022\046\uffda\055\uffda\062\uffda\063\uffda\064\uffda\066" +
    "\uffda\067\uffda\072\uffda\001\002\000\004\046\042\001\002" +
    "\000\006\055\uffdb\066\uffdb\001\002\000\022\046\uffcc\055" +
    "\uffcc\062\uffcc\063\uffcc\064\uffcc\066\uffcc\067\uffcc\072\uffcc" +
    "\001\002\000\004\023\043\001\002\000\020\043\053\046" +
    "\055\047\054\050\047\051\046\075\045\076\050\001\002" +
    "\000\030\013\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\036" +
    "\uff9b\037\uff9b\044\uff9b\045\uff9b\073\uff9b\074\uff9b\001\002" +
    "\000\036\013\uff95\014\uff95\015\uff95\016\uff95\020\uff95\036" +
    "\uff95\037\uff95\041\uff95\042\uff95\044\uff95\045\uff95\065\uff95" +
    "\073\uff95\074\uff95\001\002\000\052\007\uff98\010\uff98\011" +
    "\uff98\012\uff98\013\uff98\014\uff98\015\uff98\016\uff98\020\uff98" +
    "\024\uff98\025\uff98\036\uff98\037\uff98\041\uff98\042\uff98\044" +
    "\uff98\045\uff98\065\uff98\073\uff98\074\uff98\001\002\000\052" +
    "\007\uff96\010\uff96\011\uff96\012\uff96\013\uff96\014\uff96\015" +
    "\uff96\016\uff96\020\uff96\024\uff96\025\uff96\036\uff96\037\uff96" +
    "\041\uff96\042\uff96\044\uff96\045\uff96\065\uff96\073\uff96\074" +
    "\uff96\001\002\000\036\013\uff94\014\uff94\015\uff94\016\uff94" +
    "\020\uff94\036\uff94\037\uff94\041\uff94\042\uff94\044\uff94\045" +
    "\uff94\065\uff94\073\uff94\074\uff94\001\002\000\004\073\061" +
    "\001\002\000\030\013\uff9a\014\uff9a\015\uff9a\016\uff9a\020" +
    "\uff9a\036\uff9a\037\uff9a\044\uff9a\045\uff9a\073\uff9a\074\uff9a" +
    "\001\002\000\010\046\056\075\057\076\060\001\002\000" +
    "\052\007\uff97\010\uff97\011\uff97\012\uff97\013\uff97\014\uff97" +
    "\015\uff97\016\uff97\020\uff97\024\uff97\025\uff97\036\uff97\037" +
    "\uff97\041\uff97\042\uff97\044\uff97\045\uff97\065\uff97\073\uff97" +
    "\074\uff97\001\002\000\036\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\020\uff99\024\uff99\025\uff99\036\uff99\037\uff99\041\uff99" +
    "\042\uff99\065\uff99\073\uff99\074\uff99\001\002\000\036\013" +
    "\uff93\014\uff93\015\uff93\016\uff93\020\uff93\036\uff93\037\uff93" +
    "\041\uff93\042\uff93\044\uff93\045\uff93\065\uff93\073\uff93\074" +
    "\uff93\001\002\000\036\013\uff92\014\uff92\015\uff92\016\uff92" +
    "\020\uff92\036\uff92\037\uff92\041\uff92\042\uff92\044\uff92\045" +
    "\uff92\065\uff92\073\uff92\074\uff92\001\002\000\036\013\uff91" +
    "\014\uff91\015\uff91\016\uff91\020\uff91\036\uff91\037\uff91\041" +
    "\uff91\042\uff91\044\uff91\045\uff91\065\uff91\073\uff91\074\uff91" +
    "\001\002\000\020\043\053\046\055\047\054\050\047\051" +
    "\046\075\045\076\050\001\002\000\004\074\063\001\002" +
    "\000\004\054\064\001\002\000\020\046\033\055\uff89\062" +
    "\016\063\025\064\024\067\021\072\037\001\002\000\004" +
    "\055\066\001\002\000\022\046\uffbd\055\uffbd\062\uffbd\063" +
    "\uffbd\064\uffbd\066\uffbd\067\uffbd\072\uffbd\001\002\000\022" +
    "\046\uffd9\055\uffd9\062\uffd9\063\uffd9\064\uffd9\066\uffd9\067" +
    "\uffd9\072\uffd9\001\002\000\022\017\uffa5\043\uffa5\046\uffa5" +
    "\047\uffa5\050\uffa5\051\uffa5\075\uffa5\076\uffa5\001\002\000" +
    "\004\037\uffd4\001\002\000\022\017\115\043\053\046\117" +
    "\047\054\050\047\051\046\075\045\076\050\001\002\000" +
    "\022\017\115\043\053\046\117\047\054\050\047\051\046" +
    "\075\045\076\050\001\002\000\004\037\uffa8\001\002\000" +
    "\022\020\uff89\043\053\046\055\047\054\050\047\051\046" +
    "\075\045\076\050\001\002\000\022\017\uffa3\043\uffa3\046" +
    "\uffa3\047\uffa3\050\uffa3\051\uffa3\075\uffa3\076\uffa3\001\002" +
    "\000\022\017\uffa6\043\uffa6\046\uffa6\047\uffa6\050\uffa6\051" +
    "\uffa6\075\uffa6\076\uffa6\001\002\000\004\037\uffa7\001\002" +
    "\000\022\017\uffa4\043\uffa4\046\uffa4\047\uffa4\050\uffa4\051" +
    "\uffa4\075\uffa4\076\uffa4\001\002\000\004\020\112\001\002" +
    "\000\006\020\uffd2\036\105\001\002\000\004\020\uffd0\001" +
    "\002\000\020\043\053\046\055\047\054\050\047\051\046" +
    "\075\045\076\050\001\002\000\004\020\uffd1\001\002\000" +
    "\006\020\uffce\036\110\001\002\000\020\043\053\046\055" +
    "\047\054\050\047\051\046\075\045\076\050\001\002\000" +
    "\004\020\uffcf\001\002\000\022\013\uffd3\014\uffd3\015\uffd3" +
    "\016\uffd3\020\uffd3\037\uffd3\044\uffd3\045\uffd3\001\002\000" +
    "\022\013\126\014\121\015\122\016\125\020\uff89\037\uff89" +
    "\044\123\045\124\001\002\000\004\037\uffd5\001\002\000" +
    "\022\017\115\043\053\046\117\047\054\050\047\051\046" +
    "\075\045\076\050\001\002\000\022\013\126\014\121\015" +
    "\122\016\125\020\uff89\037\uff89\044\123\045\124\001\002" +
    "\000\024\013\uff99\014\uff99\015\uff99\016\uff99\017\075\020" +
    "\uff99\037\uff99\044\uff99\045\uff99\001\002\000\006\020\uffbc" +
    "\037\uffbc\001\002\000\022\017\uffad\043\uffad\046\uffad\047" +
    "\uffad\050\uffad\051\uffad\075\uffad\076\uffad\001\002\000\022" +
    "\017\uffac\043\uffac\046\uffac\047\uffac\050\uffac\051\uffac\075" +
    "\uffac\076\uffac\001\002\000\022\017\uffaa\043\uffaa\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\075\uffaa\076\uffaa\001\002\000" +
    "\022\017\uffa9\043\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\075\uffa9\076\uffa9\001\002\000\022\017\uffab\043\uffab\046" +
    "\uffab\047\uffab\050\uffab\051\uffab\075\uffab\076\uffab\001\002" +
    "\000\022\017\uffae\043\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\075\uffae\076\uffae\001\002\000\022\017\115\043\053" +
    "\046\117\047\054\050\047\051\046\075\045\076\050\001" +
    "\002\000\006\020\uffb8\037\uffb8\001\002\000\006\020\uffb9" +
    "\037\uffb9\001\002\000\004\020\133\001\002\000\022\013" +
    "\126\014\121\015\122\016\125\020\uff89\037\uff89\044\123" +
    "\045\124\001\002\000\006\020\uffba\037\uffba\001\002\000" +
    "\006\020\uffbb\037\uffbb\001\002\000\004\037\137\001\002" +
    "\000\022\046\uffd6\055\uffd6\062\uffd6\063\uffd6\064\uffd6\066" +
    "\uffd6\067\uffd6\072\uffd6\001\002\000\004\002\uffff\001\002" +
    "\000\012\046\055\047\054\050\047\051\046\001\002\000" +
    "\006\020\uff89\036\144\001\002\000\004\020\150\001\002" +
    "\000\012\046\055\047\054\050\047\051\046\001\002\000" +
    "\004\020\uffc6\001\002\000\006\020\uff89\036\144\001\002" +
    "\000\004\020\uffc7\001\002\000\004\037\151\001\002\000" +
    "\022\046\uffc8\055\uffc8\062\uffc8\063\uffc8\064\uffc8\066\uffc8" +
    "\067\uffc8\072\uffc8\001\002\000\016\007\205\010\201\011" +
    "\204\012\202\024\203\025\200\001\002\000\004\065\167" +
    "\001\002\000\022\017\154\043\053\046\055\047\054\050" +
    "\047\051\046\075\045\076\050\001\002\000\014\020\uff89" +
    "\041\160\042\157\065\uff89\074\uff89\001\002\000\010\020" +
    "\uffb7\065\uffb7\074\uffb7\001\002\000\022\017\154\043\053" +
    "\046\055\047\054\050\047\051\046\075\045\076\050\001" +
    "\002\000\022\017\154\043\053\046\055\047\054\050\047" +
    "\051\046\075\045\076\050\001\002\000\010\020\uffb2\065" +
    "\uffb2\074\uffb2\001\002\000\010\020\uffb3\065\uffb3\074\uffb3" +
    "\001\002\000\010\020\uffb4\065\uffb4\074\uffb4\001\002\000" +
    "\004\020\165\001\002\000\014\020\uff89\041\160\042\157" +
    "\065\uff89\074\uff89\001\002\000\010\020\uffb5\065\uffb5\074" +
    "\uffb5\001\002\000\022\046\033\055\uff89\062\016\063\025" +
    "\064\024\066\uff89\067\021\072\037\001\002\000\006\055" +
    "\uff89\066\171\001\002\000\020\046\033\055\uff89\062\016" +
    "\063\025\064\024\067\021\072\037\001\002\000\004\055" +
    "\uffc1\001\002\000\004\055\175\001\002\000\004\055\uffc0" +
    "\001\002\000\022\046\uffc2\055\uffc2\062\uffc2\063\uffc2\064" +
    "\uffc2\066\uffc2\067\uffc2\072\uffc2\001\002\000\004\055\uffbf" +
    "\001\002\000\012\046\uff9d\047\uff9d\050\uff9d\051\uff9d\001" +
    "\002\000\012\046\uff9e\047\uff9e\050\uff9e\051\uff9e\001\002" +
    "\000\012\046\uffa2\047\uffa2\050\uffa2\051\uffa2\001\002\000" +
    "\012\046\uffa0\047\uffa0\050\uffa0\051\uffa0\001\002\000\012" +
    "\046\uff9c\047\uff9c\050\uff9c\051\uff9c\001\002\000\012\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\001\002\000\012\046\uffa1" +
    "\047\uffa1\050\uffa1\051\uffa1\001\002\000\012\046\055\047" +
    "\054\050\047\051\046\001\002\000\014\020\uff89\041\160" +
    "\042\157\065\uff89\074\uff89\001\002\000\010\020\uffb6\065" +
    "\uffb6\074\uffb6\001\002\000\022\046\uffd7\055\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\066\uffd7\067\uffd7\072\uffd7\001\002\000" +
    "\004\074\213\001\002\000\004\054\214\001\002\000\020" +
    "\046\033\055\uff89\062\016\063\025\064\024\067\021\072" +
    "\037\001\002\000\004\055\216\001\002\000\022\046\uffbe" +
    "\055\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe\067\uffbe\072" +
    "\uffbe\001\002\000\022\046\uffdf\055\uffdf\062\uffdf\063\uffdf" +
    "\064\uffdf\066\uffdf\067\uffdf\072\uffdf\001\002\000\022\046" +
    "\uffe0\055\uffe0\062\uffe0\063\uffe0\064\uffe0\066\uffe0\067\uffe0" +
    "\072\uffe0\001\002\000\004\037\uffca\001\002\000\004\037" +
    "\224\001\002\000\004\037\uffc9\001\002\000\022\046\uffcb" +
    "\055\uffcb\062\uffcb\063\uffcb\064\uffcb\066\uffcb\067\uffcb\072" +
    "\uffcb\001\002\000\004\046\231\001\002\000\026\046\ufffb" +
    "\054\ufffb\055\ufffb\060\ufffb\061\ufffb\062\ufffb\063\ufffb\064" +
    "\ufffb\067\ufffb\072\ufffb\001\002\000\026\046\ufffd\054\ufffd" +
    "\055\ufffd\060\ufffd\061\ufffd\062\ufffd\063\ufffd\064\ufffd\067" +
    "\ufffd\072\ufffd\001\002\000\026\046\ufffc\054\ufffc\055\ufffc" +
    "\060\ufffc\061\ufffc\062\ufffc\063\ufffc\064\ufffc\067\ufffc\072" +
    "\ufffc\001\002\000\006\036\233\040\235\001\002\000\026" +
    "\046\ufff9\054\ufff9\055\ufff9\060\ufff9\061\ufff9\062\ufff9\063" +
    "\ufff9\064\ufff9\067\ufff9\072\ufff9\001\002\000\004\046\231" +
    "\001\002\000\026\046\ufffa\054\ufffa\055\ufffa\060\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\067\ufffa\072\ufffa\001\002" +
    "\000\020\077\245\100\241\101\240\102\243\103\236\104" +
    "\244\105\237\001\002\000\010\037\uff8c\046\uff8c\054\uff8c" +
    "\001\002\000\010\037\uff8d\046\uff8d\054\uff8d\001\002\000" +
    "\010\037\uff8f\046\uff8f\054\uff8f\001\002\000\010\037\uff8e" +
    "\046\uff8e\054\uff8e\001\002\000\004\037\246\001\002\000" +
    "\010\037\uff8b\046\uff8b\054\uff8b\001\002\000\010\037\uff8a" +
    "\046\uff8a\054\uff8a\001\002\000\010\037\uff90\046\uff90\054" +
    "\uff90\001\002\000\026\046\231\054\ufff7\055\ufff7\060\ufff7" +
    "\061\ufff7\062\ufff7\063\ufff7\064\ufff7\067\ufff7\072\ufff7\001" +
    "\002\000\026\046\ufff6\054\ufff6\055\ufff6\060\ufff6\061\ufff6" +
    "\062\ufff6\063\ufff6\064\ufff6\067\ufff6\072\ufff6\001\002\000" +
    "\026\046\ufff8\054\ufff8\055\ufff8\060\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\064\ufff8\067\ufff8\072\ufff8\001\002\000\010\054" +
    "\uffeb\060\256\061\252\001\002\000\004\046\306\001\002" +
    "\000\010\054\uffec\060\256\061\252\001\002\000\004\054" +
    "\ufff0\001\002\000\004\054\ufffe\001\002\000\004\046\260" +
    "\001\002\000\004\054\uffef\001\002\000\004\017\261\001" +
    "\002\000\022\020\uff89\077\245\100\241\101\240\102\243" +
    "\103\236\104\244\105\237\001\002\000\004\020\273\001" +
    "\002\000\004\046\266\001\002\000\004\020\uffe5\001\002" +
    "\000\004\020\uffe4\001\002\000\006\020\uff89\036\267\001" +
    "\002\000\020\077\245\100\241\101\240\102\243\103\236" +
    "\104\244\105\237\001\002\000\004\020\uffe3\001\002\000" +
    "\004\020\uffe1\001\002\000\004\020\uffe2\001\002\000\004" +
    "\040\274\001\002\000\020\077\245\100\241\101\240\102" +
    "\243\103\236\104\244\105\237\001\002\000\004\054\276" +
    "\001\002\000\022\046\uff89\056\010\057\uff89\062\uff89\063" +
    "\uff89\064\uff89\067\uff89\072\uff89\001\002\000\016\046\033" +
    "\062\016\063\025\064\024\067\021\072\037\001\002\000" +
    "\016\046\033\062\016\063\025\064\024\067\021\072\037" +
    "\001\002\000\020\046\uffda\055\302\062\uffda\063\uffda\064" +
    "\uffda\067\uffda\072\uffda\001\002\000\010\054\uffe9\060\uffe9" +
    "\061\uffe9\001\002\000\020\046\uffda\055\304\062\uffda\063" +
    "\uffda\064\uffda\067\uffda\072\uffda\001\002\000\010\054\uffea" +
    "\060\uffea\061\uffea\001\002\000\004\054\uffee\001\002\000" +
    "\004\017\307\001\002\000\022\020\uff89\077\245\100\241" +
    "\101\240\102\243\103\236\104\244\105\237\001\002\000" +
    "\004\020\311\001\002\000\004\054\312\001\002\000\024" +
    "\046\uff89\055\uff89\056\010\057\uff89\062\uff89\063\uff89\064" +
    "\uff89\067\uff89\072\uff89\001\002\000\020\046\033\055\315" +
    "\062\016\063\025\064\024\067\021\072\037\001\002\000" +
    "\020\046\033\055\316\062\016\063\025\064\024\067\021" +
    "\072\037\001\002\000\010\054\uffe7\060\uffe7\061\uffe7\001" +
    "\002\000\010\054\uffe8\060\uffe8\061\uffe8\001\002\000\004" +
    "\054\uffed\001\002\000\030\046\ufff5\054\ufff5\055\ufff5\057" +
    "\ufff5\060\ufff5\061\ufff5\062\ufff5\063\ufff5\064\ufff5\067\ufff5" +
    "\072\ufff5\001\002\000\004\024\322\001\002\000\020\043" +
    "\053\046\055\047\054\050\047\051\046\075\045\076\050" +
    "\001\002\000\004\037\324\001\002\000\030\046\321\054" +
    "\uff89\055\uff89\057\uff89\060\uff89\061\uff89\062\uff89\063\uff89" +
    "\064\uff89\067\uff89\072\uff89\001\002\000\030\046\ufff2\054" +
    "\ufff2\055\ufff2\057\ufff2\060\ufff2\061\ufff2\062\ufff2\063\ufff2" +
    "\064\ufff2\067\ufff2\072\ufff2\001\002\000\030\046\ufff3\054" +
    "\ufff3\055\ufff3\057\ufff3\060\ufff3\061\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\067\ufff3\072\ufff3\001\002\000\030\046\ufff1\054" +
    "\ufff1\055\ufff1\057\ufff1\060\ufff1\061\ufff1\062\ufff1\063\ufff1" +
    "\064\ufff1\067\ufff1\072\ufff1\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\326\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\004\013" +
    "\014\011\021\010\077\012\001\001\000\004\015\317\001" +
    "\001\000\014\022\254\023\253\025\252\026\250\077\256" +
    "\001\001\000\006\007\226\077\225\001\001\000\002\001" +
    "\001\000\002\001\001\000\036\005\017\006\027\024\016" +
    "\030\035\031\034\046\025\051\022\052\026\053\031\055" +
    "\040\061\021\070\033\071\030\077\037\001\001\000\010" +
    "\054\221\066\220\077\222\001\001\000\002\001\001\000" +
    "\030\024\217\030\035\031\034\046\216\051\022\052\026" +
    "\053\031\055\040\061\021\070\033\071\030\001\001\000" +
    "\010\063\211\066\151\075\154\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\063\152\066\151\075\154\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\044\070\045\072\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\065\050" +
    "\066\043\075\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\065\061\066\043\075" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\036" +
    "\005\017\006\064\024\016\030\035\031\034\046\025\051" +
    "\022\052\026\053\031\055\040\061\021\070\033\071\030" +
    "\077\037\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\040\135\051\112\065\115\066\043\075\051\001\001\000" +
    "\014\040\113\051\112\065\115\066\043\075\051\001\001" +
    "\000\002\001\001\000\014\047\101\065\102\066\043\075" +
    "\051\077\103\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\050\105\065\106" +
    "\066\043\075\051\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\050\110\065\106\066\043\075\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\041\134\043" +
    "\126\077\127\001\001\000\002\001\001\000\014\040\131" +
    "\051\112\065\115\066\043\075\051\001\001\000\010\041" +
    "\117\043\126\077\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\040\130\051\112\065\115\066\043\075\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\041\133\043\126\077\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\141\001\001\000\006\056" +
    "\142\077\144\001\001\000\002\001\001\000\004\066\145" +
    "\001\001\000\002\001\001\000\006\056\146\077\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\072\176\073\205\001\001\000\002\001\001\000" +
    "\010\063\163\066\151\075\154\001\001\000\006\067\155" +
    "\077\160\001\001\000\002\001\001\000\010\063\162\066" +
    "\151\075\154\001\001\000\010\063\161\066\151\075\154" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\067\165\077\160\001\001" +
    "\000\002\001\001\000\036\005\017\006\167\024\016\030" +
    "\035\031\034\046\025\051\022\052\026\053\031\055\040" +
    "\061\021\070\033\071\030\077\037\001\001\000\010\062" +
    "\172\064\171\077\173\001\001\000\036\005\017\006\175" +
    "\024\016\030\035\031\034\046\025\051\022\052\026\053" +
    "\031\055\040\061\021\070\033\071\030\077\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\066\206" +
    "\001\001\000\006\067\207\077\160\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\005\017\006\214\024\016\030\035\031\034\046" +
    "\025\051\022\052\026\053\031\055\040\061\021\070\033" +
    "\071\030\077\037\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\227\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\233\013\231\001\001\000" +
    "\002\001\001\000\004\011\247\001\001\000\002\001\001" +
    "\000\004\020\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\246\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\023\316\025\252\026\250\001\001\000\002\001" +
    "\001\000\010\023\304\025\252\026\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\020\262\034\261\035\263" +
    "\077\264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\267\077\270" +
    "\001\001\000\006\020\262\035\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\020\274\001\001\000\002\001\001\000\010\014" +
    "\011\021\276\077\012\001\001\000\032\005\277\024\016" +
    "\030\300\031\034\046\025\051\022\052\026\053\031\055" +
    "\040\061\021\070\033\071\030\001\001\000\030\024\217" +
    "\030\302\031\034\046\216\051\022\052\026\053\031\055" +
    "\040\061\021\070\033\071\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\262\034\307" +
    "\035\263\077\264\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\011\021\312\077\012\001\001\000\032" +
    "\005\313\024\016\030\035\031\034\046\025\051\022\052" +
    "\026\053\031\055\040\061\021\070\033\071\030\001\001" +
    "\000\030\024\217\030\035\031\034\046\216\051\022\052" +
    "\026\053\031\055\040\061\021\070\033\071\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\065\322\066\043" +
    "\075\051\001\001\000\002\001\001\000\010\015\324\016" +
    "\325\077\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Syntax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Syntax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Syntax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }

    public void Prueba()
    {
        /*try
        {
            System.out.println(action_obj.parser.parse().left);
        }
        catch (Exception e) {
            e.printStackTrace();
        }*/
    }

    public void RegistrarErrorPantalla(String pMsg, int linea, int columuna)
    {
        Main.miInstancia.agregarErrorSintactico(pMsg);

        System.out.println(linea);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Syntax$actions {
  private final Syntax parser;

  /** Constructor */
  CUP$Syntax$actions(Syntax parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action_part00000000(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Syntax$result;

      /* select the action based on the action number */
      switch (CUP$Syntax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).right;
		Symbol start_val = (Symbol)((java_cup.runtime.Symbol) CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)).value;
		RESULT = start_val;
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Syntax$parser.done_parsing();
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= programa 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= PROGRAM IDENTIFICADOR encabezado BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("programa",1, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // encabezado ::= declarar_datos declarar_func_proc 
            {
              Symbol RESULT =null;
		 RegistrarErrorPantalla("Correcto!", parser.cur_token.left, parser.cur_token.right);
                                                    System.out.println(parser.cur_token.value.toString()); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("encabezado",2, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarar_datos ::= constantes variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_datos",15, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // variables ::= VAR _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // variables ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("variables",5, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // _variables ::= IDENTIFICADOR __variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_variables",7, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // __variables ::= ___variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // __variables ::= OPERADOR_COMA _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__variables",8, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ___variables ::= OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ___variables ::= OPERADOR_DOS_PUNTOS tipos OPERADOR_PUNTO_Y_COMA _variables 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___variables",9, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // constantes ::= CONST _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("constantes",10, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // _constantes ::= IDENTIFICADOR OPERADOR_ASIGNACION_2 tokens OPERADOR_PUNTO_Y_COMA __constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_constantes",11, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-4)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // __constantes ::= _constantes 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // __constantes ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__constantes",12, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declarar_func_proc ::= _declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declarar_func_proc ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_func_proc",16, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // _declarar_func_proc ::= declarar_funciones _declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_declarar_func_proc",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // _declarar_func_proc ::= declarar_procedimientos _declarar_func_proc 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_declarar_func_proc",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // _declarar_func_proc ::= declarar_funciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_declarar_func_proc",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // _declarar_func_proc ::= declarar_procedimientos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_declarar_func_proc",17, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos BEGIN declarar_datos cuerpo asignar_valores_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-11)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos BEGIN declarar_datos asignar_valores_1 END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_funciones",19, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-10)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR BEGIN declarar_datos cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-8)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR BEGIN declarar_datos END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("declarar_procedimientos",20, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-7)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("retorno_funcion",29, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parametros_entrada ::= _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_entrada",26, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // _parametros_entrada ::= tipos IDENTIFICADOR __parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_entrada",27, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // __parametros_entrada ::= OPERADOR_COMA _parametros_entrada 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // __parametros_entrada ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__parametros_entrada",28, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // cuerpo ::= cuerpo instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // cuerpo ::= cuerpo estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // cuerpo ::= instrucciones 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // cuerpo ::= estruc_de_control 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("cuerpo",3, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // _cuerpo ::= cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // _cuerpo ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_cuerpo",4, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // instrucciones ::= asignar_valores_1 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // instrucciones ::= asignar_valores_2 OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // instrucciones ::= expr_read_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // instrucciones ::= llamar_func_o_proc OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("instrucciones",18, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // asignar_valores_1 ::= IDENTIFICADOR OPERADOR_ASIGNACION_1 expr_aritmeticas OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_1",22, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // asignar_valores_2 ::= IDENTIFICADOR ___operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // asignar_valores_2 ::= IDENTIFICADOR __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("asignar_valores_2",23, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // llamar_func_o_proc ::= IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_llamada_func OPERADOR_PARENTESIS_CERRAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("llamar_func_o_proc",39, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros_llamada_func ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("parametros_llamada_func",37, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // _parametros_llamada_func ::= tokens OPERADOR_COMA _parametros_llamada_func 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // _parametros_llamada_func ::= tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_parametros_llamada_func",38, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr_read_write ::= expr_read 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr_read_write ::= expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read_write",40, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr_read ::= READ _expr_read OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_read",41, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // _expr_read ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // _expr_read ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_read",42, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr_write ::= WRITE OPERADOR_PARENTESIS_ABRIR _tokens _expr_write OPERADOR_PARENTESIS_CERRAR OPERADOR_PUNTO_Y_COMA 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_write",43, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // _expr_write ::= OPERADOR_COMA _tokens _expr_write 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-2)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // _expr_write ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_write",44, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // estruc_de_control ::= sentencia_if 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // estruc_de_control ::= sentencia_while 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // estruc_de_control ::= sentencia_for 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("estruc_de_control",36, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentencia_if ::= IF expr_booleanas THEN _cuerpo _sentencia_if END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_if",47, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // _sentencia_if ::= sentencia_else 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _sentencia_if ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_sentencia_if",48, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencia_else ::= ELSE _cuerpo 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_else",50, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencia_while ::= WHILE expr_booleanas DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_while",54, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-5)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION_1 tokens TO tokens DO BEGIN _cuerpo END 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("sentencia_for",55, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-9)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // expr_aritmeticas ::= tokens _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // expr_aritmeticas ::= llamar_func_o_proc _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expr_aritmeticas ::= OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR _expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_aritmeticas",30, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // _expr_aritmeticas ::= _operadores_aritmeticos expr_aritmeticas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _expr_aritmeticas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_aritmeticas",31, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expr_booleanas ::= tokens_boolean _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expr_booleanas ::= _tokens operadores_booleanos_1 _tokens _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expr_booleanas ::= OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("expr_booleanas",49, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-3)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _expr_booleanas ::= AND expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _expr_booleanas ::= OR expr_booleanas 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _expr_booleanas ::= epsilon 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_expr_booleanas",53, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // operadores_aritmeticos ::= _operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // operadores_aritmeticos ::= __operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // operadores_aritmeticos ::= ___operadores_aritmeticos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_aritmeticos",32, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // _operadores_aritmeticos ::= OPERADOR_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // _operadores_aritmeticos ::= OPERADOR_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // _operadores_aritmeticos ::= OPERADOR_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // _operadores_aritmeticos ::= OPERADOR_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // _operadores_aritmeticos ::= MOD 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // _operadores_aritmeticos ::= DIV 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_operadores_aritmeticos",33, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // __operadores_aritmeticos ::= OPERADOR_INCREMENTO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // __operadores_aritmeticos ::= OPERADOR_DISMINUCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("__operadores_aritmeticos",34, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_ADICION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_SUSTRACCION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_MULTIPLICACION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ___operadores_aritmeticos ::= OPERADOR_ASIGNACION_DIVISION 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("___operadores_aritmeticos",35, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // operadores_booleanos ::= OPERADOR_MAYOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // operadores_booleanos ::= OPERADOR_MAYOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // operadores_booleanos ::= OPERADOR_MENOR_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // operadores_booleanos ::= OPERADOR_MENOR_IGUAL_QUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // operadores_booleanos ::= OPERADOR_DIFERENTE_DE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos",56, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // operadores_booleanos_1 ::= operadores_booleanos 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // operadores_booleanos_1 ::= OPERADOR_ASIGNACION_2 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("operadores_booleanos_1",57, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // tokens ::= _tokens 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // tokens ::= tokens_boolean 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens",51, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // _tokens ::= IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // _tokens ::= LITERAL_NUM_ENTERO 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // _tokens ::= LITERAL_NUM_FLOTANTE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // _tokens ::= LITERAL_STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("_tokens",52, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // tokens_boolean ::= TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // tokens_boolean ::= FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // tokens_boolean ::= NOT IDENTIFICADOR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // tokens_boolean ::= NOT TRUE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // tokens_boolean ::= NOT FALSE 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tokens_boolean",59, ((java_cup.runtime.Symbol)CUP$Syntax$stack.elementAt(CUP$Syntax$top-1)), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // tipos ::= INT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // tipos ::= SHORTINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // tipos ::= LONGINT 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // tipos ::= REAL 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // tipos ::= STRING 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // tipos ::= CHAR 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // tipos ::= BOOLEAN 
            {
              Symbol RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("tipos",14, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // epsilon ::= 
            {
              Symbol RESULT =null;
		 RESULT = new Symbol(-1); 
              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("epsilon",61, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Er_retorno_funcion ::= asignar_valores 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Er_retorno_funcion",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Er_retorno_funcion ::= epsilon 
            {
              Object RESULT =null;

              CUP$Syntax$result = parser.getSymbolFactory().newSymbol("Er_retorno_funcion",60, ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Syntax$stack.peek()), RESULT);
            }
          return CUP$Syntax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Syntax$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Syntax$do_action(
    int                        CUP$Syntax$act_num,
    java_cup.runtime.lr_parser CUP$Syntax$parser,
    java.util.Stack            CUP$Syntax$stack,
    int                        CUP$Syntax$top)
    throws java.lang.Exception
    {
              return CUP$Syntax$do_action_part00000000(
                               CUP$Syntax$act_num,
                               CUP$Syntax$parser,
                               CUP$Syntax$stack,
                               CUP$Syntax$top);
    }
}

}
