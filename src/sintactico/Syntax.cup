package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
// http://www2.cs.tum.edu/projects/cup/docs.php
// https://www.youtube.com/watch?v=AQkd5AwjV1E
// http://themfgeek.blogspot.com/2012/10/sintaxis-cup.html
// https://www.youtube.com/watch?v=bBuWPmDrF5M
// https://youtu.be/tSaPDOT2I_4?t=1120
// DÃ­as de trabajo: Octubre: 17, 19, 20

parser code
{:
    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + "y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + "y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }
:}


// |-------------------- TERMINALES --------------------| //

// Operadores
terminal OPERADOR,
        OPERADOR_INCREMENTO,
        OPERADOR_DISMINUCION,
        OPERADOR_MAYOR_IGUAL_QUE,
        OPERADOR_MAYOR_QUE,
        OPERADOR_MENOR_IGUAL_QUE,
        OPERADOR_MENOR_QUE,
        OPERADOR_ADICION,
        OPERADOR_SUSTRACCION,
        OPERADOR_MULTIPLICACION,
        OPERADOR_DIVISION,
        OPERADOR_PARENTESIS_ABRIR,
        OPERADOR_PARENTESIS_CERRAR,
        OPERADOR_CORCHETE_ABRIR,
        OPERADOR_CORCHETE_CERRAR,
        OPERADOR_ASIGNACION,
        OPERADOR_ASIGNACION_ADICION,
        OPERADOR_ASIGNACION_SUSTRACCION,
        OPERADOR_ASIGNACION_MULTIPLICACION,
        OPERADOR_ASIGNACION_DIVISION,
        OPERADOR_DESPLAZAMIENTO_DERECHA,
        OPERADOR_DESPLAZAMIENTO_IZQUIERDA,
        OPERADOR_ASIGNACION_DESPLAZAMIENTO_DERECHA,
        OPERADOR_ASIGNACION_DESPLAZAMIENTO_IZQUIERDA;

terminal IDENTIFICADOR,
        LITERAL_NUM_FLOTANTE,
        LITERAL_STRING,
        LITERAL_NUM_ENTERO,
        PALABRA_RESERVADA;

terminal BEGIN, END;

terminal IF, THEN, ELSE;

terminal TRUE, FALSE;

terminal INT, LONGINT, SHORTINT, CHAR, STRING, BOOLEAN, REAL;


terminal ERROR_IDENTIFICADOR,
        ERROR_LITERAL,
        ERROR_PALABRA_RESERVADA,
        ERROR_OPERADOR;


// |-------------------- NO TERMINALES --------------------| //

non terminal inicio;

// Estructura de control IF
// non terminal estructura_control_if, sentencia_if, sentencia_else, booleano;
non terminal sentencia_if, condicion;

start with inicio;

// |-------------------- REGLAS SEMANTICAS --------------------| //
inicio ::= sentencia_if;

sentencia_if ::= IF condicion THEN;

condicion ::= IDENTIFICADOR OPERADOR_MAYOR_QUE IDENTIFICADOR {: System.out.println("Mayor que"); :}
            | IDENTIFICADOR OPERADOR_MENOR_QUE IDENTIFICADOR {: System.out.println("Menor que"); :}
            | IDENTIFICADOR OPERADOR_MAYOR_IGUAL_QUE IDENTIFICADOR
            | IDENTIFICADOR OPERADOR_MENOR_IGUAL_QUE IDENTIFICADOR;

/*
INICIO ::= ESTRUCTURA_CONTROL_IF;

ESTRUCTURA_CONTROL_IF ::= SENTENCIA_IF SENTENCIA_ELSE
                        | SENTENCIA_IF ;

SENTENCIA_IF ::= if BOOLEANO then
                | if BOOLEANO then SENTENCIA_IF
                | if BOOLEANO then SENTENCIA_IF SENTENCIA_ELSE;

SENTENCIA_ELSE ::= else
                | else ESTRUCTURA_CONTROL_IF;

BOOLEANO ::= true | false;
*/