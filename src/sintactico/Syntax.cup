package sintactico;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java.io.InputStream;
// http://www2.cs.tum.edu/projects/cup/docs.php
// https://www.youtube.com/watch?v=AQkd5AwjV1E
// http://themfgeek.blogspot.com/2012/10/sintaxis-cup.html
// https://www.youtube.com/watch?v=bBuWPmDrF5M
// https://youtu.be/tSaPDOT2I_4?t=1120
// https://github.com/jflex-de/jflex/blob/master/jflex/examples/cup-java/src/main/cup/java12.cup
// Días de trabajo: Octubre: 17, 19, 20, 21

// TODO: QUITAR -> case, repeat y arreglos.

parser code
{:
    // Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    // Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.left + 1;
        int columna = s.right;

        System.err.println("Error sintactico inrrecuperable en la linea: " + fila + " y columna: " + columna + ". No se esperaba el componente: " + lexema);
    }

    public void report_error(String message, Object info)
    {
        StringBuffer m = new StringBuffer(message);
        if (info instanceof Symbol)
        {
            if (((Symbol)info).left != -1 && ((Symbol)info).right != -1)
            {
            int line = (((Symbol)info).left)+1;
            int column = (((Symbol)info).right)+1;
            m.append(" (line "+line+", column "+column+")");
            }
        }
        System.err.println(m);
    }
:}

// |-------------------- TERMINALES --------------------| //

// Operadores
terminal OPERADOR,
        OPERADOR_INCREMENTO,
        OPERADOR_DISMINUCION,
        OPERADOR_MAYOR_IGUAL_QUE,
        OPERADOR_MAYOR_QUE,
        OPERADOR_MENOR_IGUAL_QUE,
        OPERADOR_MENOR_QUE,
        OPERADOR_ADICION,
        OPERADOR_SUSTRACCION,
        OPERADOR_MULTIPLICACION,
        OPERADOR_DIVISION,
        OPERADOR_PARENTESIS_ABRIR,
        OPERADOR_PARENTESIS_CERRAR,
        OPERADOR_CORCHETE_ABRIR,
        OPERADOR_CORCHETE_CERRAR,
        OPERADOR_ASIGNACION,
        OPERADOR_DIFERENTE_DE,
        OPERADOR_IGUAL_A,
        OPERADOR_ASIGNACION_ADICION,
        OPERADOR_ASIGNACION_SUSTRACCION,
        OPERADOR_ASIGNACION_MULTIPLICACION,
        OPERADOR_ASIGNACION_DIVISION,
        OPERADOR_DESPLAZAMIENTO_DERECHA,
        OPERADOR_DESPLAZAMIENTO_IZQUIERDA,
        OPERADOR_ASIGNACION_DESPLAZAMIENTO_DERECHA,
        OPERADOR_ASIGNACION_DESPLAZAMIENTO_IZQUIERDA,

        OPERADOR_COMA,
        OPERADOR_PUNTO_Y_COMA,
        OPERADOR_DOS_PUNTOS,

        OR, AND, NOT,

        MOD, DIV;

terminal IDENTIFICADOR,
        LITERAL_NUM_FLOTANTE,
        LITERAL_STRING,
        LITERAL_NUM_ENTERO,
        PALABRA_RESERVADA;

terminal PROGRAM, BEGIN, END, CONST, VAR, FUNCTION, PROCEDURE;

terminal IF, THEN, ELSE, WHILE, REPEAT, UNTIL, FOR, TO, DO;

terminal TRUE, FALSE;

terminal INT, LONGINT, SHORTINT, CHAR, STRING, BOOLEAN, REAL;


terminal ERROR_IDENTIFICADOR,
        ERROR_LITERAL,
        ERROR_PALABRA_RESERVADA,
        ERROR_OPERADOR;

// |-------------------- NO TERMINALES --------------------| //

non terminal inicio, programa, encabezado, cuerpo, variables, constantes, tipos, declarar_datos, declarar_funciones,
            declarar_procedimientos, declarar_datos_, asignar_valores, parametros_entrada, retorno_funcion, boolean, expr_aritmeticas,
            _expr_aritmeticas, __expr_aritmeticas, operadores_aritmeticos, estruc_de_control;

non terminal sentencia_if, expr_booleanas, sentencia_else, valores, _valores, __valores, _expr_booleanas, sentencia_while,
            sentencia_repeat, sentencia_for, operadores_booleanos;

non terminal Symbol epsilon;

start with inicio;

// |-------------------- REGLAS SEMANTICAS --------------------| //

inicio ::= programa {: System.out.println("Correcto!"); :};

programa ::= PROGRAM IDENTIFICADOR encabezado
            BEGIN
            cuerpo
            END;

encabezado ::= declarar_datos declarar_funciones declarar_procedimientos;

// ------------------------------ Encabezado ---------------------------------------------------------------------------

declarar_datos ::= VAR variables declarar_datos
                | CONST constantes declarar_datos
                ;

variables ::= IDENTIFICADOR OPERADOR_DOS_PUNTOS tipos
            | IDENTIFICADOR OPERADOR_COMA variables;

constantes ::= IDENTIFICADOR OPERADOR_DOS_PUNTOS tipos
            | IDENTIFICADOR OPERADOR_COMA constantes;

declarar_datos_ ::= declarar_funciones declarar_datos_
                | declarar_procedimientos declarar_datos_
                ;

declarar_funciones ::= FUNCTION IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR OPERADOR_DOS_PUNTOS tipos
                    BEGIN
                    cuerpo
                    retorno_funcion
                    END
                    declarar_funciones
                    ;

declarar_procedimientos ::= PROCEDURE IDENTIFICADOR OPERADOR_PARENTESIS_ABRIR parametros_entrada OPERADOR_PARENTESIS_CERRAR
                    BEGIN
                    cuerpo
                    END
                    declarar_procedimientos
                    ;

parametros_entrada ::= tipos IDENTIFICADOR
                    | tipos IDENTIFICADOR OPERADOR_COMA parametros_entrada;

asignar_valores ::= IDENTIFICADOR OPERADOR_ASIGNACION valores OPERADOR_PUNTO_Y_COMA;

retorno_funcion ::= IDENTIFICADOR OPERADOR_ASIGNACION valores;

cuerpo ::= declarar_datos | asignar_valores | expr_aritmeticas | estruc_de_control
        ;

// ------------------------------ Estructuras de Control ---------------------------------------------------------------

sentencia_if ::= IF expr_booleanas THEN
            | IF expr_booleanas THEN
            sentencia_else
            ;

sentencia_else ::= ELSE END
                //| ELSE cuerpo END
                | ELSE sentencia_if END;

sentencia_while ::= WHILE expr_booleanas DO
                    BEGIN
                    // cuerpo
                    END;

sentencia_repeat ::= REPEAT
                    // cuerpo
                    UNTIL expr_booleanas;

sentencia_for ::= FOR IDENTIFICADOR OPERADOR_ASIGNACION valores TO valores DO
                  BEGIN
                  // cuerpo
                  END;

estruc_de_control ::= sentencia_if | sentencia_while | sentencia_for | sentencia_repeat;

// ------------------------------ Expresiones --------------------------------------------------------------------------

expr_aritmeticas ::= valores operadores_aritmeticos valores _expr_aritmeticas
              | OPERADOR_PARENTESIS_ABRIR expr_aritmeticas OPERADOR_PARENTESIS_CERRAR;

_expr_aritmeticas ::= operadores_aritmeticos valores __expr_aritmeticas;

__expr_aritmeticas ::= _expr_aritmeticas | epsilon;

expr_booleanas ::= valores operadores_booleanos valores _expr_booleanas
            | OPERADOR_PARENTESIS_ABRIR expr_booleanas OPERADOR_PARENTESIS_CERRAR _expr_booleanas;

_expr_booleanas ::= AND expr_booleanas | OR expr_booleanas | epsilon;

// ------------------------------ Símbolos -----------------------------------------------------------------------------

operadores_aritmeticos ::= OPERADOR_ADICION | OPERADOR_DISMINUCION | OPERADOR_MULTIPLICACION | OPERADOR_DIVISION
                        | MOD | OPERADOR_ASIGNACION_ADICION | OPERADOR_ASIGNACION_SUSTRACCION
                        | OPERADOR_ASIGNACION_MULTIPLICACION | OPERADOR_ASIGNACION_DIVISION | DIV;

operadores_booleanos ::= OPERADOR_MAYOR_QUE | OPERADOR_MAYOR_IGUAL_QUE | OPERADOR_MENOR_QUE | OPERADOR_MENOR_IGUAL_QUE
                        | OPERADOR_ASIGNACION | OPERADOR_DIFERENTE_DE;

valores ::= _valores | LITERAL_NUM_ENTERO | LITERAL_NUM_FLOTANTE | LITERAL_STRING | boolean;

_valores ::= IDENTIFICADOR __valores;

__valores ::= OPERADOR_INCREMENTO | OPERADOR_DISMINUCION | epsilon;

boolean ::= TRUE | FALSE | NOT IDENTIFICADOR | NOT TRUE | NOT FALSE;

tipos ::= INT | SHORTINT | LONGINT | REAL | STRING | CHAR | BOOLEAN;

epsilon ::= {: RESULT = new Symbol(-1); :};